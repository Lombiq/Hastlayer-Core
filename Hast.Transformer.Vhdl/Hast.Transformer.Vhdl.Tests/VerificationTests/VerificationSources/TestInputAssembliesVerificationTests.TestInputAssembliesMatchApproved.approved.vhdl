-- Generated by Hastlayer (hastlayer.com) at <date and time removed for approval testing> for the following hardware entry points: 
-- * System.Void Hast.TestInputs.ClassStructure1.RootClass::VirtualMethod(System.Int32)
-- * System.Void Hast.TestInputs.ClassStructure1.ComplexTypes.ComplexTypeHierarchy::Hast.TestInputs.ClassStructure1.ComplexTypes.IInterface1.Interface1Method1()
-- * System.Void Hast.TestInputs.ClassStructure1.ComplexTypes.ComplexTypeHierarchy::Interface1Method2()
-- * System.Void Hast.TestInputs.ClassStructure1.ComplexTypes.ComplexTypeHierarchy::Interface2Method1()
-- * System.Void Hast.TestInputs.ClassStructure1.ComplexTypes.ComplexTypeHierarchy::Hast.TestInputs.ClassStructure1.ComplexTypes.IBaseInterface.BaseInterfaceMethod1()
-- * System.Void Hast.TestInputs.ClassStructure1.ComplexTypes.ComplexTypeHierarchy::BaseInterfaceMethod2()
-- * System.Void Hast.TestInputs.ClassStructure1.ComplexTypes.ComplexTypeHierarchy::NonVirtualNonInterfaceMehod()
-- * System.Void Hast.TestInputs.ClassStructure1.ComplexTypes.StaticClass::StaticMethod()
-- * System.Void Hast.TestInputs.ClassStructure1.ComplexTypes.UnusedDeclarations::UnusedMethod()
-- * System.Void Hast.TestInputs.ClassStructure2.StaticReference::StaticClassUsingMethod()
-- * System.Void Hast.TestInputs.Various.ArrayUsingCases::PassArrayToConstructor()
-- * System.Void Hast.TestInputs.Various.ArrayUsingCases::PassArrayFromMethod()
-- * System.Void Hast.TestInputs.Various.BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(System.Int32)
-- * System.Void Hast.TestInputs.Various.BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(System.Int32)
-- * System.Void Hast.TestInputs.Various.CastingCases::NumberCasting(System.Int16,System.Int16)
-- * System.Void Hast.TestInputs.Various.ConstantsUsingCases::ConstantValuedVariables(System.Int32)
-- * System.Void Hast.TestInputs.Various.ConstantsUsingCases::ConstantPassingToMethod(System.Int32)
-- * System.Void Hast.TestInputs.Various.ConstantsUsingCases::ConstantPassingToObject()
-- * System.Void Hast.TestInputs.Various.LoopCases::BreakInLoop(System.Int32)
-- * System.Void Hast.TestInputs.Various.LoopCases::BreakInLoopInLoop(System.Int32)
-- * System.Void Hast.TestInputs.Various.ObjectUsingCases::NullUsage()
-- * System.Void Hast.TestInputs.Various.ObjectUsingCases::VoidReturn(System.Int32)
-- * System.Void Hast.TestInputs.Various.ObjectUsingCases::ReferenceAssignment(System.Int32)
-- * System.Void Hast.TestInputs.Various.ParallelCases::WhenAllWhenAnyAwaitedTasks(System.UInt32)
-- * System.Void Hast.TestInputs.Various.ParallelCases::ObjectUsingTasks(System.UInt32)
-- * System.Void Hast.TestInputs.Various.UnaryCases::IncrementDecrement(System.Int32)
-- * System.Void Hast.TestInputs.Various.WronglyDecompiledCases::IncorrectlyDecompiledLiterals()

-- VHDL libraries necessary for the generated code to work. These libraries are included here instead of being managed separately in the Hardware Framework so they can be more easily updated.

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

package TypeConversion is
    function SmartResize(input: unsigned; size: natural) return unsigned;
    function SmartResize(input: signed; size: natural) return signed;
    function ToUnsignedAndExpand(input: signed; size: natural) return unsigned;
end TypeConversion;
        
package body TypeConversion is

    -- The .NET behavior is different than that of resize() ("To create a larger vector, the new [leftmost] bit 
    -- positions are filled with the sign bit(ARG'LEFT). When truncating, the sign bit is retained along with the 
    -- rightmost part.") when casting to a smaller type: "If the source type is larger than the destination type, 
    -- then the source value is truncated by discarding its "extra" most significant bits. The result is then 
    -- treated as a value of the destination type." Thus we need to simply truncate when casting down. See:
    -- https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/language-specification/conversions
    function SmartResize(input: unsigned; size: natural) return unsigned is
    begin
        if (size < input'LENGTH) then
            return input(size - 1 downto 0);
        else
            -- Resize() is supposed to work with little endian numbers: "When truncating, the sign bit is retained
            -- along with the rightmost part." for signed numbers and "When truncating, the leftmost bits are 
            -- dropped." for unsigned ones. See: http://www.csee.umbc.edu/portal/help/VHDL/numeric_std.vhdl
            return resize(input, size);
        end if;
    end SmartResize;

    function SmartResize(input: signed; size: natural) return signed is
    begin
        if (size < input'LENGTH) then
            return input(size - 1 downto 0);
        else
            return resize(input, size);
        end if;
    end SmartResize;

    function ToUnsignedAndExpand(input: signed; size: natural) return unsigned is
        variable result: unsigned(size - 1 downto 0);
    begin
        if (input >= 0) then
            return resize(unsigned(input), size);
        else 
            result := (others => '1');
            result(input'LENGTH - 1 downto 0) := unsigned(input);
            return result;
        end if;
    end ToUnsignedAndExpand;

end TypeConversion;

-- Hast_IP, logic generated from the input .NET assemblies starts here.
library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
library work;
use work.TypeConversion.all;

entity Hast_IP is 
    port(
        \MemberId\: In integer;
        \Reset\: In std_logic;
        \Started\: In boolean;
        \Finished\: Out boolean;
        \Clock\: In std_logic
    );
    -- (Hast_IP ID removed for approval testing.)
    -- (Date and time removed for approval testing.)
    -- Generated by Hastlayer - hastlayer.com

    -- Hast_IP's simple interface makes it suitable to plug it into any hardware implementation. The meaning and usage of the ports are as below:
    -- * MemberId: Each transformed .NET hardware entry point member (i.e. methods that are configured to be available to be called from the host PC) has a unique zero-based numeric ID. When selecting which one to execute this ID should be used. 
    -- * Started: Indicates whether the execution of a given hardware entry point member is started. Used in the following way:
    --     1. Started is set to TRUE by the consuming framework, after which the execution of the given member starts internally. The Finished port will be initially set to FALSE.
    --     2. Once the execution is finished, the Finished port will be set to TRUE.
    --     3. The consuming framework sets Started to FALSE, after which Finished will also be set to FALSE.
    -- * Finished: Indicates whether the execution of a given hardware entry point member is complete. See the documentation of the Started port above on how it is used.
    -- * Reset: Synchronous reset.
    -- * Clock: The main clock.

end Hast_IP;

architecture Imp of Hast_IP is 
    -- This IP was generated by Hastlayer from .NET code to mimic the original logic. Note the following:
    -- * For each member (methods, functions, properties) in .NET a state machine was generated. Each state machine's name corresponds to 
    --   the original member's name.
    -- * Inputs and outputs are passed between state machines as shared objects.
    -- * There are operations that take multiple clock cycles like interacting with the memory and long-running arithmetic operations 
    --   (modulo, division, multiplication). These are awaited in subsequent states but be aware that some states can take more 
    --   than one clock cycle to produce their output.
    -- * The ExternalInvocationProxy process dispatches invocations that were started from the outside to the state machines.
    -- * The InternalInvocationProxy processes dispatch invocations between state machines.

    -- Custom inter-dependent type declarations start
    type \signed32_Array\ is array (integer range <>) of signed(31 downto 0);
    type \unsigned32_Array\ is array (integer range <>) of unsigned(31 downto 0);
    type \boolean_Array\ is array (integer range <>) of boolean;
    type \Hast.TestInputs.Various.ArrayUsingCases+ArrayHolder\ is record 
        \IsNull\: boolean;
        \Array\: \signed32_Array\(0 to 4);
    end record;
    type \Hast.TestInputs.Various.ConstantsUsingCases+ArrayHolder1\ is record 
        \IsNull\: boolean;
        \ArrayLength\: unsigned(31 downto 0);
        \ArrayLengthCopy\: unsigned(31 downto 0);
        \NonSubstitutableArrayLengthCopy\: unsigned(31 downto 0);
        \Array\: \unsigned32_Array\(0 to 4);
    end record;
    type \Hast.TestInputs.Various.ConstantsUsingCases+ArrayHolder2\ is record 
        \IsNull\: boolean;
        \ArrayLength\: unsigned(31 downto 0);
    end record;
    type \Hast.TestInputs.Various.ObjectUsingCases+MyClass\ is record 
        \IsNull\: boolean;
        \MyProperty\: signed(31 downto 0);
    end record;
    type \Hast.TestInputs.Various.ParallelCases+Calculator\ is record 
        \IsNull\: boolean;
        \Number\: unsigned(31 downto 0);
    end record;
    -- Custom inter-dependent type declarations end


    -- System.Void Hast.TestInputs.ClassStructure1.RootClass::VirtualMethod(System.Int32).0 declarations start
    -- State machine states:
    type \RootClass::VirtualMethod(Int32).0._States\ is (
        \RootClass::VirtualMethod(Int32).0._State_0\, 
        \RootClass::VirtualMethod(Int32).0._State_1\, 
        \RootClass::VirtualMethod(Int32).0._State_2\);
    -- Signals:
    Signal \RootClass::VirtualMethod(Int32).0._Finished\: boolean := false;
    Signal \RootClass::VirtualMethod(Int32).0._Started\: boolean := false;
    Signal \RootClass::VirtualMethod(Int32).0.input.parameter.In\: signed(31 downto 0) := to_signed(0, 32);
    -- System.Void Hast.TestInputs.ClassStructure1.RootClass::VirtualMethod(System.Int32).0 declarations end


    -- System.Void Hast.TestInputs.ClassStructure1.ComplexTypes.ComplexTypeHierarchy::Hast.TestInputs.ClassStructure1.ComplexTypes.IInterface1.Interface1Method1().0 declarations start
    -- State machine states:
    type \ComplexTypeHierarchy::Hast.TestInputs.ClassStructure1.ComplexTypes.IInterface1.Interface1Method1().0._States\ is (
        \ComplexTypeHierarchy::Hast.TestInputs.ClassStructure1.ComplexTypes.IInterface1.Interface1Method1().0._State_0\, 
        \ComplexTypeHierarchy::Hast.TestInputs.ClassStructure1.ComplexTypes.IInterface1.Interface1Method1().0._State_1\, 
        \ComplexTypeHierarchy::Hast.TestInputs.ClassStructure1.ComplexTypes.IInterface1.Interface1Method1().0._State_2\, 
        \ComplexTypeHierarchy::Hast.TestInputs.ClassStructure1.ComplexTypes.IInterface1.Interface1Method1().0._State_3\);
    -- Signals:
    Signal \ComplexTypeHierarchy::Hast.TestInputs.ClassStructure1.ComplexTypes.IInterface1.Interface1Method1().0._Finished\: boolean := false;
    Signal \ComplexTypeHierarchy::Hast.TestInputs.ClassStructure1.ComplexTypes.IInterface1.Interface1Method1().0.ComplexTypeHierarchy::PrivateMethod()._Started.0\: boolean := false;
    Signal \ComplexTypeHierarchy::Hast.TestInputs.ClassStructure1.ComplexTypes.IInterface1.Interface1Method1().0._Started\: boolean := false;
    Signal \ComplexTypeHierarchy::Hast.TestInputs.ClassStructure1.ComplexTypes.IInterface1.Interface1Method1().0.ComplexTypeHierarchy::PrivateMethod()._Finished.0\: boolean := false;
    -- System.Void Hast.TestInputs.ClassStructure1.ComplexTypes.ComplexTypeHierarchy::Hast.TestInputs.ClassStructure1.ComplexTypes.IInterface1.Interface1Method1().0 declarations end


    -- System.Void Hast.TestInputs.ClassStructure1.ComplexTypes.ComplexTypeHierarchy::Interface1Method2().0 declarations start
    -- State machine states:
    type \ComplexTypeHierarchy::Interface1Method2().0._States\ is (
        \ComplexTypeHierarchy::Interface1Method2().0._State_0\, 
        \ComplexTypeHierarchy::Interface1Method2().0._State_1\, 
        \ComplexTypeHierarchy::Interface1Method2().0._State_2\, 
        \ComplexTypeHierarchy::Interface1Method2().0._State_3\, 
        \ComplexTypeHierarchy::Interface1Method2().0._State_4\);
    -- Signals:
    Signal \ComplexTypeHierarchy::Interface1Method2().0._Finished\: boolean := false;
    Signal \ComplexTypeHierarchy::Interface1Method2().0.ComplexTypeHierarchy::PrivateMethod()._Started.0\: boolean := false;
    Signal \ComplexTypeHierarchy::Interface1Method2().0.ComplexTypeHierarchy::StaticMethod()._Started.0\: boolean := false;
    Signal \ComplexTypeHierarchy::Interface1Method2().0._Started\: boolean := false;
    Signal \ComplexTypeHierarchy::Interface1Method2().0.ComplexTypeHierarchy::PrivateMethod()._Finished.0\: boolean := false;
    Signal \ComplexTypeHierarchy::Interface1Method2().0.ComplexTypeHierarchy::StaticMethod()._Finished.0\: boolean := false;
    -- System.Void Hast.TestInputs.ClassStructure1.ComplexTypes.ComplexTypeHierarchy::Interface1Method2().0 declarations end


    -- System.Void Hast.TestInputs.ClassStructure1.ComplexTypes.ComplexTypeHierarchy::Interface2Method1().0 declarations start
    -- State machine states:
    type \ComplexTypeHierarchy::Interface2Method1().0._States\ is (
        \ComplexTypeHierarchy::Interface2Method1().0._State_0\, 
        \ComplexTypeHierarchy::Interface2Method1().0._State_1\, 
        \ComplexTypeHierarchy::Interface2Method1().0._State_2\, 
        \ComplexTypeHierarchy::Interface2Method1().0._State_3\);
    -- Signals:
    Signal \ComplexTypeHierarchy::Interface2Method1().0._Finished\: boolean := false;
    Signal \ComplexTypeHierarchy::Interface2Method1().0.ComplexTypeHierarchy::BaseInterfaceMethod2()._Started.0\: boolean := false;
    Signal \ComplexTypeHierarchy::Interface2Method1().0._Started\: boolean := false;
    Signal \ComplexTypeHierarchy::Interface2Method1().0.ComplexTypeHierarchy::BaseInterfaceMethod2()._Finished.0\: boolean := false;
    -- System.Void Hast.TestInputs.ClassStructure1.ComplexTypes.ComplexTypeHierarchy::Interface2Method1().0 declarations end


    -- System.Void Hast.TestInputs.ClassStructure1.ComplexTypes.ComplexTypeHierarchy::Hast.TestInputs.ClassStructure1.ComplexTypes.IBaseInterface.BaseInterfaceMethod1().0 declarations start
    -- State machine states:
    type \ComplexTypeHierarchy::Hast.TestInputs.ClassStructure1.ComplexTypes.IBaseInterface.BaseInterfaceMethod1().0._States\ is (
        \ComplexTypeHierarchy::Hast.TestInputs.ClassStructure1.ComplexTypes.IBaseInterface.BaseInterfaceMethod1().0._State_0\, 
        \ComplexTypeHierarchy::Hast.TestInputs.ClassStructure1.ComplexTypes.IBaseInterface.BaseInterfaceMethod1().0._State_1\, 
        \ComplexTypeHierarchy::Hast.TestInputs.ClassStructure1.ComplexTypes.IBaseInterface.BaseInterfaceMethod1().0._State_2\);
    -- Signals:
    Signal \ComplexTypeHierarchy::Hast.TestInputs.ClassStructure1.ComplexTypes.IBaseInterface.BaseInterfaceMethod1().0._Finished\: boolean := false;
    Signal \ComplexTypeHierarchy::Hast.TestInputs.ClassStructure1.ComplexTypes.IBaseInterface.BaseInterfaceMethod1().0._Started\: boolean := false;
    -- System.Void Hast.TestInputs.ClassStructure1.ComplexTypes.ComplexTypeHierarchy::Hast.TestInputs.ClassStructure1.ComplexTypes.IBaseInterface.BaseInterfaceMethod1().0 declarations end


    -- System.Void Hast.TestInputs.ClassStructure1.ComplexTypes.ComplexTypeHierarchy::BaseInterfaceMethod2().0 declarations start
    -- State machine states:
    type \ComplexTypeHierarchy::BaseInterfaceMethod2().0._States\ is (
        \ComplexTypeHierarchy::BaseInterfaceMethod2().0._State_0\, 
        \ComplexTypeHierarchy::BaseInterfaceMethod2().0._State_1\, 
        \ComplexTypeHierarchy::BaseInterfaceMethod2().0._State_2\, 
        \ComplexTypeHierarchy::BaseInterfaceMethod2().0._State_3\);
    -- Signals:
    Signal \ComplexTypeHierarchy::BaseInterfaceMethod2().0._Finished\: boolean := false;
    Signal \ComplexTypeHierarchy::BaseInterfaceMethod2().0.ComplexTypeHierarchy::StaticMethod()._Started.0\: boolean := false;
    Signal \ComplexTypeHierarchy::BaseInterfaceMethod2().0._Started\: boolean := false;
    Signal \ComplexTypeHierarchy::BaseInterfaceMethod2().0.ComplexTypeHierarchy::StaticMethod()._Finished.0\: boolean := false;
    -- System.Void Hast.TestInputs.ClassStructure1.ComplexTypes.ComplexTypeHierarchy::BaseInterfaceMethod2().0 declarations end


    -- System.Void Hast.TestInputs.ClassStructure1.ComplexTypes.ComplexTypeHierarchy::NonVirtualNonInterfaceMehod().0 declarations start
    -- State machine states:
    type \ComplexTypeHierarchy::NonVirtualNonInterfaceMehod().0._States\ is (
        \ComplexTypeHierarchy::NonVirtualNonInterfaceMehod().0._State_0\, 
        \ComplexTypeHierarchy::NonVirtualNonInterfaceMehod().0._State_1\, 
        \ComplexTypeHierarchy::NonVirtualNonInterfaceMehod().0._State_2\, 
        \ComplexTypeHierarchy::NonVirtualNonInterfaceMehod().0._State_3\);
    -- Signals:
    Signal \ComplexTypeHierarchy::NonVirtualNonInterfaceMehod().0._Finished\: boolean := false;
    Signal \ComplexTypeHierarchy::NonVirtualNonInterfaceMehod().0.ComplexTypeHierarchy::PrivateMethod()._Started.0\: boolean := false;
    Signal \ComplexTypeHierarchy::NonVirtualNonInterfaceMehod().0._Started\: boolean := false;
    Signal \ComplexTypeHierarchy::NonVirtualNonInterfaceMehod().0.ComplexTypeHierarchy::PrivateMethod()._Finished.0\: boolean := false;
    -- System.Void Hast.TestInputs.ClassStructure1.ComplexTypes.ComplexTypeHierarchy::NonVirtualNonInterfaceMehod().0 declarations end


    -- System.Void Hast.TestInputs.ClassStructure1.ComplexTypes.ComplexTypeHierarchy::PrivateMethod().0 declarations start
    -- State machine states:
    type \ComplexTypeHierarchy::PrivateMethod().0._States\ is (
        \ComplexTypeHierarchy::PrivateMethod().0._State_0\, 
        \ComplexTypeHierarchy::PrivateMethod().0._State_1\, 
        \ComplexTypeHierarchy::PrivateMethod().0._State_2\, 
        \ComplexTypeHierarchy::PrivateMethod().0._State_3\);
    -- Signals:
    Signal \ComplexTypeHierarchy::PrivateMethod().0._Finished\: boolean := false;
    Signal \ComplexTypeHierarchy::PrivateMethod().0.ComplexTypeHierarchy::StaticMethod()._Started.0\: boolean := false;
    Signal \ComplexTypeHierarchy::PrivateMethod().0._Started\: boolean := false;
    Signal \ComplexTypeHierarchy::PrivateMethod().0.ComplexTypeHierarchy::StaticMethod()._Finished.0\: boolean := false;
    -- System.Void Hast.TestInputs.ClassStructure1.ComplexTypes.ComplexTypeHierarchy::PrivateMethod().0 declarations end


    -- System.Void Hast.TestInputs.ClassStructure1.ComplexTypes.ComplexTypeHierarchy::StaticMethod().0 declarations start
    -- State machine states:
    type \ComplexTypeHierarchy::StaticMethod().0._States\ is (
        \ComplexTypeHierarchy::StaticMethod().0._State_0\, 
        \ComplexTypeHierarchy::StaticMethod().0._State_1\, 
        \ComplexTypeHierarchy::StaticMethod().0._State_2\);
    -- Signals:
    Signal \ComplexTypeHierarchy::StaticMethod().0._Finished\: boolean := false;
    Signal \ComplexTypeHierarchy::StaticMethod().0._Started\: boolean := false;
    -- System.Void Hast.TestInputs.ClassStructure1.ComplexTypes.ComplexTypeHierarchy::StaticMethod().0 declarations end


    -- System.Void Hast.TestInputs.ClassStructure1.ComplexTypes.StaticClass::StaticMethod().0 declarations start
    -- State machine states:
    type \StaticClass::StaticMethod().0._States\ is (
        \StaticClass::StaticMethod().0._State_0\, 
        \StaticClass::StaticMethod().0._State_1\, 
        \StaticClass::StaticMethod().0._State_2\);
    -- Signals:
    Signal \StaticClass::StaticMethod().0._Finished\: boolean := false;
    Signal \StaticClass::StaticMethod().0._Started\: boolean := false;
    -- System.Void Hast.TestInputs.ClassStructure1.ComplexTypes.StaticClass::StaticMethod().0 declarations end


    -- System.Void Hast.TestInputs.ClassStructure1.ComplexTypes.UnusedDeclarations::UnusedMethod().0 declarations start
    -- State machine states:
    type \UnusedDeclarations::UnusedMethod().0._States\ is (
        \UnusedDeclarations::UnusedMethod().0._State_0\, 
        \UnusedDeclarations::UnusedMethod().0._State_1\, 
        \UnusedDeclarations::UnusedMethod().0._State_2\);
    -- Signals:
    Signal \UnusedDeclarations::UnusedMethod().0._Finished\: boolean := false;
    Signal \UnusedDeclarations::UnusedMethod().0._Started\: boolean := false;
    -- System.Void Hast.TestInputs.ClassStructure1.ComplexTypes.UnusedDeclarations::UnusedMethod().0 declarations end


    -- System.Void Hast.TestInputs.ClassStructure2.StaticReference::StaticClassUsingMethod().0 declarations start
    -- State machine states:
    type \StaticReference::StaticClassUsingMethod().0._States\ is (
        \StaticReference::StaticClassUsingMethod().0._State_0\, 
        \StaticReference::StaticClassUsingMethod().0._State_1\, 
        \StaticReference::StaticClassUsingMethod().0._State_2\, 
        \StaticReference::StaticClassUsingMethod().0._State_3\);
    -- Signals:
    Signal \StaticReference::StaticClassUsingMethod().0._Finished\: boolean := false;
    Signal \StaticReference::StaticClassUsingMethod().0.StaticClass::StaticMethod()._Started.0\: boolean := false;
    Signal \StaticReference::StaticClassUsingMethod().0._Started\: boolean := false;
    Signal \StaticReference::StaticClassUsingMethod().0.StaticClass::StaticMethod()._Finished.0\: boolean := false;
    -- System.Void Hast.TestInputs.ClassStructure2.StaticReference::StaticClassUsingMethod().0 declarations end


    -- System.Void Hast.TestInputs.Various.ArrayUsingCases+ArrayHolder::.ctor(System.Int32[]).0 declarations start
    -- State machine states:
    type \ArrayUsingCases+ArrayHolder::.ctor(Int32[]).0._States\ is (
        \ArrayUsingCases+ArrayHolder::.ctor(Int32[]).0._State_0\, 
        \ArrayUsingCases+ArrayHolder::.ctor(Int32[]).0._State_1\, 
        \ArrayUsingCases+ArrayHolder::.ctor(Int32[]).0._State_2\);
    -- Signals:
    Signal \ArrayUsingCases+ArrayHolder::.ctor(Int32[]).0._Finished\: boolean := false;
    Signal \ArrayUsingCases+ArrayHolder::.ctor(Int32[]).0.this.parameter.Out\: \Hast.TestInputs.Various.ArrayUsingCases+ArrayHolder\;
    Signal \ArrayUsingCases+ArrayHolder::.ctor(Int32[]).0.array.parameter.Out\: \signed32_Array\(0 to 4) := (others => to_signed(0, 32));
    Signal \ArrayUsingCases+ArrayHolder::.ctor(Int32[]).0._Started\: boolean := false;
    Signal \ArrayUsingCases+ArrayHolder::.ctor(Int32[]).0.this.parameter.In\: \Hast.TestInputs.Various.ArrayUsingCases+ArrayHolder\;
    Signal \ArrayUsingCases+ArrayHolder::.ctor(Int32[]).0.array.parameter.In\: \signed32_Array\(0 to 4) := (others => to_signed(0, 32));
    -- System.Void Hast.TestInputs.Various.ArrayUsingCases+ArrayHolder::.ctor(System.Int32[]).0 declarations end


    -- System.Void Hast.TestInputs.Various.ArrayUsingCases::PassArrayToConstructor().0 declarations start
    -- State machine states:
    type \ArrayUsingCases::PassArrayToConstructor().0._States\ is (
        \ArrayUsingCases::PassArrayToConstructor().0._State_0\, 
        \ArrayUsingCases::PassArrayToConstructor().0._State_1\, 
        \ArrayUsingCases::PassArrayToConstructor().0._State_2\, 
        \ArrayUsingCases::PassArrayToConstructor().0._State_3\);
    -- Signals:
    Signal \ArrayUsingCases::PassArrayToConstructor().0._Finished\: boolean := false;
    Signal \ArrayUsingCases::PassArrayToConstructor().0.ArrayUsingCases+ArrayHolder::.ctor(Int32[]).this.parameter.Out.0\: \Hast.TestInputs.Various.ArrayUsingCases+ArrayHolder\;
    Signal \ArrayUsingCases::PassArrayToConstructor().0.ArrayUsingCases+ArrayHolder::.ctor(Int32[]).array.parameter.Out.0\: \signed32_Array\(0 to 4) := (others => to_signed(0, 32));
    Signal \ArrayUsingCases::PassArrayToConstructor().0.ArrayUsingCases+ArrayHolder::.ctor(Int32[])._Started.0\: boolean := false;
    Signal \ArrayUsingCases::PassArrayToConstructor().0._Started\: boolean := false;
    Signal \ArrayUsingCases::PassArrayToConstructor().0.ArrayUsingCases+ArrayHolder::.ctor(Int32[]).this.parameter.In.0\: \Hast.TestInputs.Various.ArrayUsingCases+ArrayHolder\;
    Signal \ArrayUsingCases::PassArrayToConstructor().0.ArrayUsingCases+ArrayHolder::.ctor(Int32[]).array.parameter.In.0\: \signed32_Array\(0 to 4) := (others => to_signed(0, 32));
    Signal \ArrayUsingCases::PassArrayToConstructor().0.ArrayUsingCases+ArrayHolder::.ctor(Int32[])._Finished.0\: boolean := false;
    -- System.Void Hast.TestInputs.Various.ArrayUsingCases::PassArrayToConstructor().0 declarations end


    -- System.Void Hast.TestInputs.Various.ArrayUsingCases::PassArrayFromMethod().0 declarations start
    -- State machine states:
    type \ArrayUsingCases::PassArrayFromMethod().0._States\ is (
        \ArrayUsingCases::PassArrayFromMethod().0._State_0\, 
        \ArrayUsingCases::PassArrayFromMethod().0._State_1\, 
        \ArrayUsingCases::PassArrayFromMethod().0._State_2\, 
        \ArrayUsingCases::PassArrayFromMethod().0._State_3\);
    -- Signals:
    Signal \ArrayUsingCases::PassArrayFromMethod().0._Finished\: boolean := false;
    Signal \ArrayUsingCases::PassArrayFromMethod().0.ArrayUsingCases::ArrayProducingMethod(Int32).arrayLength.parameter.Out.0\: signed(31 downto 0) := to_signed(0, 32);
    Signal \ArrayUsingCases::PassArrayFromMethod().0.ArrayUsingCases::ArrayProducingMethod(Int32)._Started.0\: boolean := false;
    Signal \ArrayUsingCases::PassArrayFromMethod().0._Started\: boolean := false;
    Signal \ArrayUsingCases::PassArrayFromMethod().0.ArrayUsingCases::ArrayProducingMethod(Int32)._Finished.0\: boolean := false;
    Signal \ArrayUsingCases::PassArrayFromMethod().0.ArrayUsingCases::ArrayProducingMethod(Int32).return.0\: \signed32_Array\(0 to 4) := (others => to_signed(0, 32));
    -- System.Void Hast.TestInputs.Various.ArrayUsingCases::PassArrayFromMethod().0 declarations end


    -- System.Int32[] Hast.TestInputs.Various.ArrayUsingCases::ArrayProducingMethod(System.Int32).0 declarations start
    -- State machine states:
    type \ArrayUsingCases::ArrayProducingMethod(Int32).0._States\ is (
        \ArrayUsingCases::ArrayProducingMethod(Int32).0._State_0\, 
        \ArrayUsingCases::ArrayProducingMethod(Int32).0._State_1\, 
        \ArrayUsingCases::ArrayProducingMethod(Int32).0._State_2\);
    -- Signals:
    Signal \ArrayUsingCases::ArrayProducingMethod(Int32).0._Finished\: boolean := false;
    Signal \ArrayUsingCases::ArrayProducingMethod(Int32).0.return\: \signed32_Array\(0 to 4) := (others => to_signed(0, 32));
    Signal \ArrayUsingCases::ArrayProducingMethod(Int32).0._Started\: boolean := false;
    Signal \ArrayUsingCases::ArrayProducingMethod(Int32).0.arrayLength.parameter.In\: signed(31 downto 0) := to_signed(0, 32);
    -- System.Int32[] Hast.TestInputs.Various.ArrayUsingCases::ArrayProducingMethod(System.Int32).0 declarations end


    -- System.Void Hast.TestInputs.Various.BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(System.Int32).0 declarations start
    -- State machine states:
    type \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._States\ is (
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_0\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_1\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_2\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_3\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_4\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_5\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_6\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_7\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_8\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_9\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_10\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_11\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_12\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_13\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_14\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_15\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_16\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_17\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_18\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_19\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_20\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_21\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_22\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_23\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_24\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_25\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_26\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_27\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_28\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_29\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_30\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_31\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_32\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_33\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_34\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_35\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_36\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_37\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_38\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_39\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_40\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_41\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_42\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_43\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_44\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_45\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_46\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_47\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_48\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_49\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_50\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_51\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_52\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_53\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_54\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_55\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_56\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_57\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_58\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_59\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_60\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_61\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_62\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_63\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_64\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_65\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_66\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_67\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_68\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_69\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_70\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_71\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_72\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_73\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_74\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_75\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_76\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_77\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_78\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_79\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_80\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_81\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_82\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_83\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_84\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_85\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_86\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_87\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_88\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_89\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_90\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_91\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_92\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_93\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_94\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_95\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_96\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_97\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_98\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_99\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_100\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_101\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_102\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_103\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_104\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_105\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_106\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_107\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_108\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_109\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_110\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_111\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_112\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_113\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_114\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_115\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_116\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_117\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_118\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_119\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_120\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_121\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_122\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_123\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_124\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_125\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_126\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_127\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_128\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_129\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_130\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_131\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_132\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_133\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_134\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_135\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_136\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_137\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_138\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_139\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_140\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_141\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_142\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_143\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_144\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_145\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_146\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_147\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_148\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_149\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_150\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_151\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_152\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_153\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_154\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_155\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_156\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_157\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_158\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_159\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_160\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_161\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_162\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_163\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_164\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_165\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_166\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_167\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_168\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_169\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_170\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_171\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_172\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_173\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_174\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_175\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_176\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_177\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_178\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_179\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_180\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_181\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_182\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_183\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_184\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_185\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_186\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_187\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_188\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_189\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_190\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_191\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_192\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_193\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_194\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_195\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_196\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_197\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_198\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_199\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_200\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_201\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_202\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_203\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_204\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_205\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_206\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_207\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_208\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_209\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_210\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_211\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_212\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_213\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_214\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_215\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_216\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_217\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_218\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_219\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_220\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_221\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_222\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_223\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_224\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_225\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_226\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_227\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_228\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_229\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_230\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_231\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_232\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_233\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_234\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_235\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_236\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_237\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_238\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_239\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_240\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_241\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_242\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_243\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_244\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_245\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_246\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_247\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_248\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_249\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_250\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_251\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_252\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_253\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_254\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_255\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_256\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_257\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_258\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_259\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_260\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_261\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_262\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_263\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_264\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_265\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_266\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_267\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_268\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_269\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_270\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_271\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_272\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_273\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_274\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_275\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_276\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_277\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_278\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_279\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_280\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_281\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_282\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_283\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_284\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_285\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_286\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_287\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_288\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_289\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_290\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_291\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_292\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_293\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_294\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_295\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_296\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_297\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_298\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_299\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_300\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_301\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_302\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_303\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_304\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_305\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_306\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_307\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_308\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_309\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_310\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_311\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_312\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_313\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_314\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_315\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_316\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_317\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_318\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_319\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_320\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_321\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_322\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_323\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_324\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_325\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_326\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_327\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_328\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_329\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_330\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_331\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_332\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_333\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_334\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_335\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_336\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_337\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_338\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_339\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_340\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_341\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_342\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_343\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_344\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_345\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_346\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_347\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_348\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_349\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_350\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_351\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_352\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_353\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_354\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_355\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_356\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_357\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_358\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_359\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_360\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_361\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_362\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_363\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_364\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_365\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_366\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_367\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_368\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_369\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_370\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_371\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_372\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_373\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_374\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_375\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_376\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_377\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_378\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_379\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_380\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_381\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_382\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_383\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_384\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_385\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_386\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_387\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_388\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_389\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_390\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_391\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_392\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_393\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_394\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_395\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_396\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_397\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_398\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_399\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_400\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_401\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_402\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_403\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_404\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_405\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_406\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_407\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_408\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_409\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_410\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_411\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_412\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_413\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_414\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_415\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_416\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_417\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_418\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_419\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_420\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_421\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_422\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_423\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_424\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_425\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_426\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_427\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_428\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_429\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_430\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_431\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_432\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_433\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_434\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_435\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_436\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_437\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_438\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_439\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_440\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_441\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_442\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_443\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_444\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_445\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_446\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_447\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_448\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_449\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_450\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_451\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_452\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_453\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_454\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_455\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_456\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_457\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_458\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_459\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_460\, 
        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_461\);
    -- Signals:
    Signal \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._Finished\: boolean := false;
    Signal \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._Started\: boolean := false;
    Signal \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input.parameter.In\: signed(31 downto 0) := to_signed(0, 32);
    -- System.Void Hast.TestInputs.Various.BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(System.Int32).0 declarations end


    -- System.Void Hast.TestInputs.Various.BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(System.Int32).0 declarations start
    -- State machine states:
    type \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(Int32).0._States\ is (
        \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(Int32).0._State_0\, 
        \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(Int32).0._State_1\, 
        \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(Int32).0._State_2\, 
        \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(Int32).0._State_3\, 
        \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(Int32).0._State_4\, 
        \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(Int32).0._State_5\);
    -- Signals:
    Signal \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(Int32).0._Finished\: boolean := false;
    Signal \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(Int32).0._Started\: boolean := false;
    Signal \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(Int32).0.input.parameter.In\: signed(31 downto 0) := to_signed(0, 32);
    -- System.Void Hast.TestInputs.Various.BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(System.Int32).0 declarations end


    -- System.Void Hast.TestInputs.Various.CastingCases::NumberCasting(System.Int16,System.Int16).0 declarations start
    -- State machine states:
    type \CastingCases::NumberCasting(Int16,Int16).0._States\ is (
        \CastingCases::NumberCasting(Int16,Int16).0._State_0\, 
        \CastingCases::NumberCasting(Int16,Int16).0._State_1\, 
        \CastingCases::NumberCasting(Int16,Int16).0._State_2\, 
        \CastingCases::NumberCasting(Int16,Int16).0._State_3\);
    -- Signals:
    Signal \CastingCases::NumberCasting(Int16,Int16).0._Finished\: boolean := false;
    Signal \CastingCases::NumberCasting(Int16,Int16).0._Started\: boolean := false;
    Signal \CastingCases::NumberCasting(Int16,Int16).0.a.parameter.In\: signed(15 downto 0) := to_signed(0, 16);
    Signal \CastingCases::NumberCasting(Int16,Int16).0.b.parameter.In\: signed(15 downto 0) := to_signed(0, 16);
    -- System.Void Hast.TestInputs.Various.CastingCases::NumberCasting(System.Int16,System.Int16).0 declarations end


    -- System.Void Hast.TestInputs.Various.ConstantsUsingCases+ArrayHolder1::.ctor(System.UInt32[]).0 declarations start
    -- State machine states:
    type \ConstantsUsingCases+ArrayHolder1::.ctor(UInt32[]).0._States\ is (
        \ConstantsUsingCases+ArrayHolder1::.ctor(UInt32[]).0._State_0\, 
        \ConstantsUsingCases+ArrayHolder1::.ctor(UInt32[]).0._State_1\, 
        \ConstantsUsingCases+ArrayHolder1::.ctor(UInt32[]).0._State_2\);
    -- Signals:
    Signal \ConstantsUsingCases+ArrayHolder1::.ctor(UInt32[]).0._Finished\: boolean := false;
    Signal \ConstantsUsingCases+ArrayHolder1::.ctor(UInt32[]).0.this.parameter.Out\: \Hast.TestInputs.Various.ConstantsUsingCases+ArrayHolder1\;
    Signal \ConstantsUsingCases+ArrayHolder1::.ctor(UInt32[]).0.array.parameter.Out\: \unsigned32_Array\(0 to 4) := (others => to_unsigned(0, 32));
    Signal \ConstantsUsingCases+ArrayHolder1::.ctor(UInt32[]).0._Started\: boolean := false;
    Signal \ConstantsUsingCases+ArrayHolder1::.ctor(UInt32[]).0.this.parameter.In\: \Hast.TestInputs.Various.ConstantsUsingCases+ArrayHolder1\;
    Signal \ConstantsUsingCases+ArrayHolder1::.ctor(UInt32[]).0.array.parameter.In\: \unsigned32_Array\(0 to 4) := (others => to_unsigned(0, 32));
    -- System.Void Hast.TestInputs.Various.ConstantsUsingCases+ArrayHolder1::.ctor(System.UInt32[]).0 declarations end


    -- System.Void Hast.TestInputs.Various.ConstantsUsingCases+ArrayHolder1::.ctor(System.UInt32).0 declarations start
    -- State machine states:
    type \ConstantsUsingCases+ArrayHolder1::.ctor(UInt32).0._States\ is (
        \ConstantsUsingCases+ArrayHolder1::.ctor(UInt32).0._State_0\, 
        \ConstantsUsingCases+ArrayHolder1::.ctor(UInt32).0._State_1\, 
        \ConstantsUsingCases+ArrayHolder1::.ctor(UInt32).0._State_2\);
    -- Signals:
    Signal \ConstantsUsingCases+ArrayHolder1::.ctor(UInt32).0._Finished\: boolean := false;
    Signal \ConstantsUsingCases+ArrayHolder1::.ctor(UInt32).0.this.parameter.Out\: \Hast.TestInputs.Various.ConstantsUsingCases+ArrayHolder1\;
    Signal \ConstantsUsingCases+ArrayHolder1::.ctor(UInt32).0._Started\: boolean := false;
    Signal \ConstantsUsingCases+ArrayHolder1::.ctor(UInt32).0.this.parameter.In\: \Hast.TestInputs.Various.ConstantsUsingCases+ArrayHolder1\;
    Signal \ConstantsUsingCases+ArrayHolder1::.ctor(UInt32).0.size.parameter.In\: unsigned(31 downto 0) := to_unsigned(0, 32);
    -- System.Void Hast.TestInputs.Various.ConstantsUsingCases+ArrayHolder1::.ctor(System.UInt32).0 declarations end


    -- System.Void Hast.TestInputs.Various.ConstantsUsingCases+ArrayHolder1::.ctor(Hast.TestInputs.Various.ConstantsUsingCases+ArrayHolder1).0 declarations start
    -- State machine states:
    type \ConstantsUsingCases+ArrayHolder1::.ctor(ConstantsUsingCases+ArrayHolder1).0._States\ is (
        \ConstantsUsingCases+ArrayHolder1::.ctor(ConstantsUsingCases+ArrayHolder1).0._State_0\, 
        \ConstantsUsingCases+ArrayHolder1::.ctor(ConstantsUsingCases+ArrayHolder1).0._State_1\, 
        \ConstantsUsingCases+ArrayHolder1::.ctor(ConstantsUsingCases+ArrayHolder1).0._State_2\, 
        \ConstantsUsingCases+ArrayHolder1::.ctor(ConstantsUsingCases+ArrayHolder1).0._State_3\);
    -- Signals:
    Signal \ConstantsUsingCases+ArrayHolder1::.ctor(ConstantsUsingCases+ArrayHolder1).0._Finished\: boolean := false;
    Signal \ConstantsUsingCases+ArrayHolder1::.ctor(ConstantsUsingCases+ArrayHolder1).0.this.parameter.Out\: \Hast.TestInputs.Various.ConstantsUsingCases+ArrayHolder1\;
    Signal \ConstantsUsingCases+ArrayHolder1::.ctor(ConstantsUsingCases+ArrayHolder1).0.previous.parameter.Out\: \Hast.TestInputs.Various.ConstantsUsingCases+ArrayHolder1\;
    Signal \ConstantsUsingCases+ArrayHolder1::.ctor(ConstantsUsingCases+ArrayHolder1).0.ConstantsUsingCases+ArrayHolder1::.ctor(UInt32[]).this.parameter.Out.0\: \Hast.TestInputs.Various.ConstantsUsingCases+ArrayHolder1\;
    Signal \ConstantsUsingCases+ArrayHolder1::.ctor(ConstantsUsingCases+ArrayHolder1).0.ConstantsUsingCases+ArrayHolder1::.ctor(UInt32[]).array.parameter.Out.0\: \unsigned32_Array\(0 to 4) := (others => to_unsigned(0, 32));
    Signal \ConstantsUsingCases+ArrayHolder1::.ctor(ConstantsUsingCases+ArrayHolder1).0.ConstantsUsingCases+ArrayHolder1::.ctor(UInt32[])._Started.0\: boolean := false;
    Signal \ConstantsUsingCases+ArrayHolder1::.ctor(ConstantsUsingCases+ArrayHolder1).0._Started\: boolean := false;
    Signal \ConstantsUsingCases+ArrayHolder1::.ctor(ConstantsUsingCases+ArrayHolder1).0.this.parameter.In\: \Hast.TestInputs.Various.ConstantsUsingCases+ArrayHolder1\;
    Signal \ConstantsUsingCases+ArrayHolder1::.ctor(ConstantsUsingCases+ArrayHolder1).0.previous.parameter.In\: \Hast.TestInputs.Various.ConstantsUsingCases+ArrayHolder1\;
    Signal \ConstantsUsingCases+ArrayHolder1::.ctor(ConstantsUsingCases+ArrayHolder1).0.ConstantsUsingCases+ArrayHolder1::.ctor(UInt32[]).this.parameter.In.0\: \Hast.TestInputs.Various.ConstantsUsingCases+ArrayHolder1\;
    Signal \ConstantsUsingCases+ArrayHolder1::.ctor(ConstantsUsingCases+ArrayHolder1).0.ConstantsUsingCases+ArrayHolder1::.ctor(UInt32[]).array.parameter.In.0\: \unsigned32_Array\(0 to 4) := (others => to_unsigned(0, 32));
    Signal \ConstantsUsingCases+ArrayHolder1::.ctor(ConstantsUsingCases+ArrayHolder1).0.ConstantsUsingCases+ArrayHolder1::.ctor(UInt32[])._Finished.0\: boolean := false;
    -- System.Void Hast.TestInputs.Various.ConstantsUsingCases+ArrayHolder1::.ctor(Hast.TestInputs.Various.ConstantsUsingCases+ArrayHolder1).0 declarations end


    -- System.Void Hast.TestInputs.Various.ConstantsUsingCases+ArrayHolder2::.ctor(System.UInt32).0 declarations start
    -- State machine states:
    type \ConstantsUsingCases+ArrayHolder2::.ctor(UInt32).0._States\ is (
        \ConstantsUsingCases+ArrayHolder2::.ctor(UInt32).0._State_0\, 
        \ConstantsUsingCases+ArrayHolder2::.ctor(UInt32).0._State_1\, 
        \ConstantsUsingCases+ArrayHolder2::.ctor(UInt32).0._State_2\, 
        \ConstantsUsingCases+ArrayHolder2::.ctor(UInt32).0._State_3\, 
        \ConstantsUsingCases+ArrayHolder2::.ctor(UInt32).0._State_4\, 
        \ConstantsUsingCases+ArrayHolder2::.ctor(UInt32).0._State_5\);
    -- Signals:
    Signal \ConstantsUsingCases+ArrayHolder2::.ctor(UInt32).0._Finished\: boolean := false;
    Signal \ConstantsUsingCases+ArrayHolder2::.ctor(UInt32).0.this.parameter.Out\: \Hast.TestInputs.Various.ConstantsUsingCases+ArrayHolder2\;
    Signal \ConstantsUsingCases+ArrayHolder2::.ctor(UInt32).0._Started\: boolean := false;
    Signal \ConstantsUsingCases+ArrayHolder2::.ctor(UInt32).0.this.parameter.In\: \Hast.TestInputs.Various.ConstantsUsingCases+ArrayHolder2\;
    Signal \ConstantsUsingCases+ArrayHolder2::.ctor(UInt32).0.size.parameter.In\: unsigned(31 downto 0) := to_unsigned(0, 32);
    -- System.Void Hast.TestInputs.Various.ConstantsUsingCases+ArrayHolder2::.ctor(System.UInt32).0 declarations end


    -- System.Void Hast.TestInputs.Various.ConstantsUsingCases::ConstantValuedVariables(System.Int32).0 declarations start
    -- State machine states:
    type \ConstantsUsingCases::ConstantValuedVariables(Int32).0._States\ is (
        \ConstantsUsingCases::ConstantValuedVariables(Int32).0._State_0\, 
        \ConstantsUsingCases::ConstantValuedVariables(Int32).0._State_1\, 
        \ConstantsUsingCases::ConstantValuedVariables(Int32).0._State_2\, 
        \ConstantsUsingCases::ConstantValuedVariables(Int32).0._State_3\, 
        \ConstantsUsingCases::ConstantValuedVariables(Int32).0._State_4\, 
        \ConstantsUsingCases::ConstantValuedVariables(Int32).0._State_5\);
    -- Signals:
    Signal \ConstantsUsingCases::ConstantValuedVariables(Int32).0._Finished\: boolean := false;
    Signal \ConstantsUsingCases::ConstantValuedVariables(Int32).0._Started\: boolean := false;
    Signal \ConstantsUsingCases::ConstantValuedVariables(Int32).0.input.parameter.In\: signed(31 downto 0) := to_signed(0, 32);
    -- System.Void Hast.TestInputs.Various.ConstantsUsingCases::ConstantValuedVariables(System.Int32).0 declarations end


    -- System.Void Hast.TestInputs.Various.ConstantsUsingCases::ConstantPassingToMethod(System.Int32).0 declarations start
    -- State machine states:
    type \ConstantsUsingCases::ConstantPassingToMethod(Int32).0._States\ is (
        \ConstantsUsingCases::ConstantPassingToMethod(Int32).0._State_0\, 
        \ConstantsUsingCases::ConstantPassingToMethod(Int32).0._State_1\, 
        \ConstantsUsingCases::ConstantPassingToMethod(Int32).0._State_2\, 
        \ConstantsUsingCases::ConstantPassingToMethod(Int32).0._State_3\);
    -- Signals:
    Signal \ConstantsUsingCases::ConstantPassingToMethod(Int32).0._Finished\: boolean := false;
    Signal \ConstantsUsingCases::ConstantPassingToMethod(Int32).0.ConstantsUsingCases::ConstantUsingMethod(Int32,Int32).input1.parameter.Out.0\: signed(31 downto 0) := to_signed(0, 32);
    Signal \ConstantsUsingCases::ConstantPassingToMethod(Int32).0.ConstantsUsingCases::ConstantUsingMethod(Int32,Int32).input2.parameter.Out.0\: signed(31 downto 0) := to_signed(0, 32);
    Signal \ConstantsUsingCases::ConstantPassingToMethod(Int32).0.ConstantsUsingCases::ConstantUsingMethod(Int32,Int32)._Started.0\: boolean := false;
    Signal \ConstantsUsingCases::ConstantPassingToMethod(Int32).0._Started\: boolean := false;
    Signal \ConstantsUsingCases::ConstantPassingToMethod(Int32).0.input.parameter.In\: signed(31 downto 0) := to_signed(0, 32);
    Signal \ConstantsUsingCases::ConstantPassingToMethod(Int32).0.ConstantsUsingCases::ConstantUsingMethod(Int32,Int32)._Finished.0\: boolean := false;
    Signal \ConstantsUsingCases::ConstantPassingToMethod(Int32).0.ConstantsUsingCases::ConstantUsingMethod(Int32,Int32).return.0\: signed(31 downto 0) := to_signed(0, 32);
    -- System.Void Hast.TestInputs.Various.ConstantsUsingCases::ConstantPassingToMethod(System.Int32).0 declarations end


    -- System.Void Hast.TestInputs.Various.ConstantsUsingCases::ConstantPassingToObject().0 declarations start
    -- State machine states:
    type \ConstantsUsingCases::ConstantPassingToObject().0._States\ is (
        \ConstantsUsingCases::ConstantPassingToObject().0._State_0\, 
        \ConstantsUsingCases::ConstantPassingToObject().0._State_1\, 
        \ConstantsUsingCases::ConstantPassingToObject().0._State_2\, 
        \ConstantsUsingCases::ConstantPassingToObject().0._State_3\, 
        \ConstantsUsingCases::ConstantPassingToObject().0._State_4\, 
        \ConstantsUsingCases::ConstantPassingToObject().0._State_5\, 
        \ConstantsUsingCases::ConstantPassingToObject().0._State_6\, 
        \ConstantsUsingCases::ConstantPassingToObject().0._State_7\, 
        \ConstantsUsingCases::ConstantPassingToObject().0._State_8\, 
        \ConstantsUsingCases::ConstantPassingToObject().0._State_9\, 
        \ConstantsUsingCases::ConstantPassingToObject().0._State_10\, 
        \ConstantsUsingCases::ConstantPassingToObject().0._State_11\, 
        \ConstantsUsingCases::ConstantPassingToObject().0._State_12\, 
        \ConstantsUsingCases::ConstantPassingToObject().0._State_13\, 
        \ConstantsUsingCases::ConstantPassingToObject().0._State_14\, 
        \ConstantsUsingCases::ConstantPassingToObject().0._State_15\, 
        \ConstantsUsingCases::ConstantPassingToObject().0._State_16\, 
        \ConstantsUsingCases::ConstantPassingToObject().0._State_17\, 
        \ConstantsUsingCases::ConstantPassingToObject().0._State_18\);
    -- Signals:
    Signal \ConstantsUsingCases::ConstantPassingToObject().0._Finished\: boolean := false;
    Signal \ConstantsUsingCases::ConstantPassingToObject().0.ConstantsUsingCases+ArrayHolder1::.ctor(UInt32[]).this.parameter.Out.0\: \Hast.TestInputs.Various.ConstantsUsingCases+ArrayHolder1\;
    Signal \ConstantsUsingCases::ConstantPassingToObject().0.ConstantsUsingCases+ArrayHolder1::.ctor(UInt32[]).array.parameter.Out.0\: \unsigned32_Array\(0 to 4) := (others => to_unsigned(0, 32));
    Signal \ConstantsUsingCases::ConstantPassingToObject().0.ConstantsUsingCases+ArrayHolder1::.ctor(UInt32[])._Started.0\: boolean := false;
    Signal \ConstantsUsingCases::ConstantPassingToObject().0.ConstantsUsingCases+ArrayHolder1::.ctor(UInt32).this.parameter.Out.0\: \Hast.TestInputs.Various.ConstantsUsingCases+ArrayHolder1\;
    Signal \ConstantsUsingCases::ConstantPassingToObject().0.ConstantsUsingCases+ArrayHolder1::.ctor(UInt32).size.parameter.Out.0\: unsigned(31 downto 0) := to_unsigned(0, 32);
    Signal \ConstantsUsingCases::ConstantPassingToObject().0.ConstantsUsingCases+ArrayHolder1::.ctor(UInt32)._Started.0\: boolean := false;
    Signal \ConstantsUsingCases::ConstantPassingToObject().0.ConstantsUsingCases+ArrayHolder1::.ctor(ConstantsUsingCases+ArrayHolder1).this.parameter.Out.0\: \Hast.TestInputs.Various.ConstantsUsingCases+ArrayHolder1\;
    Signal \ConstantsUsingCases::ConstantPassingToObject().0.ConstantsUsingCases+ArrayHolder1::.ctor(ConstantsUsingCases+ArrayHolder1).previous.parameter.Out.0\: \Hast.TestInputs.Various.ConstantsUsingCases+ArrayHolder1\;
    Signal \ConstantsUsingCases::ConstantPassingToObject().0.ConstantsUsingCases+ArrayHolder1::.ctor(ConstantsUsingCases+ArrayHolder1)._Started.0\: boolean := false;
    Signal \ConstantsUsingCases::ConstantPassingToObject().0.ConstantsUsingCases+ArrayHolder2::.ctor(UInt32).this.parameter.Out.0\: \Hast.TestInputs.Various.ConstantsUsingCases+ArrayHolder2\;
    Signal \ConstantsUsingCases::ConstantPassingToObject().0.ConstantsUsingCases+ArrayHolder2::.ctor(UInt32).size.parameter.Out.0\: unsigned(31 downto 0) := to_unsigned(0, 32);
    Signal \ConstantsUsingCases::ConstantPassingToObject().0.ConstantsUsingCases+ArrayHolder2::.ctor(UInt32)._Started.0\: boolean := false;
    Signal \ConstantsUsingCases::ConstantPassingToObject().0._Started\: boolean := false;
    Signal \ConstantsUsingCases::ConstantPassingToObject().0.ConstantsUsingCases+ArrayHolder1::.ctor(UInt32[]).this.parameter.In.0\: \Hast.TestInputs.Various.ConstantsUsingCases+ArrayHolder1\;
    Signal \ConstantsUsingCases::ConstantPassingToObject().0.ConstantsUsingCases+ArrayHolder1::.ctor(UInt32[]).array.parameter.In.0\: \unsigned32_Array\(0 to 4) := (others => to_unsigned(0, 32));
    Signal \ConstantsUsingCases::ConstantPassingToObject().0.ConstantsUsingCases+ArrayHolder1::.ctor(UInt32[])._Finished.0\: boolean := false;
    Signal \ConstantsUsingCases::ConstantPassingToObject().0.ConstantsUsingCases+ArrayHolder1::.ctor(UInt32).this.parameter.In.0\: \Hast.TestInputs.Various.ConstantsUsingCases+ArrayHolder1\;
    Signal \ConstantsUsingCases::ConstantPassingToObject().0.ConstantsUsingCases+ArrayHolder1::.ctor(UInt32)._Finished.0\: boolean := false;
    Signal \ConstantsUsingCases::ConstantPassingToObject().0.ConstantsUsingCases+ArrayHolder1::.ctor(ConstantsUsingCases+ArrayHolder1).this.parameter.In.0\: \Hast.TestInputs.Various.ConstantsUsingCases+ArrayHolder1\;
    Signal \ConstantsUsingCases::ConstantPassingToObject().0.ConstantsUsingCases+ArrayHolder1::.ctor(ConstantsUsingCases+ArrayHolder1).previous.parameter.In.0\: \Hast.TestInputs.Various.ConstantsUsingCases+ArrayHolder1\;
    Signal \ConstantsUsingCases::ConstantPassingToObject().0.ConstantsUsingCases+ArrayHolder1::.ctor(ConstantsUsingCases+ArrayHolder1)._Finished.0\: boolean := false;
    Signal \ConstantsUsingCases::ConstantPassingToObject().0.ConstantsUsingCases+ArrayHolder2::.ctor(UInt32).this.parameter.In.0\: \Hast.TestInputs.Various.ConstantsUsingCases+ArrayHolder2\;
    Signal \ConstantsUsingCases::ConstantPassingToObject().0.ConstantsUsingCases+ArrayHolder2::.ctor(UInt32)._Finished.0\: boolean := false;
    -- System.Void Hast.TestInputs.Various.ConstantsUsingCases::ConstantPassingToObject().0 declarations end


    -- System.Int32 Hast.TestInputs.Various.ConstantsUsingCases::ConstantUsingMethod(System.Int32,System.Int32).0 declarations start
    -- State machine states:
    type \ConstantsUsingCases::ConstantUsingMethod(Int32,Int32).0._States\ is (
        \ConstantsUsingCases::ConstantUsingMethod(Int32,Int32).0._State_0\, 
        \ConstantsUsingCases::ConstantUsingMethod(Int32,Int32).0._State_1\, 
        \ConstantsUsingCases::ConstantUsingMethod(Int32,Int32).0._State_2\);
    -- Signals:
    Signal \ConstantsUsingCases::ConstantUsingMethod(Int32,Int32).0._Finished\: boolean := false;
    Signal \ConstantsUsingCases::ConstantUsingMethod(Int32,Int32).0.return\: signed(31 downto 0) := to_signed(0, 32);
    Signal \ConstantsUsingCases::ConstantUsingMethod(Int32,Int32).0._Started\: boolean := false;
    Signal \ConstantsUsingCases::ConstantUsingMethod(Int32,Int32).0.input1.parameter.In\: signed(31 downto 0) := to_signed(0, 32);
    Signal \ConstantsUsingCases::ConstantUsingMethod(Int32,Int32).0.input2.parameter.In\: signed(31 downto 0) := to_signed(0, 32);
    -- System.Int32 Hast.TestInputs.Various.ConstantsUsingCases::ConstantUsingMethod(System.Int32,System.Int32).0 declarations end


    -- System.Void Hast.TestInputs.Various.LoopCases::BreakInLoop(System.Int32).0 declarations start
    -- State machine states:
    type \LoopCases::BreakInLoop(Int32).0._States\ is (
        \LoopCases::BreakInLoop(Int32).0._State_0\, 
        \LoopCases::BreakInLoop(Int32).0._State_1\, 
        \LoopCases::BreakInLoop(Int32).0._State_2\, 
        \LoopCases::BreakInLoop(Int32).0._State_3\, 
        \LoopCases::BreakInLoop(Int32).0._State_4\, 
        \LoopCases::BreakInLoop(Int32).0._State_5\, 
        \LoopCases::BreakInLoop(Int32).0._State_6\);
    -- Signals:
    Signal \LoopCases::BreakInLoop(Int32).0._Finished\: boolean := false;
    Signal \LoopCases::BreakInLoop(Int32).0._Started\: boolean := false;
    Signal \LoopCases::BreakInLoop(Int32).0.input.parameter.In\: signed(31 downto 0) := to_signed(0, 32);
    -- System.Void Hast.TestInputs.Various.LoopCases::BreakInLoop(System.Int32).0 declarations end


    -- System.Void Hast.TestInputs.Various.LoopCases::BreakInLoopInLoop(System.Int32).0 declarations start
    -- State machine states:
    type \LoopCases::BreakInLoopInLoop(Int32).0._States\ is (
        \LoopCases::BreakInLoopInLoop(Int32).0._State_0\, 
        \LoopCases::BreakInLoopInLoop(Int32).0._State_1\, 
        \LoopCases::BreakInLoopInLoop(Int32).0._State_2\, 
        \LoopCases::BreakInLoopInLoop(Int32).0._State_3\, 
        \LoopCases::BreakInLoopInLoop(Int32).0._State_4\, 
        \LoopCases::BreakInLoopInLoop(Int32).0._State_5\, 
        \LoopCases::BreakInLoopInLoop(Int32).0._State_6\, 
        \LoopCases::BreakInLoopInLoop(Int32).0._State_7\, 
        \LoopCases::BreakInLoopInLoop(Int32).0._State_8\);
    -- Signals:
    Signal \LoopCases::BreakInLoopInLoop(Int32).0._Finished\: boolean := false;
    Signal \LoopCases::BreakInLoopInLoop(Int32).0._Started\: boolean := false;
    Signal \LoopCases::BreakInLoopInLoop(Int32).0.input.parameter.In\: signed(31 downto 0) := to_signed(0, 32);
    -- System.Void Hast.TestInputs.Various.LoopCases::BreakInLoopInLoop(System.Int32).0 declarations end


    -- System.Void Hast.TestInputs.Various.ObjectUsingCases::NullUsage().0 declarations start
    -- State machine states:
    type \ObjectUsingCases::NullUsage().0._States\ is (
        \ObjectUsingCases::NullUsage().0._State_0\, 
        \ObjectUsingCases::NullUsage().0._State_1\, 
        \ObjectUsingCases::NullUsage().0._State_2\, 
        \ObjectUsingCases::NullUsage().0._State_3\, 
        \ObjectUsingCases::NullUsage().0._State_4\, 
        \ObjectUsingCases::NullUsage().0._State_5\, 
        \ObjectUsingCases::NullUsage().0._State_6\);
    -- Signals:
    Signal \ObjectUsingCases::NullUsage().0._Finished\: boolean := false;
    Signal \ObjectUsingCases::NullUsage().0._Started\: boolean := false;
    -- System.Void Hast.TestInputs.Various.ObjectUsingCases::NullUsage().0 declarations end


    -- System.Void Hast.TestInputs.Various.ObjectUsingCases::VoidReturn(System.Int32).0 declarations start
    -- State machine states:
    type \ObjectUsingCases::VoidReturn(Int32).0._States\ is (
        \ObjectUsingCases::VoidReturn(Int32).0._State_0\, 
        \ObjectUsingCases::VoidReturn(Int32).0._State_1\, 
        \ObjectUsingCases::VoidReturn(Int32).0._State_2\, 
        \ObjectUsingCases::VoidReturn(Int32).0._State_3\);
    -- Signals:
    Signal \ObjectUsingCases::VoidReturn(Int32).0._Finished\: boolean := false;
    Signal \ObjectUsingCases::VoidReturn(Int32).0.ObjectUsingCases::VoidMethod(ObjectUsingCases+MyClass).myClass.parameter.Out.0\: \Hast.TestInputs.Various.ObjectUsingCases+MyClass\;
    Signal \ObjectUsingCases::VoidReturn(Int32).0.ObjectUsingCases::VoidMethod(ObjectUsingCases+MyClass)._Started.0\: boolean := false;
    Signal \ObjectUsingCases::VoidReturn(Int32).0._Started\: boolean := false;
    Signal \ObjectUsingCases::VoidReturn(Int32).0.input.parameter.In\: signed(31 downto 0) := to_signed(0, 32);
    Signal \ObjectUsingCases::VoidReturn(Int32).0.ObjectUsingCases::VoidMethod(ObjectUsingCases+MyClass).myClass.parameter.In.0\: \Hast.TestInputs.Various.ObjectUsingCases+MyClass\;
    Signal \ObjectUsingCases::VoidReturn(Int32).0.ObjectUsingCases::VoidMethod(ObjectUsingCases+MyClass)._Finished.0\: boolean := false;
    -- System.Void Hast.TestInputs.Various.ObjectUsingCases::VoidReturn(System.Int32).0 declarations end


    -- System.Void Hast.TestInputs.Various.ObjectUsingCases::ReferenceAssignment(System.Int32).0 declarations start
    -- State machine states:
    type \ObjectUsingCases::ReferenceAssignment(Int32).0._States\ is (
        \ObjectUsingCases::ReferenceAssignment(Int32).0._State_0\, 
        \ObjectUsingCases::ReferenceAssignment(Int32).0._State_1\, 
        \ObjectUsingCases::ReferenceAssignment(Int32).0._State_2\);
    -- Signals:
    Signal \ObjectUsingCases::ReferenceAssignment(Int32).0._Finished\: boolean := false;
    Signal \ObjectUsingCases::ReferenceAssignment(Int32).0._Started\: boolean := false;
    Signal \ObjectUsingCases::ReferenceAssignment(Int32).0.input.parameter.In\: signed(31 downto 0) := to_signed(0, 32);
    -- System.Void Hast.TestInputs.Various.ObjectUsingCases::ReferenceAssignment(System.Int32).0 declarations end


    -- System.Void Hast.TestInputs.Various.ObjectUsingCases::VoidMethod(Hast.TestInputs.Various.ObjectUsingCases+MyClass).0 declarations start
    -- State machine states:
    type \ObjectUsingCases::VoidMethod(ObjectUsingCases+MyClass).0._States\ is (
        \ObjectUsingCases::VoidMethod(ObjectUsingCases+MyClass).0._State_0\, 
        \ObjectUsingCases::VoidMethod(ObjectUsingCases+MyClass).0._State_1\, 
        \ObjectUsingCases::VoidMethod(ObjectUsingCases+MyClass).0._State_2\, 
        \ObjectUsingCases::VoidMethod(ObjectUsingCases+MyClass).0._State_3\, 
        \ObjectUsingCases::VoidMethod(ObjectUsingCases+MyClass).0._State_4\, 
        \ObjectUsingCases::VoidMethod(ObjectUsingCases+MyClass).0._State_5\, 
        \ObjectUsingCases::VoidMethod(ObjectUsingCases+MyClass).0._State_6\);
    -- Signals:
    Signal \ObjectUsingCases::VoidMethod(ObjectUsingCases+MyClass).0._Finished\: boolean := false;
    Signal \ObjectUsingCases::VoidMethod(ObjectUsingCases+MyClass).0.myClass.parameter.Out\: \Hast.TestInputs.Various.ObjectUsingCases+MyClass\;
    Signal \ObjectUsingCases::VoidMethod(ObjectUsingCases+MyClass).0._Started\: boolean := false;
    Signal \ObjectUsingCases::VoidMethod(ObjectUsingCases+MyClass).0.myClass.parameter.In\: \Hast.TestInputs.Various.ObjectUsingCases+MyClass\;
    -- System.Void Hast.TestInputs.Various.ObjectUsingCases::VoidMethod(Hast.TestInputs.Various.ObjectUsingCases+MyClass).0 declarations end


    -- System.Boolean Hast.TestInputs.Various.ParallelCases+Calculator::IsEven().0 declarations start
    -- State machine states:
    type \ParallelCases+Calculator::IsEven().0._States\ is (
        \ParallelCases+Calculator::IsEven().0._State_0\, 
        \ParallelCases+Calculator::IsEven().0._State_1\, 
        \ParallelCases+Calculator::IsEven().0._State_2\);
    -- Signals:
    Signal \ParallelCases+Calculator::IsEven().0._Finished\: boolean := false;
    Signal \ParallelCases+Calculator::IsEven().0.return\: boolean := false;
    Signal \ParallelCases+Calculator::IsEven().0.this.parameter.Out\: \Hast.TestInputs.Various.ParallelCases+Calculator\;
    Signal \ParallelCases+Calculator::IsEven().0._Started\: boolean := false;
    Signal \ParallelCases+Calculator::IsEven().0.this.parameter.In\: \Hast.TestInputs.Various.ParallelCases+Calculator\;
    -- System.Boolean Hast.TestInputs.Various.ParallelCases+Calculator::IsEven().0 declarations end


    -- System.Boolean Hast.TestInputs.Various.ParallelCases+Calculator::IsEven().1 declarations start
    -- State machine states:
    type \ParallelCases+Calculator::IsEven().1._States\ is (
        \ParallelCases+Calculator::IsEven().1._State_0\, 
        \ParallelCases+Calculator::IsEven().1._State_1\, 
        \ParallelCases+Calculator::IsEven().1._State_2\);
    -- Signals:
    Signal \ParallelCases+Calculator::IsEven().1._Finished\: boolean := false;
    Signal \ParallelCases+Calculator::IsEven().1.return\: boolean := false;
    Signal \ParallelCases+Calculator::IsEven().1.this.parameter.Out\: \Hast.TestInputs.Various.ParallelCases+Calculator\;
    Signal \ParallelCases+Calculator::IsEven().1._Started\: boolean := false;
    Signal \ParallelCases+Calculator::IsEven().1.this.parameter.In\: \Hast.TestInputs.Various.ParallelCases+Calculator\;
    -- System.Boolean Hast.TestInputs.Various.ParallelCases+Calculator::IsEven().1 declarations end


    -- System.Boolean Hast.TestInputs.Various.ParallelCases+Calculator::IsEven().2 declarations start
    -- State machine states:
    type \ParallelCases+Calculator::IsEven().2._States\ is (
        \ParallelCases+Calculator::IsEven().2._State_0\, 
        \ParallelCases+Calculator::IsEven().2._State_1\, 
        \ParallelCases+Calculator::IsEven().2._State_2\);
    -- Signals:
    Signal \ParallelCases+Calculator::IsEven().2._Finished\: boolean := false;
    Signal \ParallelCases+Calculator::IsEven().2.return\: boolean := false;
    Signal \ParallelCases+Calculator::IsEven().2.this.parameter.Out\: \Hast.TestInputs.Various.ParallelCases+Calculator\;
    Signal \ParallelCases+Calculator::IsEven().2._Started\: boolean := false;
    Signal \ParallelCases+Calculator::IsEven().2.this.parameter.In\: \Hast.TestInputs.Various.ParallelCases+Calculator\;
    -- System.Boolean Hast.TestInputs.Various.ParallelCases+Calculator::IsEven().2 declarations end


    -- System.UInt32 Hast.TestInputs.Various.ParallelCases+<>c__DisplayClass0_0::input declarations start
    -- Shared (global) variables:
    shared Variable \System.UInt32 Hast.TestInputs.Various.ParallelCases+<>c__DisplayClass0_0::input\: unsigned(31 downto 0) := to_unsigned(0, 32);
    -- System.UInt32 Hast.TestInputs.Various.ParallelCases+<>c__DisplayClass0_0::input declarations end


    -- System.Boolean Hast.TestInputs.Various.ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(System.Object).0 declarations start
    -- State machine states:
    type \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).0._States\ is (
        \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).0._State_0\, 
        \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).0._State_1\, 
        \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).0._State_2\, 
        \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).0._State_3\);
    -- Signals:
    Signal \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).0._Finished\: boolean := false;
    Signal \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).0.return\: boolean := false;
    Signal \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).0._Started\: boolean := false;
    Signal \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).0.indexObject.parameter.In\: unsigned(31 downto 0) := to_unsigned(0, 32);
    -- System.Boolean Hast.TestInputs.Various.ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(System.Object).0 declarations end


    -- System.Boolean Hast.TestInputs.Various.ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(System.Object).1 declarations start
    -- State machine states:
    type \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).1._States\ is (
        \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).1._State_0\, 
        \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).1._State_1\, 
        \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).1._State_2\, 
        \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).1._State_3\);
    -- Signals:
    Signal \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).1._Finished\: boolean := false;
    Signal \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).1.return\: boolean := false;
    Signal \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).1._Started\: boolean := false;
    Signal \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).1.indexObject.parameter.In\: unsigned(31 downto 0) := to_unsigned(0, 32);
    -- System.Boolean Hast.TestInputs.Various.ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(System.Object).1 declarations end


    -- System.Boolean Hast.TestInputs.Various.ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(System.Object).2 declarations start
    -- State machine states:
    type \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).2._States\ is (
        \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).2._State_0\, 
        \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).2._State_1\, 
        \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).2._State_2\, 
        \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).2._State_3\);
    -- Signals:
    Signal \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).2._Finished\: boolean := false;
    Signal \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).2.return\: boolean := false;
    Signal \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).2._Started\: boolean := false;
    Signal \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).2.indexObject.parameter.In\: unsigned(31 downto 0) := to_unsigned(0, 32);
    -- System.Boolean Hast.TestInputs.Various.ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(System.Object).2 declarations end


    -- System.UInt32 Hast.TestInputs.Various.ParallelCases+<>c__DisplayClass1_0::input declarations start
    -- Shared (global) variables:
    shared Variable \System.UInt32 Hast.TestInputs.Various.ParallelCases+<>c__DisplayClass1_0::input\: unsigned(31 downto 0) := to_unsigned(0, 32);
    -- System.UInt32 Hast.TestInputs.Various.ParallelCases+<>c__DisplayClass1_0::input declarations end


    -- System.Boolean Hast.TestInputs.Various.ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(System.Object).0 declarations start
    -- State machine states:
    type \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).0._States\ is (
        \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).0._State_0\, 
        \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).0._State_1\, 
        \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).0._State_2\, 
        \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).0._State_3\);
    -- Signals:
    Signal \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).0._Finished\: boolean := false;
    Signal \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).0.return\: boolean := false;
    Signal \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).0.ParallelCases+Calculator::IsEven().this.parameter.Out.0\: \Hast.TestInputs.Various.ParallelCases+Calculator\;
    Signal \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).0.ParallelCases+Calculator::IsEven()._Started.0\: boolean := false;
    Signal \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).0._Started\: boolean := false;
    Signal \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).0.indexObject.parameter.In\: unsigned(31 downto 0) := to_unsigned(0, 32);
    Signal \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).0.ParallelCases+Calculator::IsEven().this.parameter.In.0\: \Hast.TestInputs.Various.ParallelCases+Calculator\;
    Signal \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).0.ParallelCases+Calculator::IsEven()._Finished.0\: boolean := false;
    Signal \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).0.ParallelCases+Calculator::IsEven().return.0\: boolean := false;
    -- System.Boolean Hast.TestInputs.Various.ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(System.Object).0 declarations end


    -- System.Boolean Hast.TestInputs.Various.ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(System.Object).1 declarations start
    -- State machine states:
    type \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).1._States\ is (
        \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).1._State_0\, 
        \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).1._State_1\, 
        \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).1._State_2\, 
        \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).1._State_3\);
    -- Signals:
    Signal \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).1._Finished\: boolean := false;
    Signal \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).1.return\: boolean := false;
    Signal \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).1.ParallelCases+Calculator::IsEven().this.parameter.Out.0\: \Hast.TestInputs.Various.ParallelCases+Calculator\;
    Signal \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).1.ParallelCases+Calculator::IsEven()._Started.0\: boolean := false;
    Signal \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).1._Started\: boolean := false;
    Signal \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).1.indexObject.parameter.In\: unsigned(31 downto 0) := to_unsigned(0, 32);
    Signal \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).1.ParallelCases+Calculator::IsEven().this.parameter.In.0\: \Hast.TestInputs.Various.ParallelCases+Calculator\;
    Signal \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).1.ParallelCases+Calculator::IsEven()._Finished.0\: boolean := false;
    Signal \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).1.ParallelCases+Calculator::IsEven().return.0\: boolean := false;
    -- System.Boolean Hast.TestInputs.Various.ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(System.Object).1 declarations end


    -- System.Boolean Hast.TestInputs.Various.ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(System.Object).2 declarations start
    -- State machine states:
    type \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).2._States\ is (
        \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).2._State_0\, 
        \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).2._State_1\, 
        \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).2._State_2\, 
        \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).2._State_3\);
    -- Signals:
    Signal \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).2._Finished\: boolean := false;
    Signal \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).2.return\: boolean := false;
    Signal \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).2.ParallelCases+Calculator::IsEven().this.parameter.Out.0\: \Hast.TestInputs.Various.ParallelCases+Calculator\;
    Signal \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).2.ParallelCases+Calculator::IsEven()._Started.0\: boolean := false;
    Signal \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).2._Started\: boolean := false;
    Signal \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).2.indexObject.parameter.In\: unsigned(31 downto 0) := to_unsigned(0, 32);
    Signal \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).2.ParallelCases+Calculator::IsEven().this.parameter.In.0\: \Hast.TestInputs.Various.ParallelCases+Calculator\;
    Signal \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).2.ParallelCases+Calculator::IsEven()._Finished.0\: boolean := false;
    Signal \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).2.ParallelCases+Calculator::IsEven().return.0\: boolean := false;
    -- System.Boolean Hast.TestInputs.Various.ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(System.Object).2 declarations end


    -- System.Void Hast.TestInputs.Various.ParallelCases::WhenAllWhenAnyAwaitedTasks(System.UInt32).0 declarations start
    -- State machine states:
    type \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0._States\ is (
        \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0._State_0\, 
        \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0._State_1\, 
        \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0._State_2\, 
        \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0._State_3\, 
        \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0._State_4\, 
        \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0._State_5\, 
        \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0._State_6\);
    -- Signals:
    Signal \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0._Finished\: boolean := false;
    Signal \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0.ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).indexObject.parameter.Out.0\: unsigned(31 downto 0) := to_unsigned(0, 32);
    Signal \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0.ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object)._Started.0\: boolean := false;
    Signal \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0.ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).indexObject.parameter.Out.1\: unsigned(31 downto 0) := to_unsigned(0, 32);
    Signal \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0.ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object)._Started.1\: boolean := false;
    Signal \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0.ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).indexObject.parameter.Out.2\: unsigned(31 downto 0) := to_unsigned(0, 32);
    Signal \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0.ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object)._Started.2\: boolean := false;
    Signal \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0._Started\: boolean := false;
    Signal \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0.input.parameter.In\: unsigned(31 downto 0) := to_unsigned(0, 32);
    Signal \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0.ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object)._Finished.0\: boolean := false;
    Signal \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0.ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object)._Finished.1\: boolean := false;
    Signal \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0.ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object)._Finished.2\: boolean := false;
    Signal \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0.ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).return.0\: boolean := false;
    Signal \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0.ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).return.1\: boolean := false;
    Signal \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0.ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).return.2\: boolean := false;
    -- System.Void Hast.TestInputs.Various.ParallelCases::WhenAllWhenAnyAwaitedTasks(System.UInt32).0 declarations end


    -- System.Void Hast.TestInputs.Various.ParallelCases::ObjectUsingTasks(System.UInt32).0 declarations start
    -- State machine states:
    type \ParallelCases::ObjectUsingTasks(UInt32).0._States\ is (
        \ParallelCases::ObjectUsingTasks(UInt32).0._State_0\, 
        \ParallelCases::ObjectUsingTasks(UInt32).0._State_1\, 
        \ParallelCases::ObjectUsingTasks(UInt32).0._State_2\, 
        \ParallelCases::ObjectUsingTasks(UInt32).0._State_3\, 
        \ParallelCases::ObjectUsingTasks(UInt32).0._State_4\, 
        \ParallelCases::ObjectUsingTasks(UInt32).0._State_5\);
    -- Signals:
    Signal \ParallelCases::ObjectUsingTasks(UInt32).0._Finished\: boolean := false;
    Signal \ParallelCases::ObjectUsingTasks(UInt32).0.ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).indexObject.parameter.Out.0\: unsigned(31 downto 0) := to_unsigned(0, 32);
    Signal \ParallelCases::ObjectUsingTasks(UInt32).0.ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object)._Started.0\: boolean := false;
    Signal \ParallelCases::ObjectUsingTasks(UInt32).0.ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).indexObject.parameter.Out.1\: unsigned(31 downto 0) := to_unsigned(0, 32);
    Signal \ParallelCases::ObjectUsingTasks(UInt32).0.ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object)._Started.1\: boolean := false;
    Signal \ParallelCases::ObjectUsingTasks(UInt32).0.ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).indexObject.parameter.Out.2\: unsigned(31 downto 0) := to_unsigned(0, 32);
    Signal \ParallelCases::ObjectUsingTasks(UInt32).0.ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object)._Started.2\: boolean := false;
    Signal \ParallelCases::ObjectUsingTasks(UInt32).0._Started\: boolean := false;
    Signal \ParallelCases::ObjectUsingTasks(UInt32).0.input.parameter.In\: unsigned(31 downto 0) := to_unsigned(0, 32);
    Signal \ParallelCases::ObjectUsingTasks(UInt32).0.ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object)._Finished.0\: boolean := false;
    Signal \ParallelCases::ObjectUsingTasks(UInt32).0.ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object)._Finished.1\: boolean := false;
    Signal \ParallelCases::ObjectUsingTasks(UInt32).0.ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object)._Finished.2\: boolean := false;
    Signal \ParallelCases::ObjectUsingTasks(UInt32).0.ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).return.0\: boolean := false;
    Signal \ParallelCases::ObjectUsingTasks(UInt32).0.ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).return.1\: boolean := false;
    Signal \ParallelCases::ObjectUsingTasks(UInt32).0.ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).return.2\: boolean := false;
    -- System.Void Hast.TestInputs.Various.ParallelCases::ObjectUsingTasks(System.UInt32).0 declarations end


    -- System.Void Hast.TestInputs.Various.UnaryCases::IncrementDecrement(System.Int32).0 declarations start
    -- State machine states:
    type \UnaryCases::IncrementDecrement(Int32).0._States\ is (
        \UnaryCases::IncrementDecrement(Int32).0._State_0\, 
        \UnaryCases::IncrementDecrement(Int32).0._State_1\, 
        \UnaryCases::IncrementDecrement(Int32).0._State_2\, 
        \UnaryCases::IncrementDecrement(Int32).0._State_3\, 
        \UnaryCases::IncrementDecrement(Int32).0._State_4\);
    -- Signals:
    Signal \UnaryCases::IncrementDecrement(Int32).0._Finished\: boolean := false;
    Signal \UnaryCases::IncrementDecrement(Int32).0._Started\: boolean := false;
    Signal \UnaryCases::IncrementDecrement(Int32).0.input.parameter.In\: signed(31 downto 0) := to_signed(0, 32);
    -- System.Void Hast.TestInputs.Various.UnaryCases::IncrementDecrement(System.Int32).0 declarations end


    -- System.Void Hast.TestInputs.Various.WronglyDecompiledCases::IncorrectlyDecompiledLiterals().0 declarations start
    -- State machine states:
    type \WronglyDecompiledCases::IncorrectlyDecompiledLiterals().0._States\ is (
        \WronglyDecompiledCases::IncorrectlyDecompiledLiterals().0._State_0\, 
        \WronglyDecompiledCases::IncorrectlyDecompiledLiterals().0._State_1\, 
        \WronglyDecompiledCases::IncorrectlyDecompiledLiterals().0._State_2\);
    -- Signals:
    Signal \WronglyDecompiledCases::IncorrectlyDecompiledLiterals().0._Finished\: boolean := false;
    Signal \WronglyDecompiledCases::IncorrectlyDecompiledLiterals().0._Started\: boolean := false;
    -- System.Void Hast.TestInputs.Various.WronglyDecompiledCases::IncorrectlyDecompiledLiterals().0 declarations end


    -- System.Void Hast::ExternalInvocationProxy() declarations start
    -- Signals:
    Signal \FinishedInternal\: boolean := false;
    Signal \Hast::ExternalInvocationProxy().RootClass::VirtualMethod(Int32)._Started.0\: boolean := false;
    Signal \Hast::ExternalInvocationProxy().ComplexTypeHierarchy::Hast.TestInputs.ClassStructure1.ComplexTypes.IInterface1.Interface1Method1()._Started.0\: boolean := false;
    Signal \Hast::ExternalInvocationProxy().ComplexTypeHierarchy::Interface1Method2()._Started.0\: boolean := false;
    Signal \Hast::ExternalInvocationProxy().ComplexTypeHierarchy::Interface2Method1()._Started.0\: boolean := false;
    Signal \Hast::ExternalInvocationProxy().ComplexTypeHierarchy::Hast.TestInputs.ClassStructure1.ComplexTypes.IBaseInterface.BaseInterfaceMethod1()._Started.0\: boolean := false;
    Signal \Hast::ExternalInvocationProxy().ComplexTypeHierarchy::BaseInterfaceMethod2()._Started.0\: boolean := false;
    Signal \Hast::ExternalInvocationProxy().ComplexTypeHierarchy::NonVirtualNonInterfaceMehod()._Started.0\: boolean := false;
    Signal \Hast::ExternalInvocationProxy().StaticClass::StaticMethod()._Started.0\: boolean := false;
    Signal \Hast::ExternalInvocationProxy().UnusedDeclarations::UnusedMethod()._Started.0\: boolean := false;
    Signal \Hast::ExternalInvocationProxy().StaticReference::StaticClassUsingMethod()._Started.0\: boolean := false;
    Signal \Hast::ExternalInvocationProxy().ArrayUsingCases::PassArrayToConstructor()._Started.0\: boolean := false;
    Signal \Hast::ExternalInvocationProxy().ArrayUsingCases::PassArrayFromMethod()._Started.0\: boolean := false;
    Signal \Hast::ExternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32)._Started.0\: boolean := false;
    Signal \Hast::ExternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(Int32)._Started.0\: boolean := false;
    Signal \Hast::ExternalInvocationProxy().CastingCases::NumberCasting(Int16,Int16)._Started.0\: boolean := false;
    Signal \Hast::ExternalInvocationProxy().ConstantsUsingCases::ConstantValuedVariables(Int32)._Started.0\: boolean := false;
    Signal \Hast::ExternalInvocationProxy().ConstantsUsingCases::ConstantPassingToMethod(Int32)._Started.0\: boolean := false;
    Signal \Hast::ExternalInvocationProxy().ConstantsUsingCases::ConstantPassingToObject()._Started.0\: boolean := false;
    Signal \Hast::ExternalInvocationProxy().LoopCases::BreakInLoop(Int32)._Started.0\: boolean := false;
    Signal \Hast::ExternalInvocationProxy().LoopCases::BreakInLoopInLoop(Int32)._Started.0\: boolean := false;
    Signal \Hast::ExternalInvocationProxy().ObjectUsingCases::NullUsage()._Started.0\: boolean := false;
    Signal \Hast::ExternalInvocationProxy().ObjectUsingCases::VoidReturn(Int32)._Started.0\: boolean := false;
    Signal \Hast::ExternalInvocationProxy().ObjectUsingCases::ReferenceAssignment(Int32)._Started.0\: boolean := false;
    Signal \Hast::ExternalInvocationProxy().ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32)._Started.0\: boolean := false;
    Signal \Hast::ExternalInvocationProxy().ParallelCases::ObjectUsingTasks(UInt32)._Started.0\: boolean := false;
    Signal \Hast::ExternalInvocationProxy().UnaryCases::IncrementDecrement(Int32)._Started.0\: boolean := false;
    Signal \Hast::ExternalInvocationProxy().WronglyDecompiledCases::IncorrectlyDecompiledLiterals()._Started.0\: boolean := false;
    Signal \Hast::ExternalInvocationProxy().RootClass::VirtualMethod(Int32)._Finished.0\: boolean := false;
    Signal \Hast::ExternalInvocationProxy().ComplexTypeHierarchy::Hast.TestInputs.ClassStructure1.ComplexTypes.IInterface1.Interface1Method1()._Finished.0\: boolean := false;
    Signal \Hast::ExternalInvocationProxy().ComplexTypeHierarchy::Interface1Method2()._Finished.0\: boolean := false;
    Signal \Hast::ExternalInvocationProxy().ComplexTypeHierarchy::Interface2Method1()._Finished.0\: boolean := false;
    Signal \Hast::ExternalInvocationProxy().ComplexTypeHierarchy::Hast.TestInputs.ClassStructure1.ComplexTypes.IBaseInterface.BaseInterfaceMethod1()._Finished.0\: boolean := false;
    Signal \Hast::ExternalInvocationProxy().ComplexTypeHierarchy::BaseInterfaceMethod2()._Finished.0\: boolean := false;
    Signal \Hast::ExternalInvocationProxy().ComplexTypeHierarchy::NonVirtualNonInterfaceMehod()._Finished.0\: boolean := false;
    Signal \Hast::ExternalInvocationProxy().StaticClass::StaticMethod()._Finished.0\: boolean := false;
    Signal \Hast::ExternalInvocationProxy().UnusedDeclarations::UnusedMethod()._Finished.0\: boolean := false;
    Signal \Hast::ExternalInvocationProxy().StaticReference::StaticClassUsingMethod()._Finished.0\: boolean := false;
    Signal \Hast::ExternalInvocationProxy().ArrayUsingCases::PassArrayToConstructor()._Finished.0\: boolean := false;
    Signal \Hast::ExternalInvocationProxy().ArrayUsingCases::PassArrayFromMethod()._Finished.0\: boolean := false;
    Signal \Hast::ExternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32)._Finished.0\: boolean := false;
    Signal \Hast::ExternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(Int32)._Finished.0\: boolean := false;
    Signal \Hast::ExternalInvocationProxy().CastingCases::NumberCasting(Int16,Int16)._Finished.0\: boolean := false;
    Signal \Hast::ExternalInvocationProxy().ConstantsUsingCases::ConstantValuedVariables(Int32)._Finished.0\: boolean := false;
    Signal \Hast::ExternalInvocationProxy().ConstantsUsingCases::ConstantPassingToMethod(Int32)._Finished.0\: boolean := false;
    Signal \Hast::ExternalInvocationProxy().ConstantsUsingCases::ConstantPassingToObject()._Finished.0\: boolean := false;
    Signal \Hast::ExternalInvocationProxy().LoopCases::BreakInLoop(Int32)._Finished.0\: boolean := false;
    Signal \Hast::ExternalInvocationProxy().LoopCases::BreakInLoopInLoop(Int32)._Finished.0\: boolean := false;
    Signal \Hast::ExternalInvocationProxy().ObjectUsingCases::NullUsage()._Finished.0\: boolean := false;
    Signal \Hast::ExternalInvocationProxy().ObjectUsingCases::VoidReturn(Int32)._Finished.0\: boolean := false;
    Signal \Hast::ExternalInvocationProxy().ObjectUsingCases::ReferenceAssignment(Int32)._Finished.0\: boolean := false;
    Signal \Hast::ExternalInvocationProxy().ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32)._Finished.0\: boolean := false;
    Signal \Hast::ExternalInvocationProxy().ParallelCases::ObjectUsingTasks(UInt32)._Finished.0\: boolean := false;
    Signal \Hast::ExternalInvocationProxy().UnaryCases::IncrementDecrement(Int32)._Finished.0\: boolean := false;
    Signal \Hast::ExternalInvocationProxy().WronglyDecompiledCases::IncorrectlyDecompiledLiterals()._Finished.0\: boolean := false;
    -- System.Void Hast::ExternalInvocationProxy() declarations end


    -- \System.Void Hast::InternalInvocationProxy()._CommonDeclarations\ declarations start
    type \InternalInvocationProxy_boolean_Array\ is array (integer range <>) of boolean;
    type \Hast::InternalInvocationProxy()._RunningStates\ is (
        WaitingForStarted, 
        WaitingForFinished, 
        AfterFinished);
    -- \System.Void Hast::InternalInvocationProxy()._CommonDeclarations\ declarations end

begin 

    -- System.Void Hast.TestInputs.ClassStructure1.RootClass::VirtualMethod(System.Int32).0 state machine start
    \RootClass::VirtualMethod(Int32).0._StateMachine\: process (\Clock\) 
        Variable \RootClass::VirtualMethod(Int32).0._State\: \RootClass::VirtualMethod(Int32).0._States\ := \RootClass::VirtualMethod(Int32).0._State_0\;
        Variable \RootClass::VirtualMethod(Int32).0.input\: signed(31 downto 0) := to_signed(0, 32);
        Variable \RootClass::VirtualMethod(Int32).0.num\: signed(31 downto 0) := to_signed(0, 32);
    begin 
        if (rising_edge(\Clock\)) then 
            if (\Reset\ = '1') then 
                -- Synchronous reset
                \RootClass::VirtualMethod(Int32).0._Finished\ <= false;
                \RootClass::VirtualMethod(Int32).0._State\ := \RootClass::VirtualMethod(Int32).0._State_0\;
                \RootClass::VirtualMethod(Int32).0.input\ := to_signed(0, 32);
                \RootClass::VirtualMethod(Int32).0.num\ := to_signed(0, 32);
            else 
                case \RootClass::VirtualMethod(Int32).0._State\ is 
                    when \RootClass::VirtualMethod(Int32).0._State_0\ => 
                        -- Start state
                        -- Waiting for the start signal.
                        if (\RootClass::VirtualMethod(Int32).0._Started\ = true) then 
                            \RootClass::VirtualMethod(Int32).0._State\ := \RootClass::VirtualMethod(Int32).0._State_2\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \RootClass::VirtualMethod(Int32).0._State_1\ => 
                        -- Final state
                        -- Signaling finished until Started is pulled back to false, then returning to the start state.
                        if (\RootClass::VirtualMethod(Int32).0._Started\ = true) then 
                            \RootClass::VirtualMethod(Int32).0._Finished\ <= true;
                        else 
                            \RootClass::VirtualMethod(Int32).0._Finished\ <= false;
                            \RootClass::VirtualMethod(Int32).0._State\ := \RootClass::VirtualMethod(Int32).0._State_0\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \RootClass::VirtualMethod(Int32).0._State_2\ => 
                        \RootClass::VirtualMethod(Int32).0.input\ := \RootClass::VirtualMethod(Int32).0.input.parameter.In\;
                        -- The following section was transformed from the .NET statement below:
                        -- int num;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num = 1;
                        -- 
                        \RootClass::VirtualMethod(Int32).0.num\ := to_signed(1, 32);
                        \RootClass::VirtualMethod(Int32).0._State\ := \RootClass::VirtualMethod(Int32).0._State_1\;
                        -- Clock cycles needed to complete this state (approximation): 0
                end case;
            end if;
        end if;
    end process;
    -- System.Void Hast.TestInputs.ClassStructure1.RootClass::VirtualMethod(System.Int32).0 state machine end


    -- System.Void Hast.TestInputs.ClassStructure1.ComplexTypes.ComplexTypeHierarchy::Hast.TestInputs.ClassStructure1.ComplexTypes.IInterface1.Interface1Method1().0 state machine start
    \ComplexTypeHierarchy::Hast.TestInputs.ClassStructure1.ComplexTypes.IInterface1.Interface1Method1().0._StateMachine\: process (\Clock\) 
        Variable \ComplexTypeHierarchy::Hast.TestInputs.ClassStructure1.ComplexTypes.IInterface1.Interface1Method1().0._State\: \ComplexTypeHierarchy::Hast.TestInputs.ClassStructure1.ComplexTypes.IInterface1.Interface1Method1().0._States\ := \ComplexTypeHierarchy::Hast.TestInputs.ClassStructure1.ComplexTypes.IInterface1.Interface1Method1().0._State_0\;
    begin 
        if (rising_edge(\Clock\)) then 
            if (\Reset\ = '1') then 
                -- Synchronous reset
                \ComplexTypeHierarchy::Hast.TestInputs.ClassStructure1.ComplexTypes.IInterface1.Interface1Method1().0._Finished\ <= false;
                \ComplexTypeHierarchy::Hast.TestInputs.ClassStructure1.ComplexTypes.IInterface1.Interface1Method1().0.ComplexTypeHierarchy::PrivateMethod()._Started.0\ <= false;
                \ComplexTypeHierarchy::Hast.TestInputs.ClassStructure1.ComplexTypes.IInterface1.Interface1Method1().0._State\ := \ComplexTypeHierarchy::Hast.TestInputs.ClassStructure1.ComplexTypes.IInterface1.Interface1Method1().0._State_0\;
            else 
                case \ComplexTypeHierarchy::Hast.TestInputs.ClassStructure1.ComplexTypes.IInterface1.Interface1Method1().0._State\ is 
                    when \ComplexTypeHierarchy::Hast.TestInputs.ClassStructure1.ComplexTypes.IInterface1.Interface1Method1().0._State_0\ => 
                        -- Start state
                        -- Waiting for the start signal.
                        if (\ComplexTypeHierarchy::Hast.TestInputs.ClassStructure1.ComplexTypes.IInterface1.Interface1Method1().0._Started\ = true) then 
                            \ComplexTypeHierarchy::Hast.TestInputs.ClassStructure1.ComplexTypes.IInterface1.Interface1Method1().0._State\ := \ComplexTypeHierarchy::Hast.TestInputs.ClassStructure1.ComplexTypes.IInterface1.Interface1Method1().0._State_2\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \ComplexTypeHierarchy::Hast.TestInputs.ClassStructure1.ComplexTypes.IInterface1.Interface1Method1().0._State_1\ => 
                        -- Final state
                        -- Signaling finished until Started is pulled back to false, then returning to the start state.
                        if (\ComplexTypeHierarchy::Hast.TestInputs.ClassStructure1.ComplexTypes.IInterface1.Interface1Method1().0._Started\ = true) then 
                            \ComplexTypeHierarchy::Hast.TestInputs.ClassStructure1.ComplexTypes.IInterface1.Interface1Method1().0._Finished\ <= true;
                        else 
                            \ComplexTypeHierarchy::Hast.TestInputs.ClassStructure1.ComplexTypes.IInterface1.Interface1Method1().0._Finished\ <= false;
                            \ComplexTypeHierarchy::Hast.TestInputs.ClassStructure1.ComplexTypes.IInterface1.Interface1Method1().0._State\ := \ComplexTypeHierarchy::Hast.TestInputs.ClassStructure1.ComplexTypes.IInterface1.Interface1Method1().0._State_0\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \ComplexTypeHierarchy::Hast.TestInputs.ClassStructure1.ComplexTypes.IInterface1.Interface1Method1().0._State_2\ => 
                        -- The following section was transformed from the .NET statement below:
                        -- this.PrivateMethod ();
                        -- 
                        -- Starting state machine invocation for the following method: System.Void Hast.TestInputs.ClassStructure1.ComplexTypes.ComplexTypeHierarchy::PrivateMethod()
                        \ComplexTypeHierarchy::Hast.TestInputs.ClassStructure1.ComplexTypes.IInterface1.Interface1Method1().0.ComplexTypeHierarchy::PrivateMethod()._Started.0\ <= true;
                        \ComplexTypeHierarchy::Hast.TestInputs.ClassStructure1.ComplexTypes.IInterface1.Interface1Method1().0._State\ := \ComplexTypeHierarchy::Hast.TestInputs.ClassStructure1.ComplexTypes.IInterface1.Interface1Method1().0._State_3\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \ComplexTypeHierarchy::Hast.TestInputs.ClassStructure1.ComplexTypes.IInterface1.Interface1Method1().0._State_3\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Void Hast.TestInputs.ClassStructure1.ComplexTypes.ComplexTypeHierarchy::PrivateMethod()
                        if (\ComplexTypeHierarchy::Hast.TestInputs.ClassStructure1.ComplexTypes.IInterface1.Interface1Method1().0.ComplexTypeHierarchy::PrivateMethod()._Started.0\ = \ComplexTypeHierarchy::Hast.TestInputs.ClassStructure1.ComplexTypes.IInterface1.Interface1Method1().0.ComplexTypeHierarchy::PrivateMethod()._Finished.0\) then 
                            \ComplexTypeHierarchy::Hast.TestInputs.ClassStructure1.ComplexTypes.IInterface1.Interface1Method1().0.ComplexTypeHierarchy::PrivateMethod()._Started.0\ <= false;
                            \ComplexTypeHierarchy::Hast.TestInputs.ClassStructure1.ComplexTypes.IInterface1.Interface1Method1().0._State\ := \ComplexTypeHierarchy::Hast.TestInputs.ClassStructure1.ComplexTypes.IInterface1.Interface1Method1().0._State_1\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                end case;
            end if;
        end if;
    end process;
    -- System.Void Hast.TestInputs.ClassStructure1.ComplexTypes.ComplexTypeHierarchy::Hast.TestInputs.ClassStructure1.ComplexTypes.IInterface1.Interface1Method1().0 state machine end


    -- System.Void Hast.TestInputs.ClassStructure1.ComplexTypes.ComplexTypeHierarchy::Interface1Method2().0 state machine start
    \ComplexTypeHierarchy::Interface1Method2().0._StateMachine\: process (\Clock\) 
        Variable \ComplexTypeHierarchy::Interface1Method2().0._State\: \ComplexTypeHierarchy::Interface1Method2().0._States\ := \ComplexTypeHierarchy::Interface1Method2().0._State_0\;
        Variable \ComplexTypeHierarchy::Interface1Method2().0.flag\: boolean := false;
    begin 
        if (rising_edge(\Clock\)) then 
            if (\Reset\ = '1') then 
                -- Synchronous reset
                \ComplexTypeHierarchy::Interface1Method2().0._Finished\ <= false;
                \ComplexTypeHierarchy::Interface1Method2().0.ComplexTypeHierarchy::PrivateMethod()._Started.0\ <= false;
                \ComplexTypeHierarchy::Interface1Method2().0.ComplexTypeHierarchy::StaticMethod()._Started.0\ <= false;
                \ComplexTypeHierarchy::Interface1Method2().0._State\ := \ComplexTypeHierarchy::Interface1Method2().0._State_0\;
                \ComplexTypeHierarchy::Interface1Method2().0.flag\ := false;
            else 
                case \ComplexTypeHierarchy::Interface1Method2().0._State\ is 
                    when \ComplexTypeHierarchy::Interface1Method2().0._State_0\ => 
                        -- Start state
                        -- Waiting for the start signal.
                        if (\ComplexTypeHierarchy::Interface1Method2().0._Started\ = true) then 
                            \ComplexTypeHierarchy::Interface1Method2().0._State\ := \ComplexTypeHierarchy::Interface1Method2().0._State_2\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \ComplexTypeHierarchy::Interface1Method2().0._State_1\ => 
                        -- Final state
                        -- Signaling finished until Started is pulled back to false, then returning to the start state.
                        if (\ComplexTypeHierarchy::Interface1Method2().0._Started\ = true) then 
                            \ComplexTypeHierarchy::Interface1Method2().0._Finished\ <= true;
                        else 
                            \ComplexTypeHierarchy::Interface1Method2().0._Finished\ <= false;
                            \ComplexTypeHierarchy::Interface1Method2().0._State\ := \ComplexTypeHierarchy::Interface1Method2().0._State_0\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \ComplexTypeHierarchy::Interface1Method2().0._State_2\ => 
                        -- The following section was transformed from the .NET statement below:
                        -- bool flag;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- flag = true;
                        -- 
                        \ComplexTypeHierarchy::Interface1Method2().0.flag\ := True;
                        -- The following section was transformed from the .NET statement below:
                        -- this.PrivateMethod ();
                        -- 
                        -- Starting state machine invocation for the following method: System.Void Hast.TestInputs.ClassStructure1.ComplexTypes.ComplexTypeHierarchy::PrivateMethod()
                        \ComplexTypeHierarchy::Interface1Method2().0.ComplexTypeHierarchy::PrivateMethod()._Started.0\ <= true;
                        \ComplexTypeHierarchy::Interface1Method2().0._State\ := \ComplexTypeHierarchy::Interface1Method2().0._State_3\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \ComplexTypeHierarchy::Interface1Method2().0._State_3\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Void Hast.TestInputs.ClassStructure1.ComplexTypes.ComplexTypeHierarchy::PrivateMethod()
                        if (\ComplexTypeHierarchy::Interface1Method2().0.ComplexTypeHierarchy::PrivateMethod()._Started.0\ = \ComplexTypeHierarchy::Interface1Method2().0.ComplexTypeHierarchy::PrivateMethod()._Finished.0\) then 
                            \ComplexTypeHierarchy::Interface1Method2().0.ComplexTypeHierarchy::PrivateMethod()._Started.0\ <= false;
                            -- The following section was transformed from the .NET statement below:
                            -- this.StaticMethod ();
                            -- 
                            -- Starting state machine invocation for the following method: System.Void Hast.TestInputs.ClassStructure1.ComplexTypes.ComplexTypeHierarchy::StaticMethod()
                            \ComplexTypeHierarchy::Interface1Method2().0.ComplexTypeHierarchy::StaticMethod()._Started.0\ <= true;
                            \ComplexTypeHierarchy::Interface1Method2().0._State\ := \ComplexTypeHierarchy::Interface1Method2().0._State_4\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \ComplexTypeHierarchy::Interface1Method2().0._State_4\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Void Hast.TestInputs.ClassStructure1.ComplexTypes.ComplexTypeHierarchy::StaticMethod()
                        if (\ComplexTypeHierarchy::Interface1Method2().0.ComplexTypeHierarchy::StaticMethod()._Started.0\ = \ComplexTypeHierarchy::Interface1Method2().0.ComplexTypeHierarchy::StaticMethod()._Finished.0\) then 
                            \ComplexTypeHierarchy::Interface1Method2().0.ComplexTypeHierarchy::StaticMethod()._Started.0\ <= false;
                            \ComplexTypeHierarchy::Interface1Method2().0._State\ := \ComplexTypeHierarchy::Interface1Method2().0._State_1\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                end case;
            end if;
        end if;
    end process;
    -- System.Void Hast.TestInputs.ClassStructure1.ComplexTypes.ComplexTypeHierarchy::Interface1Method2().0 state machine end


    -- System.Void Hast.TestInputs.ClassStructure1.ComplexTypes.ComplexTypeHierarchy::Interface2Method1().0 state machine start
    \ComplexTypeHierarchy::Interface2Method1().0._StateMachine\: process (\Clock\) 
        Variable \ComplexTypeHierarchy::Interface2Method1().0._State\: \ComplexTypeHierarchy::Interface2Method1().0._States\ := \ComplexTypeHierarchy::Interface2Method1().0._State_0\;
    begin 
        if (rising_edge(\Clock\)) then 
            if (\Reset\ = '1') then 
                -- Synchronous reset
                \ComplexTypeHierarchy::Interface2Method1().0._Finished\ <= false;
                \ComplexTypeHierarchy::Interface2Method1().0.ComplexTypeHierarchy::BaseInterfaceMethod2()._Started.0\ <= false;
                \ComplexTypeHierarchy::Interface2Method1().0._State\ := \ComplexTypeHierarchy::Interface2Method1().0._State_0\;
            else 
                case \ComplexTypeHierarchy::Interface2Method1().0._State\ is 
                    when \ComplexTypeHierarchy::Interface2Method1().0._State_0\ => 
                        -- Start state
                        -- Waiting for the start signal.
                        if (\ComplexTypeHierarchy::Interface2Method1().0._Started\ = true) then 
                            \ComplexTypeHierarchy::Interface2Method1().0._State\ := \ComplexTypeHierarchy::Interface2Method1().0._State_2\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \ComplexTypeHierarchy::Interface2Method1().0._State_1\ => 
                        -- Final state
                        -- Signaling finished until Started is pulled back to false, then returning to the start state.
                        if (\ComplexTypeHierarchy::Interface2Method1().0._Started\ = true) then 
                            \ComplexTypeHierarchy::Interface2Method1().0._Finished\ <= true;
                        else 
                            \ComplexTypeHierarchy::Interface2Method1().0._Finished\ <= false;
                            \ComplexTypeHierarchy::Interface2Method1().0._State\ := \ComplexTypeHierarchy::Interface2Method1().0._State_0\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \ComplexTypeHierarchy::Interface2Method1().0._State_2\ => 
                        -- The following section was transformed from the .NET statement below:
                        -- this.BaseInterfaceMethod2 ();
                        -- 
                        -- Starting state machine invocation for the following method: System.Void Hast.TestInputs.ClassStructure1.ComplexTypes.ComplexTypeHierarchy::BaseInterfaceMethod2()
                        \ComplexTypeHierarchy::Interface2Method1().0.ComplexTypeHierarchy::BaseInterfaceMethod2()._Started.0\ <= true;
                        \ComplexTypeHierarchy::Interface2Method1().0._State\ := \ComplexTypeHierarchy::Interface2Method1().0._State_3\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \ComplexTypeHierarchy::Interface2Method1().0._State_3\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Void Hast.TestInputs.ClassStructure1.ComplexTypes.ComplexTypeHierarchy::BaseInterfaceMethod2()
                        if (\ComplexTypeHierarchy::Interface2Method1().0.ComplexTypeHierarchy::BaseInterfaceMethod2()._Started.0\ = \ComplexTypeHierarchy::Interface2Method1().0.ComplexTypeHierarchy::BaseInterfaceMethod2()._Finished.0\) then 
                            \ComplexTypeHierarchy::Interface2Method1().0.ComplexTypeHierarchy::BaseInterfaceMethod2()._Started.0\ <= false;
                            \ComplexTypeHierarchy::Interface2Method1().0._State\ := \ComplexTypeHierarchy::Interface2Method1().0._State_1\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                end case;
            end if;
        end if;
    end process;
    -- System.Void Hast.TestInputs.ClassStructure1.ComplexTypes.ComplexTypeHierarchy::Interface2Method1().0 state machine end


    -- System.Void Hast.TestInputs.ClassStructure1.ComplexTypes.ComplexTypeHierarchy::Hast.TestInputs.ClassStructure1.ComplexTypes.IBaseInterface.BaseInterfaceMethod1().0 state machine start
    \ComplexTypeHierarchy::Hast.TestInputs.ClassStructure1.ComplexTypes.IBaseInterface.BaseInterfaceMethod1().0._StateMachine\: process (\Clock\) 
        Variable \ComplexTypeHierarchy::Hast.TestInputs.ClassStructure1.ComplexTypes.IBaseInterface.BaseInterfaceMethod1().0._State\: \ComplexTypeHierarchy::Hast.TestInputs.ClassStructure1.ComplexTypes.IBaseInterface.BaseInterfaceMethod1().0._States\ := \ComplexTypeHierarchy::Hast.TestInputs.ClassStructure1.ComplexTypes.IBaseInterface.BaseInterfaceMethod1().0._State_0\;
        Variable \ComplexTypeHierarchy::Hast.TestInputs.ClassStructure1.ComplexTypes.IBaseInterface.BaseInterfaceMethod1().0.num\: signed(31 downto 0) := to_signed(0, 32);
    begin 
        if (rising_edge(\Clock\)) then 
            if (\Reset\ = '1') then 
                -- Synchronous reset
                \ComplexTypeHierarchy::Hast.TestInputs.ClassStructure1.ComplexTypes.IBaseInterface.BaseInterfaceMethod1().0._Finished\ <= false;
                \ComplexTypeHierarchy::Hast.TestInputs.ClassStructure1.ComplexTypes.IBaseInterface.BaseInterfaceMethod1().0._State\ := \ComplexTypeHierarchy::Hast.TestInputs.ClassStructure1.ComplexTypes.IBaseInterface.BaseInterfaceMethod1().0._State_0\;
                \ComplexTypeHierarchy::Hast.TestInputs.ClassStructure1.ComplexTypes.IBaseInterface.BaseInterfaceMethod1().0.num\ := to_signed(0, 32);
            else 
                case \ComplexTypeHierarchy::Hast.TestInputs.ClassStructure1.ComplexTypes.IBaseInterface.BaseInterfaceMethod1().0._State\ is 
                    when \ComplexTypeHierarchy::Hast.TestInputs.ClassStructure1.ComplexTypes.IBaseInterface.BaseInterfaceMethod1().0._State_0\ => 
                        -- Start state
                        -- Waiting for the start signal.
                        if (\ComplexTypeHierarchy::Hast.TestInputs.ClassStructure1.ComplexTypes.IBaseInterface.BaseInterfaceMethod1().0._Started\ = true) then 
                            \ComplexTypeHierarchy::Hast.TestInputs.ClassStructure1.ComplexTypes.IBaseInterface.BaseInterfaceMethod1().0._State\ := \ComplexTypeHierarchy::Hast.TestInputs.ClassStructure1.ComplexTypes.IBaseInterface.BaseInterfaceMethod1().0._State_2\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \ComplexTypeHierarchy::Hast.TestInputs.ClassStructure1.ComplexTypes.IBaseInterface.BaseInterfaceMethod1().0._State_1\ => 
                        -- Final state
                        -- Signaling finished until Started is pulled back to false, then returning to the start state.
                        if (\ComplexTypeHierarchy::Hast.TestInputs.ClassStructure1.ComplexTypes.IBaseInterface.BaseInterfaceMethod1().0._Started\ = true) then 
                            \ComplexTypeHierarchy::Hast.TestInputs.ClassStructure1.ComplexTypes.IBaseInterface.BaseInterfaceMethod1().0._Finished\ <= true;
                        else 
                            \ComplexTypeHierarchy::Hast.TestInputs.ClassStructure1.ComplexTypes.IBaseInterface.BaseInterfaceMethod1().0._Finished\ <= false;
                            \ComplexTypeHierarchy::Hast.TestInputs.ClassStructure1.ComplexTypes.IBaseInterface.BaseInterfaceMethod1().0._State\ := \ComplexTypeHierarchy::Hast.TestInputs.ClassStructure1.ComplexTypes.IBaseInterface.BaseInterfaceMethod1().0._State_0\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \ComplexTypeHierarchy::Hast.TestInputs.ClassStructure1.ComplexTypes.IBaseInterface.BaseInterfaceMethod1().0._State_2\ => 
                        -- The following section was transformed from the .NET statement below:
                        -- int num;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num = 1;
                        -- 
                        \ComplexTypeHierarchy::Hast.TestInputs.ClassStructure1.ComplexTypes.IBaseInterface.BaseInterfaceMethod1().0.num\ := to_signed(1, 32);
                        \ComplexTypeHierarchy::Hast.TestInputs.ClassStructure1.ComplexTypes.IBaseInterface.BaseInterfaceMethod1().0._State\ := \ComplexTypeHierarchy::Hast.TestInputs.ClassStructure1.ComplexTypes.IBaseInterface.BaseInterfaceMethod1().0._State_1\;
                        -- Clock cycles needed to complete this state (approximation): 0
                end case;
            end if;
        end if;
    end process;
    -- System.Void Hast.TestInputs.ClassStructure1.ComplexTypes.ComplexTypeHierarchy::Hast.TestInputs.ClassStructure1.ComplexTypes.IBaseInterface.BaseInterfaceMethod1().0 state machine end


    -- System.Void Hast.TestInputs.ClassStructure1.ComplexTypes.ComplexTypeHierarchy::BaseInterfaceMethod2().0 state machine start
    \ComplexTypeHierarchy::BaseInterfaceMethod2().0._StateMachine\: process (\Clock\) 
        Variable \ComplexTypeHierarchy::BaseInterfaceMethod2().0._State\: \ComplexTypeHierarchy::BaseInterfaceMethod2().0._States\ := \ComplexTypeHierarchy::BaseInterfaceMethod2().0._State_0\;
    begin 
        if (rising_edge(\Clock\)) then 
            if (\Reset\ = '1') then 
                -- Synchronous reset
                \ComplexTypeHierarchy::BaseInterfaceMethod2().0._Finished\ <= false;
                \ComplexTypeHierarchy::BaseInterfaceMethod2().0.ComplexTypeHierarchy::StaticMethod()._Started.0\ <= false;
                \ComplexTypeHierarchy::BaseInterfaceMethod2().0._State\ := \ComplexTypeHierarchy::BaseInterfaceMethod2().0._State_0\;
            else 
                case \ComplexTypeHierarchy::BaseInterfaceMethod2().0._State\ is 
                    when \ComplexTypeHierarchy::BaseInterfaceMethod2().0._State_0\ => 
                        -- Start state
                        -- Waiting for the start signal.
                        if (\ComplexTypeHierarchy::BaseInterfaceMethod2().0._Started\ = true) then 
                            \ComplexTypeHierarchy::BaseInterfaceMethod2().0._State\ := \ComplexTypeHierarchy::BaseInterfaceMethod2().0._State_2\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \ComplexTypeHierarchy::BaseInterfaceMethod2().0._State_1\ => 
                        -- Final state
                        -- Signaling finished until Started is pulled back to false, then returning to the start state.
                        if (\ComplexTypeHierarchy::BaseInterfaceMethod2().0._Started\ = true) then 
                            \ComplexTypeHierarchy::BaseInterfaceMethod2().0._Finished\ <= true;
                        else 
                            \ComplexTypeHierarchy::BaseInterfaceMethod2().0._Finished\ <= false;
                            \ComplexTypeHierarchy::BaseInterfaceMethod2().0._State\ := \ComplexTypeHierarchy::BaseInterfaceMethod2().0._State_0\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \ComplexTypeHierarchy::BaseInterfaceMethod2().0._State_2\ => 
                        -- The following section was transformed from the .NET statement below:
                        -- this.StaticMethod ();
                        -- 
                        -- Starting state machine invocation for the following method: System.Void Hast.TestInputs.ClassStructure1.ComplexTypes.ComplexTypeHierarchy::StaticMethod()
                        \ComplexTypeHierarchy::BaseInterfaceMethod2().0.ComplexTypeHierarchy::StaticMethod()._Started.0\ <= true;
                        \ComplexTypeHierarchy::BaseInterfaceMethod2().0._State\ := \ComplexTypeHierarchy::BaseInterfaceMethod2().0._State_3\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \ComplexTypeHierarchy::BaseInterfaceMethod2().0._State_3\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Void Hast.TestInputs.ClassStructure1.ComplexTypes.ComplexTypeHierarchy::StaticMethod()
                        if (\ComplexTypeHierarchy::BaseInterfaceMethod2().0.ComplexTypeHierarchy::StaticMethod()._Started.0\ = \ComplexTypeHierarchy::BaseInterfaceMethod2().0.ComplexTypeHierarchy::StaticMethod()._Finished.0\) then 
                            \ComplexTypeHierarchy::BaseInterfaceMethod2().0.ComplexTypeHierarchy::StaticMethod()._Started.0\ <= false;
                            \ComplexTypeHierarchy::BaseInterfaceMethod2().0._State\ := \ComplexTypeHierarchy::BaseInterfaceMethod2().0._State_1\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                end case;
            end if;
        end if;
    end process;
    -- System.Void Hast.TestInputs.ClassStructure1.ComplexTypes.ComplexTypeHierarchy::BaseInterfaceMethod2().0 state machine end


    -- System.Void Hast.TestInputs.ClassStructure1.ComplexTypes.ComplexTypeHierarchy::NonVirtualNonInterfaceMehod().0 state machine start
    \ComplexTypeHierarchy::NonVirtualNonInterfaceMehod().0._StateMachine\: process (\Clock\) 
        Variable \ComplexTypeHierarchy::NonVirtualNonInterfaceMehod().0._State\: \ComplexTypeHierarchy::NonVirtualNonInterfaceMehod().0._States\ := \ComplexTypeHierarchy::NonVirtualNonInterfaceMehod().0._State_0\;
    begin 
        if (rising_edge(\Clock\)) then 
            if (\Reset\ = '1') then 
                -- Synchronous reset
                \ComplexTypeHierarchy::NonVirtualNonInterfaceMehod().0._Finished\ <= false;
                \ComplexTypeHierarchy::NonVirtualNonInterfaceMehod().0.ComplexTypeHierarchy::PrivateMethod()._Started.0\ <= false;
                \ComplexTypeHierarchy::NonVirtualNonInterfaceMehod().0._State\ := \ComplexTypeHierarchy::NonVirtualNonInterfaceMehod().0._State_0\;
            else 
                case \ComplexTypeHierarchy::NonVirtualNonInterfaceMehod().0._State\ is 
                    when \ComplexTypeHierarchy::NonVirtualNonInterfaceMehod().0._State_0\ => 
                        -- Start state
                        -- Waiting for the start signal.
                        if (\ComplexTypeHierarchy::NonVirtualNonInterfaceMehod().0._Started\ = true) then 
                            \ComplexTypeHierarchy::NonVirtualNonInterfaceMehod().0._State\ := \ComplexTypeHierarchy::NonVirtualNonInterfaceMehod().0._State_2\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \ComplexTypeHierarchy::NonVirtualNonInterfaceMehod().0._State_1\ => 
                        -- Final state
                        -- Signaling finished until Started is pulled back to false, then returning to the start state.
                        if (\ComplexTypeHierarchy::NonVirtualNonInterfaceMehod().0._Started\ = true) then 
                            \ComplexTypeHierarchy::NonVirtualNonInterfaceMehod().0._Finished\ <= true;
                        else 
                            \ComplexTypeHierarchy::NonVirtualNonInterfaceMehod().0._Finished\ <= false;
                            \ComplexTypeHierarchy::NonVirtualNonInterfaceMehod().0._State\ := \ComplexTypeHierarchy::NonVirtualNonInterfaceMehod().0._State_0\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \ComplexTypeHierarchy::NonVirtualNonInterfaceMehod().0._State_2\ => 
                        -- The following section was transformed from the .NET statement below:
                        -- this.PrivateMethod ();
                        -- 
                        -- Starting state machine invocation for the following method: System.Void Hast.TestInputs.ClassStructure1.ComplexTypes.ComplexTypeHierarchy::PrivateMethod()
                        \ComplexTypeHierarchy::NonVirtualNonInterfaceMehod().0.ComplexTypeHierarchy::PrivateMethod()._Started.0\ <= true;
                        \ComplexTypeHierarchy::NonVirtualNonInterfaceMehod().0._State\ := \ComplexTypeHierarchy::NonVirtualNonInterfaceMehod().0._State_3\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \ComplexTypeHierarchy::NonVirtualNonInterfaceMehod().0._State_3\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Void Hast.TestInputs.ClassStructure1.ComplexTypes.ComplexTypeHierarchy::PrivateMethod()
                        if (\ComplexTypeHierarchy::NonVirtualNonInterfaceMehod().0.ComplexTypeHierarchy::PrivateMethod()._Started.0\ = \ComplexTypeHierarchy::NonVirtualNonInterfaceMehod().0.ComplexTypeHierarchy::PrivateMethod()._Finished.0\) then 
                            \ComplexTypeHierarchy::NonVirtualNonInterfaceMehod().0.ComplexTypeHierarchy::PrivateMethod()._Started.0\ <= false;
                            \ComplexTypeHierarchy::NonVirtualNonInterfaceMehod().0._State\ := \ComplexTypeHierarchy::NonVirtualNonInterfaceMehod().0._State_1\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                end case;
            end if;
        end if;
    end process;
    -- System.Void Hast.TestInputs.ClassStructure1.ComplexTypes.ComplexTypeHierarchy::NonVirtualNonInterfaceMehod().0 state machine end


    -- System.Void Hast.TestInputs.ClassStructure1.ComplexTypes.ComplexTypeHierarchy::PrivateMethod().0 state machine start
    \ComplexTypeHierarchy::PrivateMethod().0._StateMachine\: process (\Clock\) 
        Variable \ComplexTypeHierarchy::PrivateMethod().0._State\: \ComplexTypeHierarchy::PrivateMethod().0._States\ := \ComplexTypeHierarchy::PrivateMethod().0._State_0\;
    begin 
        if (rising_edge(\Clock\)) then 
            if (\Reset\ = '1') then 
                -- Synchronous reset
                \ComplexTypeHierarchy::PrivateMethod().0._Finished\ <= false;
                \ComplexTypeHierarchy::PrivateMethod().0.ComplexTypeHierarchy::StaticMethod()._Started.0\ <= false;
                \ComplexTypeHierarchy::PrivateMethod().0._State\ := \ComplexTypeHierarchy::PrivateMethod().0._State_0\;
            else 
                case \ComplexTypeHierarchy::PrivateMethod().0._State\ is 
                    when \ComplexTypeHierarchy::PrivateMethod().0._State_0\ => 
                        -- Start state
                        -- Waiting for the start signal.
                        if (\ComplexTypeHierarchy::PrivateMethod().0._Started\ = true) then 
                            \ComplexTypeHierarchy::PrivateMethod().0._State\ := \ComplexTypeHierarchy::PrivateMethod().0._State_2\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \ComplexTypeHierarchy::PrivateMethod().0._State_1\ => 
                        -- Final state
                        -- Signaling finished until Started is pulled back to false, then returning to the start state.
                        if (\ComplexTypeHierarchy::PrivateMethod().0._Started\ = true) then 
                            \ComplexTypeHierarchy::PrivateMethod().0._Finished\ <= true;
                        else 
                            \ComplexTypeHierarchy::PrivateMethod().0._Finished\ <= false;
                            \ComplexTypeHierarchy::PrivateMethod().0._State\ := \ComplexTypeHierarchy::PrivateMethod().0._State_0\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \ComplexTypeHierarchy::PrivateMethod().0._State_2\ => 
                        -- The following section was transformed from the .NET statement below:
                        -- this.StaticMethod ();
                        -- 
                        -- Starting state machine invocation for the following method: System.Void Hast.TestInputs.ClassStructure1.ComplexTypes.ComplexTypeHierarchy::StaticMethod()
                        \ComplexTypeHierarchy::PrivateMethod().0.ComplexTypeHierarchy::StaticMethod()._Started.0\ <= true;
                        \ComplexTypeHierarchy::PrivateMethod().0._State\ := \ComplexTypeHierarchy::PrivateMethod().0._State_3\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \ComplexTypeHierarchy::PrivateMethod().0._State_3\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Void Hast.TestInputs.ClassStructure1.ComplexTypes.ComplexTypeHierarchy::StaticMethod()
                        if (\ComplexTypeHierarchy::PrivateMethod().0.ComplexTypeHierarchy::StaticMethod()._Started.0\ = \ComplexTypeHierarchy::PrivateMethod().0.ComplexTypeHierarchy::StaticMethod()._Finished.0\) then 
                            \ComplexTypeHierarchy::PrivateMethod().0.ComplexTypeHierarchy::StaticMethod()._Started.0\ <= false;
                            \ComplexTypeHierarchy::PrivateMethod().0._State\ := \ComplexTypeHierarchy::PrivateMethod().0._State_1\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                end case;
            end if;
        end if;
    end process;
    -- System.Void Hast.TestInputs.ClassStructure1.ComplexTypes.ComplexTypeHierarchy::PrivateMethod().0 state machine end


    -- System.Void Hast.TestInputs.ClassStructure1.ComplexTypes.ComplexTypeHierarchy::StaticMethod().0 state machine start
    \ComplexTypeHierarchy::StaticMethod().0._StateMachine\: process (\Clock\) 
        Variable \ComplexTypeHierarchy::StaticMethod().0._State\: \ComplexTypeHierarchy::StaticMethod().0._States\ := \ComplexTypeHierarchy::StaticMethod().0._State_0\;
        Variable \ComplexTypeHierarchy::StaticMethod().0.num\: signed(31 downto 0) := to_signed(0, 32);
    begin 
        if (rising_edge(\Clock\)) then 
            if (\Reset\ = '1') then 
                -- Synchronous reset
                \ComplexTypeHierarchy::StaticMethod().0._Finished\ <= false;
                \ComplexTypeHierarchy::StaticMethod().0._State\ := \ComplexTypeHierarchy::StaticMethod().0._State_0\;
                \ComplexTypeHierarchy::StaticMethod().0.num\ := to_signed(0, 32);
            else 
                case \ComplexTypeHierarchy::StaticMethod().0._State\ is 
                    when \ComplexTypeHierarchy::StaticMethod().0._State_0\ => 
                        -- Start state
                        -- Waiting for the start signal.
                        if (\ComplexTypeHierarchy::StaticMethod().0._Started\ = true) then 
                            \ComplexTypeHierarchy::StaticMethod().0._State\ := \ComplexTypeHierarchy::StaticMethod().0._State_2\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \ComplexTypeHierarchy::StaticMethod().0._State_1\ => 
                        -- Final state
                        -- Signaling finished until Started is pulled back to false, then returning to the start state.
                        if (\ComplexTypeHierarchy::StaticMethod().0._Started\ = true) then 
                            \ComplexTypeHierarchy::StaticMethod().0._Finished\ <= true;
                        else 
                            \ComplexTypeHierarchy::StaticMethod().0._Finished\ <= false;
                            \ComplexTypeHierarchy::StaticMethod().0._State\ := \ComplexTypeHierarchy::StaticMethod().0._State_0\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \ComplexTypeHierarchy::StaticMethod().0._State_2\ => 
                        -- The following section was transformed from the .NET statement below:
                        -- int num;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num = 1;
                        -- 
                        \ComplexTypeHierarchy::StaticMethod().0.num\ := to_signed(1, 32);
                        \ComplexTypeHierarchy::StaticMethod().0._State\ := \ComplexTypeHierarchy::StaticMethod().0._State_1\;
                        -- Clock cycles needed to complete this state (approximation): 0
                end case;
            end if;
        end if;
    end process;
    -- System.Void Hast.TestInputs.ClassStructure1.ComplexTypes.ComplexTypeHierarchy::StaticMethod().0 state machine end


    -- System.Void Hast.TestInputs.ClassStructure1.ComplexTypes.StaticClass::StaticMethod().0 state machine start
    \StaticClass::StaticMethod().0._StateMachine\: process (\Clock\) 
        Variable \StaticClass::StaticMethod().0._State\: \StaticClass::StaticMethod().0._States\ := \StaticClass::StaticMethod().0._State_0\;
        Variable \StaticClass::StaticMethod().0.num\: signed(31 downto 0) := to_signed(0, 32);
    begin 
        if (rising_edge(\Clock\)) then 
            if (\Reset\ = '1') then 
                -- Synchronous reset
                \StaticClass::StaticMethod().0._Finished\ <= false;
                \StaticClass::StaticMethod().0._State\ := \StaticClass::StaticMethod().0._State_0\;
                \StaticClass::StaticMethod().0.num\ := to_signed(0, 32);
            else 
                case \StaticClass::StaticMethod().0._State\ is 
                    when \StaticClass::StaticMethod().0._State_0\ => 
                        -- Start state
                        -- Waiting for the start signal.
                        if (\StaticClass::StaticMethod().0._Started\ = true) then 
                            \StaticClass::StaticMethod().0._State\ := \StaticClass::StaticMethod().0._State_2\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \StaticClass::StaticMethod().0._State_1\ => 
                        -- Final state
                        -- Signaling finished until Started is pulled back to false, then returning to the start state.
                        if (\StaticClass::StaticMethod().0._Started\ = true) then 
                            \StaticClass::StaticMethod().0._Finished\ <= true;
                        else 
                            \StaticClass::StaticMethod().0._Finished\ <= false;
                            \StaticClass::StaticMethod().0._State\ := \StaticClass::StaticMethod().0._State_0\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \StaticClass::StaticMethod().0._State_2\ => 
                        -- The following section was transformed from the .NET statement below:
                        -- int num;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num = 1;
                        -- 
                        \StaticClass::StaticMethod().0.num\ := to_signed(1, 32);
                        \StaticClass::StaticMethod().0._State\ := \StaticClass::StaticMethod().0._State_1\;
                        -- Clock cycles needed to complete this state (approximation): 0
                end case;
            end if;
        end if;
    end process;
    -- System.Void Hast.TestInputs.ClassStructure1.ComplexTypes.StaticClass::StaticMethod().0 state machine end


    -- System.Void Hast.TestInputs.ClassStructure1.ComplexTypes.UnusedDeclarations::UnusedMethod().0 state machine start
    \UnusedDeclarations::UnusedMethod().0._StateMachine\: process (\Clock\) 
        Variable \UnusedDeclarations::UnusedMethod().0._State\: \UnusedDeclarations::UnusedMethod().0._States\ := \UnusedDeclarations::UnusedMethod().0._State_0\;
        Variable \UnusedDeclarations::UnusedMethod().0.num\: signed(31 downto 0) := to_signed(0, 32);
    begin 
        if (rising_edge(\Clock\)) then 
            if (\Reset\ = '1') then 
                -- Synchronous reset
                \UnusedDeclarations::UnusedMethod().0._Finished\ <= false;
                \UnusedDeclarations::UnusedMethod().0._State\ := \UnusedDeclarations::UnusedMethod().0._State_0\;
                \UnusedDeclarations::UnusedMethod().0.num\ := to_signed(0, 32);
            else 
                case \UnusedDeclarations::UnusedMethod().0._State\ is 
                    when \UnusedDeclarations::UnusedMethod().0._State_0\ => 
                        -- Start state
                        -- Waiting for the start signal.
                        if (\UnusedDeclarations::UnusedMethod().0._Started\ = true) then 
                            \UnusedDeclarations::UnusedMethod().0._State\ := \UnusedDeclarations::UnusedMethod().0._State_2\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \UnusedDeclarations::UnusedMethod().0._State_1\ => 
                        -- Final state
                        -- Signaling finished until Started is pulled back to false, then returning to the start state.
                        if (\UnusedDeclarations::UnusedMethod().0._Started\ = true) then 
                            \UnusedDeclarations::UnusedMethod().0._Finished\ <= true;
                        else 
                            \UnusedDeclarations::UnusedMethod().0._Finished\ <= false;
                            \UnusedDeclarations::UnusedMethod().0._State\ := \UnusedDeclarations::UnusedMethod().0._State_0\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \UnusedDeclarations::UnusedMethod().0._State_2\ => 
                        -- The following section was transformed from the .NET statement below:
                        -- int num;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num = 1;
                        -- 
                        \UnusedDeclarations::UnusedMethod().0.num\ := to_signed(1, 32);
                        \UnusedDeclarations::UnusedMethod().0._State\ := \UnusedDeclarations::UnusedMethod().0._State_1\;
                        -- Clock cycles needed to complete this state (approximation): 0
                end case;
            end if;
        end if;
    end process;
    -- System.Void Hast.TestInputs.ClassStructure1.ComplexTypes.UnusedDeclarations::UnusedMethod().0 state machine end


    -- System.Void Hast.TestInputs.ClassStructure2.StaticReference::StaticClassUsingMethod().0 state machine start
    \StaticReference::StaticClassUsingMethod().0._StateMachine\: process (\Clock\) 
        Variable \StaticReference::StaticClassUsingMethod().0._State\: \StaticReference::StaticClassUsingMethod().0._States\ := \StaticReference::StaticClassUsingMethod().0._State_0\;
        Variable \StaticReference::StaticClassUsingMethod().0.flag\: boolean := false;
        Variable \StaticReference::StaticClassUsingMethod().0.num\: signed(31 downto 0) := to_signed(0, 32);
        Variable \StaticReference::StaticClassUsingMethod().0.num2\: signed(31 downto 0) := to_signed(0, 32);
        Variable \StaticReference::StaticClassUsingMethod().0.num3\: signed(31 downto 0) := to_signed(0, 32);
        Variable \StaticReference::StaticClassUsingMethod().0.num4\: signed(31 downto 0) := to_signed(0, 32);
    begin 
        if (rising_edge(\Clock\)) then 
            if (\Reset\ = '1') then 
                -- Synchronous reset
                \StaticReference::StaticClassUsingMethod().0._Finished\ <= false;
                \StaticReference::StaticClassUsingMethod().0.StaticClass::StaticMethod()._Started.0\ <= false;
                \StaticReference::StaticClassUsingMethod().0._State\ := \StaticReference::StaticClassUsingMethod().0._State_0\;
                \StaticReference::StaticClassUsingMethod().0.flag\ := false;
                \StaticReference::StaticClassUsingMethod().0.num\ := to_signed(0, 32);
                \StaticReference::StaticClassUsingMethod().0.num2\ := to_signed(0, 32);
                \StaticReference::StaticClassUsingMethod().0.num3\ := to_signed(0, 32);
                \StaticReference::StaticClassUsingMethod().0.num4\ := to_signed(0, 32);
            else 
                case \StaticReference::StaticClassUsingMethod().0._State\ is 
                    when \StaticReference::StaticClassUsingMethod().0._State_0\ => 
                        -- Start state
                        -- Waiting for the start signal.
                        if (\StaticReference::StaticClassUsingMethod().0._Started\ = true) then 
                            \StaticReference::StaticClassUsingMethod().0._State\ := \StaticReference::StaticClassUsingMethod().0._State_2\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \StaticReference::StaticClassUsingMethod().0._State_1\ => 
                        -- Final state
                        -- Signaling finished until Started is pulled back to false, then returning to the start state.
                        if (\StaticReference::StaticClassUsingMethod().0._Started\ = true) then 
                            \StaticReference::StaticClassUsingMethod().0._Finished\ <= true;
                        else 
                            \StaticReference::StaticClassUsingMethod().0._Finished\ <= false;
                            \StaticReference::StaticClassUsingMethod().0._State\ := \StaticReference::StaticClassUsingMethod().0._State_0\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \StaticReference::StaticClassUsingMethod().0._State_2\ => 
                        -- The following section was transformed from the .NET statement below:
                        -- StaticClass.StaticMethod ();
                        -- 
                        -- Starting state machine invocation for the following method: System.Void Hast.TestInputs.ClassStructure1.ComplexTypes.StaticClass::StaticMethod()
                        \StaticReference::StaticClassUsingMethod().0.StaticClass::StaticMethod()._Started.0\ <= true;
                        \StaticReference::StaticClassUsingMethod().0._State\ := \StaticReference::StaticClassUsingMethod().0._State_3\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \StaticReference::StaticClassUsingMethod().0._State_3\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Void Hast.TestInputs.ClassStructure1.ComplexTypes.StaticClass::StaticMethod()
                        if (\StaticReference::StaticClassUsingMethod().0.StaticClass::StaticMethod()._Started.0\ = \StaticReference::StaticClassUsingMethod().0.StaticClass::StaticMethod()._Finished.0\) then 
                            \StaticReference::StaticClassUsingMethod().0.StaticClass::StaticMethod()._Started.0\ <= false;
                            -- The following section was transformed from the .NET statement below:
                            -- bool flag;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- flag = true;
                            -- 
                            \StaticReference::StaticClassUsingMethod().0.flag\ := True;
                            -- The following section was transformed from the .NET statement below:
                            -- int num;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- num = 1;
                            -- 
                            \StaticReference::StaticClassUsingMethod().0.num\ := to_signed(1, 32);
                            -- The following section was transformed from the .NET statement below:
                            -- int num2;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- num2 = 1;
                            -- 
                            \StaticReference::StaticClassUsingMethod().0.num2\ := to_signed(1, 32);
                            -- The following section was transformed from the .NET statement below:
                            -- int num3;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- num3 = 2;
                            -- 
                            \StaticReference::StaticClassUsingMethod().0.num3\ := to_signed(2, 32);
                            -- The following section was transformed from the .NET statement below:
                            -- int num4;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- num4 = 2;
                            -- 
                            \StaticReference::StaticClassUsingMethod().0.num4\ := to_signed(2, 32);
                            \StaticReference::StaticClassUsingMethod().0._State\ := \StaticReference::StaticClassUsingMethod().0._State_1\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                end case;
            end if;
        end if;
    end process;
    -- System.Void Hast.TestInputs.ClassStructure2.StaticReference::StaticClassUsingMethod().0 state machine end


    -- System.Void Hast.TestInputs.Various.ArrayUsingCases+ArrayHolder::.ctor(System.Int32[]).0 state machine start
    \ArrayUsingCases+ArrayHolder::.ctor(Int32[]).0._StateMachine\: process (\Clock\) 
        Variable \ArrayUsingCases+ArrayHolder::.ctor(Int32[]).0._State\: \ArrayUsingCases+ArrayHolder::.ctor(Int32[]).0._States\ := \ArrayUsingCases+ArrayHolder::.ctor(Int32[]).0._State_0\;
        Variable \ArrayUsingCases+ArrayHolder::.ctor(Int32[]).0.this\: \Hast.TestInputs.Various.ArrayUsingCases+ArrayHolder\;
        Variable \ArrayUsingCases+ArrayHolder::.ctor(Int32[]).0.array\: \signed32_Array\(0 to 4) := (others => to_signed(0, 32));
    begin 
        if (rising_edge(\Clock\)) then 
            if (\Reset\ = '1') then 
                -- Synchronous reset
                \ArrayUsingCases+ArrayHolder::.ctor(Int32[]).0._Finished\ <= false;
                \ArrayUsingCases+ArrayHolder::.ctor(Int32[]).0.array.parameter.Out\ <= (others => to_signed(0, 32));
                \ArrayUsingCases+ArrayHolder::.ctor(Int32[]).0._State\ := \ArrayUsingCases+ArrayHolder::.ctor(Int32[]).0._State_0\;
                \ArrayUsingCases+ArrayHolder::.ctor(Int32[]).0.array\ := (others => to_signed(0, 32));
            else 
                case \ArrayUsingCases+ArrayHolder::.ctor(Int32[]).0._State\ is 
                    when \ArrayUsingCases+ArrayHolder::.ctor(Int32[]).0._State_0\ => 
                        -- Start state
                        -- Waiting for the start signal.
                        if (\ArrayUsingCases+ArrayHolder::.ctor(Int32[]).0._Started\ = true) then 
                            \ArrayUsingCases+ArrayHolder::.ctor(Int32[]).0._State\ := \ArrayUsingCases+ArrayHolder::.ctor(Int32[]).0._State_2\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \ArrayUsingCases+ArrayHolder::.ctor(Int32[]).0._State_1\ => 
                        -- Final state
                        -- Signaling finished until Started is pulled back to false, then returning to the start state.
                        if (\ArrayUsingCases+ArrayHolder::.ctor(Int32[]).0._Started\ = true) then 
                            \ArrayUsingCases+ArrayHolder::.ctor(Int32[]).0._Finished\ <= true;
                        else 
                            \ArrayUsingCases+ArrayHolder::.ctor(Int32[]).0._Finished\ <= false;
                            \ArrayUsingCases+ArrayHolder::.ctor(Int32[]).0._State\ := \ArrayUsingCases+ArrayHolder::.ctor(Int32[]).0._State_0\;
                        end if;
                        -- Writing back out-flowing parameters so any changes made in this state machine will be reflected in the invoking one too.
                        \ArrayUsingCases+ArrayHolder::.ctor(Int32[]).0.this.parameter.Out\ <= \ArrayUsingCases+ArrayHolder::.ctor(Int32[]).0.this\;
                        \ArrayUsingCases+ArrayHolder::.ctor(Int32[]).0.array.parameter.Out\ <= \ArrayUsingCases+ArrayHolder::.ctor(Int32[]).0.array\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \ArrayUsingCases+ArrayHolder::.ctor(Int32[]).0._State_2\ => 
                        \ArrayUsingCases+ArrayHolder::.ctor(Int32[]).0.this\ := \ArrayUsingCases+ArrayHolder::.ctor(Int32[]).0.this.parameter.In\;
                        \ArrayUsingCases+ArrayHolder::.ctor(Int32[]).0.array\ := \ArrayUsingCases+ArrayHolder::.ctor(Int32[]).0.array.parameter.In\;
                        -- The following section was transformed from the .NET statement below:
                        -- @this.Array = array;
                        -- 
                        \ArrayUsingCases+ArrayHolder::.ctor(Int32[]).0.this\.\Array\ := \ArrayUsingCases+ArrayHolder::.ctor(Int32[]).0.array\;
                        \ArrayUsingCases+ArrayHolder::.ctor(Int32[]).0._State\ := \ArrayUsingCases+ArrayHolder::.ctor(Int32[]).0._State_1\;
                        -- Clock cycles needed to complete this state (approximation): 0
                end case;
            end if;
        end if;
    end process;
    -- System.Void Hast.TestInputs.Various.ArrayUsingCases+ArrayHolder::.ctor(System.Int32[]).0 state machine end


    -- System.Void Hast.TestInputs.Various.ArrayUsingCases::PassArrayToConstructor().0 state machine start
    \ArrayUsingCases::PassArrayToConstructor().0._StateMachine\: process (\Clock\) 
        Variable \ArrayUsingCases::PassArrayToConstructor().0._State\: \ArrayUsingCases::PassArrayToConstructor().0._States\ := \ArrayUsingCases::PassArrayToConstructor().0._State_0\;
        Variable \ArrayUsingCases::PassArrayToConstructor().0.array\: \signed32_Array\(0 to 4) := (others => to_signed(0, 32));
        Variable \ArrayUsingCases::PassArrayToConstructor().0.arrayHolder\: \Hast.TestInputs.Various.ArrayUsingCases+ArrayHolder\;
        Variable \ArrayUsingCases::PassArrayToConstructor().0.num\: signed(31 downto 0) := to_signed(0, 32);
    begin 
        if (rising_edge(\Clock\)) then 
            if (\Reset\ = '1') then 
                -- Synchronous reset
                \ArrayUsingCases::PassArrayToConstructor().0._Finished\ <= false;
                \ArrayUsingCases::PassArrayToConstructor().0.ArrayUsingCases+ArrayHolder::.ctor(Int32[]).array.parameter.Out.0\ <= (others => to_signed(0, 32));
                \ArrayUsingCases::PassArrayToConstructor().0.ArrayUsingCases+ArrayHolder::.ctor(Int32[])._Started.0\ <= false;
                \ArrayUsingCases::PassArrayToConstructor().0._State\ := \ArrayUsingCases::PassArrayToConstructor().0._State_0\;
                \ArrayUsingCases::PassArrayToConstructor().0.array\ := (others => to_signed(0, 32));
                \ArrayUsingCases::PassArrayToConstructor().0.num\ := to_signed(0, 32);
            else 
                case \ArrayUsingCases::PassArrayToConstructor().0._State\ is 
                    when \ArrayUsingCases::PassArrayToConstructor().0._State_0\ => 
                        -- Start state
                        -- Waiting for the start signal.
                        if (\ArrayUsingCases::PassArrayToConstructor().0._Started\ = true) then 
                            \ArrayUsingCases::PassArrayToConstructor().0._State\ := \ArrayUsingCases::PassArrayToConstructor().0._State_2\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \ArrayUsingCases::PassArrayToConstructor().0._State_1\ => 
                        -- Final state
                        -- Signaling finished until Started is pulled back to false, then returning to the start state.
                        if (\ArrayUsingCases::PassArrayToConstructor().0._Started\ = true) then 
                            \ArrayUsingCases::PassArrayToConstructor().0._Finished\ <= true;
                        else 
                            \ArrayUsingCases::PassArrayToConstructor().0._Finished\ <= false;
                            \ArrayUsingCases::PassArrayToConstructor().0._State\ := \ArrayUsingCases::PassArrayToConstructor().0._State_0\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \ArrayUsingCases::PassArrayToConstructor().0._State_2\ => 
                        -- The following section was transformed from the .NET statement below:
                        -- int[] array;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- array = new int[5];
                        -- 
                        \ArrayUsingCases::PassArrayToConstructor().0.array\ := (others => to_signed(0, 32));
                        -- The following section was transformed from the .NET statement below:
                        -- ArrayHolder arrayHolder;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- arrayHolder = new ArrayHolder (array);
                        -- 
                        -- Initializing record fields to their defaults.
                        \ArrayUsingCases::PassArrayToConstructor().0.arrayHolder\.\IsNull\ := false;
                        \ArrayUsingCases::PassArrayToConstructor().0.arrayHolder\.\Array\ := (others => to_signed(0, 32));
                        -- Invoking the target's constructor.
                        -- Starting state machine invocation for the following method: System.Void Hast.TestInputs.Various.ArrayUsingCases+ArrayHolder::.ctor(System.Int32[])
                        \ArrayUsingCases::PassArrayToConstructor().0.ArrayUsingCases+ArrayHolder::.ctor(Int32[]).this.parameter.Out.0\ <= \ArrayUsingCases::PassArrayToConstructor().0.arrayHolder\;
                        \ArrayUsingCases::PassArrayToConstructor().0.ArrayUsingCases+ArrayHolder::.ctor(Int32[]).array.parameter.Out.0\ <= \ArrayUsingCases::PassArrayToConstructor().0.array\;
                        \ArrayUsingCases::PassArrayToConstructor().0.ArrayUsingCases+ArrayHolder::.ctor(Int32[])._Started.0\ <= true;
                        \ArrayUsingCases::PassArrayToConstructor().0._State\ := \ArrayUsingCases::PassArrayToConstructor().0._State_3\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \ArrayUsingCases::PassArrayToConstructor().0._State_3\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Void Hast.TestInputs.Various.ArrayUsingCases+ArrayHolder::.ctor(System.Int32[])
                        if (\ArrayUsingCases::PassArrayToConstructor().0.ArrayUsingCases+ArrayHolder::.ctor(Int32[])._Started.0\ = \ArrayUsingCases::PassArrayToConstructor().0.ArrayUsingCases+ArrayHolder::.ctor(Int32[])._Finished.0\) then 
                            \ArrayUsingCases::PassArrayToConstructor().0.ArrayUsingCases+ArrayHolder::.ctor(Int32[])._Started.0\ <= false;
                            \ArrayUsingCases::PassArrayToConstructor().0.arrayHolder\ := \ArrayUsingCases::PassArrayToConstructor().0.ArrayUsingCases+ArrayHolder::.ctor(Int32[]).this.parameter.In.0\;
                            \ArrayUsingCases::PassArrayToConstructor().0.array\ := \ArrayUsingCases::PassArrayToConstructor().0.ArrayUsingCases+ArrayHolder::.ctor(Int32[]).array.parameter.In.0\;
                            -- The following section was transformed from the .NET statement below:
                            -- int num;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- num = 5;
                            -- 
                            \ArrayUsingCases::PassArrayToConstructor().0.num\ := to_signed(5, 32);
                            \ArrayUsingCases::PassArrayToConstructor().0._State\ := \ArrayUsingCases::PassArrayToConstructor().0._State_1\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                end case;
            end if;
        end if;
    end process;
    -- System.Void Hast.TestInputs.Various.ArrayUsingCases::PassArrayToConstructor().0 state machine end


    -- System.Void Hast.TestInputs.Various.ArrayUsingCases::PassArrayFromMethod().0 state machine start
    \ArrayUsingCases::PassArrayFromMethod().0._StateMachine\: process (\Clock\) 
        Variable \ArrayUsingCases::PassArrayFromMethod().0._State\: \ArrayUsingCases::PassArrayFromMethod().0._States\ := \ArrayUsingCases::PassArrayFromMethod().0._State_0\;
        Variable \ArrayUsingCases::PassArrayFromMethod().0.array\: \signed32_Array\(0 to 4) := (others => to_signed(0, 32));
        Variable \ArrayUsingCases::PassArrayFromMethod().0.return.0\: \signed32_Array\(0 to 4) := (others => to_signed(0, 32));
    begin 
        if (rising_edge(\Clock\)) then 
            if (\Reset\ = '1') then 
                -- Synchronous reset
                \ArrayUsingCases::PassArrayFromMethod().0._Finished\ <= false;
                \ArrayUsingCases::PassArrayFromMethod().0.ArrayUsingCases::ArrayProducingMethod(Int32).arrayLength.parameter.Out.0\ <= to_signed(0, 32);
                \ArrayUsingCases::PassArrayFromMethod().0.ArrayUsingCases::ArrayProducingMethod(Int32)._Started.0\ <= false;
                \ArrayUsingCases::PassArrayFromMethod().0._State\ := \ArrayUsingCases::PassArrayFromMethod().0._State_0\;
                \ArrayUsingCases::PassArrayFromMethod().0.array\ := (others => to_signed(0, 32));
                \ArrayUsingCases::PassArrayFromMethod().0.return.0\ := (others => to_signed(0, 32));
            else 
                case \ArrayUsingCases::PassArrayFromMethod().0._State\ is 
                    when \ArrayUsingCases::PassArrayFromMethod().0._State_0\ => 
                        -- Start state
                        -- Waiting for the start signal.
                        if (\ArrayUsingCases::PassArrayFromMethod().0._Started\ = true) then 
                            \ArrayUsingCases::PassArrayFromMethod().0._State\ := \ArrayUsingCases::PassArrayFromMethod().0._State_2\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \ArrayUsingCases::PassArrayFromMethod().0._State_1\ => 
                        -- Final state
                        -- Signaling finished until Started is pulled back to false, then returning to the start state.
                        if (\ArrayUsingCases::PassArrayFromMethod().0._Started\ = true) then 
                            \ArrayUsingCases::PassArrayFromMethod().0._Finished\ <= true;
                        else 
                            \ArrayUsingCases::PassArrayFromMethod().0._Finished\ <= false;
                            \ArrayUsingCases::PassArrayFromMethod().0._State\ := \ArrayUsingCases::PassArrayFromMethod().0._State_0\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \ArrayUsingCases::PassArrayFromMethod().0._State_2\ => 
                        -- The following section was transformed from the .NET statement below:
                        -- int[] array;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- array = this.ArrayProducingMethod (5);
                        -- 
                        -- Starting state machine invocation for the following method: System.Int32[] Hast.TestInputs.Various.ArrayUsingCases::ArrayProducingMethod(System.Int32)
                        \ArrayUsingCases::PassArrayFromMethod().0.ArrayUsingCases::ArrayProducingMethod(Int32).arrayLength.parameter.Out.0\ <= to_signed(5, 32);
                        \ArrayUsingCases::PassArrayFromMethod().0.ArrayUsingCases::ArrayProducingMethod(Int32)._Started.0\ <= true;
                        \ArrayUsingCases::PassArrayFromMethod().0._State\ := \ArrayUsingCases::PassArrayFromMethod().0._State_3\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \ArrayUsingCases::PassArrayFromMethod().0._State_3\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Int32[] Hast.TestInputs.Various.ArrayUsingCases::ArrayProducingMethod(System.Int32)
                        if (\ArrayUsingCases::PassArrayFromMethod().0.ArrayUsingCases::ArrayProducingMethod(Int32)._Started.0\ = \ArrayUsingCases::PassArrayFromMethod().0.ArrayUsingCases::ArrayProducingMethod(Int32)._Finished.0\) then 
                            \ArrayUsingCases::PassArrayFromMethod().0.ArrayUsingCases::ArrayProducingMethod(Int32)._Started.0\ <= false;
                            \ArrayUsingCases::PassArrayFromMethod().0.return.0\ := \ArrayUsingCases::PassArrayFromMethod().0.ArrayUsingCases::ArrayProducingMethod(Int32).return.0\;
                            \ArrayUsingCases::PassArrayFromMethod().0.array\ := \ArrayUsingCases::PassArrayFromMethod().0.return.0\;
                            \ArrayUsingCases::PassArrayFromMethod().0._State\ := \ArrayUsingCases::PassArrayFromMethod().0._State_1\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                end case;
            end if;
        end if;
    end process;
    -- System.Void Hast.TestInputs.Various.ArrayUsingCases::PassArrayFromMethod().0 state machine end


    -- System.Int32[] Hast.TestInputs.Various.ArrayUsingCases::ArrayProducingMethod(System.Int32).0 state machine start
    \ArrayUsingCases::ArrayProducingMethod(Int32).0._StateMachine\: process (\Clock\) 
        Variable \ArrayUsingCases::ArrayProducingMethod(Int32).0._State\: \ArrayUsingCases::ArrayProducingMethod(Int32).0._States\ := \ArrayUsingCases::ArrayProducingMethod(Int32).0._State_0\;
        Variable \ArrayUsingCases::ArrayProducingMethod(Int32).0.arrayLength\: signed(31 downto 0) := to_signed(0, 32);
        Variable \ArrayUsingCases::ArrayProducingMethod(Int32).0.array\: \signed32_Array\(0 to 4) := (others => to_signed(0, 32));
    begin 
        if (rising_edge(\Clock\)) then 
            if (\Reset\ = '1') then 
                -- Synchronous reset
                \ArrayUsingCases::ArrayProducingMethod(Int32).0._Finished\ <= false;
                \ArrayUsingCases::ArrayProducingMethod(Int32).0.return\ <= (others => to_signed(0, 32));
                \ArrayUsingCases::ArrayProducingMethod(Int32).0._State\ := \ArrayUsingCases::ArrayProducingMethod(Int32).0._State_0\;
                \ArrayUsingCases::ArrayProducingMethod(Int32).0.arrayLength\ := to_signed(0, 32);
                \ArrayUsingCases::ArrayProducingMethod(Int32).0.array\ := (others => to_signed(0, 32));
            else 
                case \ArrayUsingCases::ArrayProducingMethod(Int32).0._State\ is 
                    when \ArrayUsingCases::ArrayProducingMethod(Int32).0._State_0\ => 
                        -- Start state
                        -- Waiting for the start signal.
                        if (\ArrayUsingCases::ArrayProducingMethod(Int32).0._Started\ = true) then 
                            \ArrayUsingCases::ArrayProducingMethod(Int32).0._State\ := \ArrayUsingCases::ArrayProducingMethod(Int32).0._State_2\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \ArrayUsingCases::ArrayProducingMethod(Int32).0._State_1\ => 
                        -- Final state
                        -- Signaling finished until Started is pulled back to false, then returning to the start state.
                        if (\ArrayUsingCases::ArrayProducingMethod(Int32).0._Started\ = true) then 
                            \ArrayUsingCases::ArrayProducingMethod(Int32).0._Finished\ <= true;
                        else 
                            \ArrayUsingCases::ArrayProducingMethod(Int32).0._Finished\ <= false;
                            \ArrayUsingCases::ArrayProducingMethod(Int32).0._State\ := \ArrayUsingCases::ArrayProducingMethod(Int32).0._State_0\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \ArrayUsingCases::ArrayProducingMethod(Int32).0._State_2\ => 
                        \ArrayUsingCases::ArrayProducingMethod(Int32).0.arrayLength\ := \ArrayUsingCases::ArrayProducingMethod(Int32).0.arrayLength.parameter.In\;
                        -- The following section was transformed from the .NET statement below:
                        -- int[] array;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- array = new int[5];
                        -- 
                        \ArrayUsingCases::ArrayProducingMethod(Int32).0.array\ := (others => to_signed(0, 32));
                        -- The following section was transformed from the .NET statement below:
                        -- array [3] = 10;
                        -- 
                        \ArrayUsingCases::ArrayProducingMethod(Int32).0.array\(to_integer(to_signed(3, 32))) := to_signed(10, 32);
                        -- The following section was transformed from the .NET statement below:
                        -- return array;
                        -- 
                        \ArrayUsingCases::ArrayProducingMethod(Int32).0.return\ <= \ArrayUsingCases::ArrayProducingMethod(Int32).0.array\;
                        \ArrayUsingCases::ArrayProducingMethod(Int32).0._State\ := \ArrayUsingCases::ArrayProducingMethod(Int32).0._State_1\;
                        -- Clock cycles needed to complete this state (approximation): 0
                end case;
            end if;
        end if;
    end process;
    -- System.Int32[] Hast.TestInputs.Various.ArrayUsingCases::ArrayProducingMethod(System.Int32).0 state machine end


    -- System.Void Hast.TestInputs.Various.BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(System.Int32).0 state machine start
    \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._StateMachine\: process (\Clock\) 
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\: \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._States\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_0\;
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b\: unsigned(7 downto 0) := to_unsigned(0, 8);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b2\: unsigned(7 downto 0) := to_unsigned(0, 8);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.0\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num2\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.1\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num3\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.2\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num4\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.3\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num5\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.4\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num6\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.5\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.0\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num7\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperande0dec034380243af918edfbb353ffc94df2d5e762f30ac11e56e569fc631ab0d\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperandefb5053f4e77ffd15920919821d1b736d3db1e0fd89b385eef9b7790a8d5a8bd\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.6\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.1\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.7\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.8\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num8\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.9\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num9\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.10\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num10\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.11\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b3\: signed(7 downto 0) := to_signed(0, 8);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num11\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.12\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num12\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.13\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num13\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.14\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num14\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.15\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num15\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.16\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num16\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.17\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.2\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num17\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperande0dec034380243af918edfbb353ffc94df2d5e762f30ac11e56e569fc631ab0d\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperand4c3cf3d35d8c430e76c83773ad4ef9d06066af4ce4171b6ecf9bfec42e53ac0b\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.18\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.3\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.19\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.20\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num18\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.21\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num19\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.22\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num20\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.23\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num21\: signed(15 downto 0) := to_signed(0, 16);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num22\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.24\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num23\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.25\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num24\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.26\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num25\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.27\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num26\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.28\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num27\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.29\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.4\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num28\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperande0dec034380243af918edfbb353ffc94df2d5e762f30ac11e56e569fc631ab0d\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperand486ca49e4664657d55b40163951a093d44b764f3014e198f9d9f5cc683a8d06a\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.30\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.5\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.31\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.32\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num29\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.33\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num30\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.34\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num31\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.35\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num32\: unsigned(15 downto 0) := to_unsigned(0, 16);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num33\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.36\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num34\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.37\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num35\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.38\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num36\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.39\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num37\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.40\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num38\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.41\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.6\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num39\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperande0dec034380243af918edfbb353ffc94df2d5e762f30ac11e56e569fc631ab0d\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperandac2d84469251a7f2b094378d1bb4e487b3a02527d578d9b4bf7f070b2adad76c\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.42\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.7\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.43\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.44\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num40\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.45\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num41\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.46\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num42\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.47\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num43\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.48\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num44\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.49\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num45\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.50\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num46\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.51\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num47\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.52\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num48\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.53\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.8\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num49\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperande0dec034380243af918edfbb353ffc94df2d5e762f30ac11e56e569fc631ab0d\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.54\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.9\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.55\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.56\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num50\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.57\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num51\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.58\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num52\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.59\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num53\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.60\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num54\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.61\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num55\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.62\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num56\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.63\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num57\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.64\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num58\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.65\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.10\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num59\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperandfedb548b6bc02115814b6f22cee148c23d5b2d4ad3733b1fa59f9d6abc514958\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperand53fc996822df2ca6c8221d7a30b00205ac201f3c5c0311b48f63e126ebd888da\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.66\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.11\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.67\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.68\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num60\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.69\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num61\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.70\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num62\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.71\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num63\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num64\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.72\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num65\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.73\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num66\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.74\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num67\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.75\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num68\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.76\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num69\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.77\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.12\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num70\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperand90c71211fa3a2c465400d59ca0094459fa91c3f298657cbf0e7ddf3843a93ccd\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.78\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.13\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.79\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.80\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num71\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.81\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num72\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.82\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num73\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.83\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num74\: unsigned(63 downto 0) := to_unsigned(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num75\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.84\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num76\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.85\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num77\: unsigned(63 downto 0) := to_unsigned(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.86\: unsigned(63 downto 0) := to_unsigned(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num78\: unsigned(63 downto 0) := to_unsigned(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.87\: unsigned(63 downto 0) := to_unsigned(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num79\: unsigned(63 downto 0) := to_unsigned(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.88\: unsigned(63 downto 0) := to_unsigned(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num80\: unsigned(63 downto 0) := to_unsigned(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.89\: unsigned(63 downto 0) := to_unsigned(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.14\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num81\: unsigned(63 downto 0) := to_unsigned(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperandb2bb265c0c6ee21348307caac84b9b47c1e6ebb0c6581657022886ab4c248eba\: unsigned(63 downto 0) := to_unsigned(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.90\: unsigned(63 downto 0) := to_unsigned(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.15\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.91\: unsigned(63 downto 0) := to_unsigned(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.92\: unsigned(63 downto 0) := to_unsigned(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num82\: unsigned(63 downto 0) := to_unsigned(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.93\: unsigned(63 downto 0) := to_unsigned(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num83\: unsigned(63 downto 0) := to_unsigned(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.94\: unsigned(63 downto 0) := to_unsigned(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num84\: unsigned(63 downto 0) := to_unsigned(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.95\: unsigned(63 downto 0) := to_unsigned(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b4\: signed(7 downto 0) := to_signed(0, 8);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num85\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.96\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num86\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.97\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num87\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.98\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num88\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.99\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num89\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.100\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num90\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.101\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.16\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num91\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperand6d8cede8d70111ca361a1985df79c723b7ce711b62ea690c648a953fc49f8346\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperandefb5053f4e77ffd15920919821d1b736d3db1e0fd89b385eef9b7790a8d5a8bd\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.102\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.17\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.103\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.104\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num92\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.105\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num93\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.106\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num94\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.107\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num95\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.108\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num96\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.109\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num97\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.110\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num98\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.111\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num99\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.112\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num100\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.113\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.18\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num101\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperandf7fd36c5f3c36a06296e55f55058938d5ce4cc83d5be052090acaa625b6f19c2\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperand68798c761018f1346ae01a4a965252f4d790df620e22a5fd736220a79a7f0b21\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.114\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.19\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.115\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.116\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num102\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.117\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num103\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.118\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num104\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.119\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num105\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.120\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num106\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.121\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num107\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.122\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num108\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.123\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num109\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.124\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num110\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.125\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.20\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num111\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperandf7fd36c5f3c36a06296e55f55058938d5ce4cc83d5be052090acaa625b6f19c2\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperandc5ee9b088dd78f02d0eea0801ee05c33005011bf73db14965ef1c5f8b39119ce\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.126\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.21\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.127\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.128\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num112\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.129\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num113\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.130\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num114\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.131\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num115\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.132\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num116\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.133\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num117\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.134\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num118\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.135\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num119\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.136\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num120\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.137\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.22\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num121\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperand6d8cede8d70111ca361a1985df79c723b7ce711b62ea690c648a953fc49f8346\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperandac2d84469251a7f2b094378d1bb4e487b3a02527d578d9b4bf7f070b2adad76c\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.138\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.23\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.139\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.140\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num122\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.141\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num123\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.142\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num124\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.143\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num125\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.144\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num126\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.145\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num127\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.146\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num128\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.147\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num129\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.148\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num130\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.149\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.24\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num131\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperandf7fd36c5f3c36a06296e55f55058938d5ce4cc83d5be052090acaa625b6f19c2\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperand55586d2b42b18b95e7ea5915e9a18ecf4963523e9143b4e67cef115719e52a29\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.150\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.25\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.151\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.152\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num132\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.153\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num133\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.154\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num134\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.155\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num135\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.156\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num136\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.157\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num137\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.158\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num138\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.159\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num139\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.160\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num140\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.161\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.26\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num141\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperandfef2df461637cb1cc130c6268d1711bc86ab19c8fb374e86b74bd0a2498a54ab\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperand838dc20449138906a7f16bcd0cca3e401ab50dd9612c97ebb95583809f2e8b4d\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.162\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.27\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.163\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.164\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num142\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.165\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num143\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.166\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num144\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.167\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num145\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.168\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num146\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.169\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num147\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.170\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num148\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.171\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num149\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.172\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num150\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.173\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.28\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num151\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperand912e68ba2644f768a30eaf25875bd9a02d956bfcff3422a00bbbfd004fa4af61\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.174\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.29\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.175\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.176\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num152\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.177\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num153\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.178\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num154\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.179\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num155\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.180\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num156\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.181\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num157\: signed(15 downto 0) := to_signed(0, 16);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num158\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.182\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num159\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.183\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num160\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.184\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num161\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.185\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num162\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.186\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num163\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.187\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.30\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num164\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperand033b366fa1571fbf8ca63821ade5469843d14d3351dc061d7fb3e08d605c96d5\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperandefb5053f4e77ffd15920919821d1b736d3db1e0fd89b385eef9b7790a8d5a8bd\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.188\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.31\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.189\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.190\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num165\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.191\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num166\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.192\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num167\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.193\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num168\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.194\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num169\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.195\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num170\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.196\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num171\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.197\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num172\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.198\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num173\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.199\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.32\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num174\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperandcede095fbb8c8658418d12c0d44ff3490e2e194ada1ee6b234f52ae2523bcc92\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperand68798c761018f1346ae01a4a965252f4d790df620e22a5fd736220a79a7f0b21\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.200\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.33\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.201\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.202\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num175\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.203\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num176\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.204\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num177\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.205\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num178\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.206\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num179\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.207\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num180\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.208\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num181\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.209\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num182\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.210\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num183\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.211\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.34\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num184\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperandcede095fbb8c8658418d12c0d44ff3490e2e194ada1ee6b234f52ae2523bcc92\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperandc5ee9b088dd78f02d0eea0801ee05c33005011bf73db14965ef1c5f8b39119ce\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.212\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.35\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.213\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.214\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num185\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.215\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num186\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.216\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num187\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.217\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num188\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.218\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num189\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.219\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num190\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.220\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num191\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.221\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num192\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.222\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num193\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.223\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.36\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num194\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperand033b366fa1571fbf8ca63821ade5469843d14d3351dc061d7fb3e08d605c96d5\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperandac2d84469251a7f2b094378d1bb4e487b3a02527d578d9b4bf7f070b2adad76c\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.224\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.37\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.225\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.226\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num195\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.227\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num196\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.228\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num197\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.229\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num198\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.230\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num199\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.231\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num200\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.232\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num201\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.233\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num202\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.234\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num203\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.235\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.38\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num204\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperandcede095fbb8c8658418d12c0d44ff3490e2e194ada1ee6b234f52ae2523bcc92\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperand55586d2b42b18b95e7ea5915e9a18ecf4963523e9143b4e67cef115719e52a29\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.236\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.39\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.237\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.238\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num205\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.239\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num206\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.240\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num207\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.241\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num208\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.242\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num209\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.243\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num210\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.244\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num211\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.245\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num212\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.246\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num213\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.247\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.40\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num214\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperand421be12b093d27d26687a865d4e11d5515aa3ecae4344c565491aa5dd5d91929\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperand838dc20449138906a7f16bcd0cca3e401ab50dd9612c97ebb95583809f2e8b4d\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.248\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.41\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.249\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.250\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num215\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.251\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num216\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.252\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num217\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.253\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num218\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.254\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num219\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.255\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num220\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.256\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num221\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.257\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num222\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.258\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num223\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.259\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.42\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num224\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperandb8bf5e410ff3b8d766d9d35325c080b4e4b775b7c29e622566e012b2b2d83cc3\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.260\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.43\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.261\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.262\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num225\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.263\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num226\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.264\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num227\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.265\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num228\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.266\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num229\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.267\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num230\: unsigned(15 downto 0) := to_unsigned(0, 16);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num231\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.268\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num232\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.269\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num233\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.270\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num234\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.271\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num235\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.272\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num236\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.273\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.44\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num237\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperand697c42756dcb424b7508ecb28c70ac2d4b136b19af6534cd788dd93e090fa8a8\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperandefb5053f4e77ffd15920919821d1b736d3db1e0fd89b385eef9b7790a8d5a8bd\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.274\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.45\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.275\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.276\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num238\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.277\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num239\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.278\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num240\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.279\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num241\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.280\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num242\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.281\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num243\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.282\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num244\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.283\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num245\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.284\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num246\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.285\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.46\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num247\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperand697c42756dcb424b7508ecb28c70ac2d4b136b19af6534cd788dd93e090fa8a8\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperand4c3cf3d35d8c430e76c83773ad4ef9d06066af4ce4171b6ecf9bfec42e53ac0b\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.286\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.47\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.287\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.288\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num248\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.289\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num249\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.290\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num250\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.291\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num251\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.292\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num252\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.293\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num253\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.294\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num254\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.295\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num255\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.296\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num256\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.297\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.48\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num257\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperand697c42756dcb424b7508ecb28c70ac2d4b136b19af6534cd788dd93e090fa8a8\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperand486ca49e4664657d55b40163951a093d44b764f3014e198f9d9f5cc683a8d06a\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.298\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.49\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.299\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.300\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num258\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.301\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num259\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.302\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num260\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.303\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num261\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.304\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num262\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.305\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num263\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.306\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num264\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.307\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num265\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.308\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num266\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.309\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.50\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num267\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperand697c42756dcb424b7508ecb28c70ac2d4b136b19af6534cd788dd93e090fa8a8\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperandac2d84469251a7f2b094378d1bb4e487b3a02527d578d9b4bf7f070b2adad76c\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.310\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.51\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.311\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.312\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num268\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.313\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num269\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.314\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num270\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.315\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num271\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.316\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num272\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.317\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num273\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.318\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num274\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.319\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num275\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.320\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num276\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.321\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.52\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num277\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperand697c42756dcb424b7508ecb28c70ac2d4b136b19af6534cd788dd93e090fa8a8\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.322\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.53\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.323\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.324\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num278\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.325\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num279\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.326\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num280\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.327\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num281\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.328\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num282\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.329\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num283\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.330\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num284\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.331\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num285\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.332\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num286\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.333\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.54\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num287\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperand44907e69281d00024cf1973eb10ffde485b2374c89e688546f4a23c25c37b2f1\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperand53fc996822df2ca6c8221d7a30b00205ac201f3c5c0311b48f63e126ebd888da\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.334\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.55\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.335\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.336\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num288\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.337\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num289\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.338\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num290\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.339\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num291\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.340\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num292\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.341\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num293\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.342\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num294\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.343\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num295\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.344\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num296\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.345\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.56\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num297\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperand6a575358c9b91a9821aaaf06a47326a8adb841bbc7a1c7c32cb5d073ad2c05b1\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.346\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.57\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.347\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.348\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num298\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.349\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num299\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.350\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num300\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.351\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num301\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.352\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num302\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.353\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num303\: unsigned(63 downto 0) := to_unsigned(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.354\: unsigned(63 downto 0) := to_unsigned(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num304\: unsigned(63 downto 0) := to_unsigned(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.355\: unsigned(63 downto 0) := to_unsigned(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num305\: unsigned(63 downto 0) := to_unsigned(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.356\: unsigned(63 downto 0) := to_unsigned(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num306\: unsigned(63 downto 0) := to_unsigned(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.357\: unsigned(63 downto 0) := to_unsigned(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.58\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num307\: unsigned(63 downto 0) := to_unsigned(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperandbb992bb061bf48fb71682099b8954f325393ba29862bba027a3cc3dbece20233\: unsigned(63 downto 0) := to_unsigned(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.358\: unsigned(63 downto 0) := to_unsigned(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.59\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.359\: unsigned(63 downto 0) := to_unsigned(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.360\: unsigned(63 downto 0) := to_unsigned(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num308\: unsigned(63 downto 0) := to_unsigned(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.361\: unsigned(63 downto 0) := to_unsigned(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num309\: unsigned(63 downto 0) := to_unsigned(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.362\: unsigned(63 downto 0) := to_unsigned(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num310\: unsigned(63 downto 0) := to_unsigned(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.363\: unsigned(63 downto 0) := to_unsigned(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num311\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.364\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num312\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.365\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num313\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.366\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num314\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.367\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num315\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.368\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num316\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.369\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.60\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num317\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperandefb5053f4e77ffd15920919821d1b736d3db1e0fd89b385eef9b7790a8d5a8bd\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.370\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.61\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.371\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.372\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num318\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.373\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num319\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.374\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num320\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.375\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num321\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.376\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num322\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.377\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num323\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.378\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num324\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.379\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num325\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.380\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num326\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.381\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.62\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num327\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperand55586d2b42b18b95e7ea5915e9a18ecf4963523e9143b4e67cef115719e52a29\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperand68798c761018f1346ae01a4a965252f4d790df620e22a5fd736220a79a7f0b21\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.382\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.63\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.383\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.384\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num328\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.385\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num329\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.386\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num330\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.387\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num331\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.388\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num332\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.389\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num333\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.390\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num334\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.391\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num335\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.392\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num336\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.393\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.64\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num337\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperand55586d2b42b18b95e7ea5915e9a18ecf4963523e9143b4e67cef115719e52a29\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperandc5ee9b088dd78f02d0eea0801ee05c33005011bf73db14965ef1c5f8b39119ce\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.394\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.65\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.395\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.396\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num338\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.397\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num339\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.398\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num340\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.399\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num341\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.400\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num342\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.401\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num343\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.402\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num344\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.403\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num345\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.404\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num346\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.405\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.66\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num347\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperandac2d84469251a7f2b094378d1bb4e487b3a02527d578d9b4bf7f070b2adad76c\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.406\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.67\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.407\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.408\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num348\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.409\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num349\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.410\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num350\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.411\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num351\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.412\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num352\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.413\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num353\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.414\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num354\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.415\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num355\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.416\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num356\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.417\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.68\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num357\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.418\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.69\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.419\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.420\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num358\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.421\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num359\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.422\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num360\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.423\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num361\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.424\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num362\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.425\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num363\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.426\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num364\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.427\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num365\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.428\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num366\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.429\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.70\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num367\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperanddae5fcb165e7e861d625046bd776828c666cfb77620adc781e7130255f7b6e2f\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperand838dc20449138906a7f16bcd0cca3e401ab50dd9612c97ebb95583809f2e8b4d\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.430\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.71\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.431\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.432\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num368\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.433\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num369\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.434\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num370\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.435\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num371\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.436\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num372\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.437\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num373\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.438\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num374\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.439\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num375\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.440\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num376\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.441\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.72\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num377\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperand4bc89824826eaf4fc488736139d661507595ff0e316afc22e8c21ebdfa9bf28e\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.442\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.73\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.443\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.444\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num378\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.445\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num379\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.446\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num380\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.447\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num381\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.448\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num382\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.449\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num383\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.450\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num384\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.451\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num385\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.452\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num386\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.453\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num387\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.454\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num388\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.455\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.74\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num389\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperand53fc996822df2ca6c8221d7a30b00205ac201f3c5c0311b48f63e126ebd888da\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperandf016d2c872a88a1d3b3a4dd56c5722e1ee378e8b0ec44f88bd08722d64a9331c\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.456\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.75\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.457\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.458\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num390\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.459\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num391\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.460\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num392\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.461\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num393\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.462\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num394\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.463\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num395\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.464\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num396\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.465\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num397\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.466\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num398\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.467\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.76\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num399\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperand838dc20449138906a7f16bcd0cca3e401ab50dd9612c97ebb95583809f2e8b4d\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperand6bf900f755d22c2c9b9316dbf2e413290b12bacf8bd77ca7f46fdf4612ed5a99\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.468\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.77\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.469\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.470\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num400\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.471\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num401\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.472\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num402\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.473\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num403\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.474\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num404\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.475\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num405\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.476\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num406\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.477\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num407\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.478\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num408\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.479\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.78\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num409\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperand838dc20449138906a7f16bcd0cca3e401ab50dd9612c97ebb95583809f2e8b4d\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperand1587b7d1f92df4bc6d9cc052aceb74de89ea81aae088961b0f5b83ac2344ccc3\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.480\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.79\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.481\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.482\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num410\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.483\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num411\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.484\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num412\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.485\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num413\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.486\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num414\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.487\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num415\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.488\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num416\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.489\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num417\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.490\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num418\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.491\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.80\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num419\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperand53fc996822df2ca6c8221d7a30b00205ac201f3c5c0311b48f63e126ebd888da\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperand232b174c22f225c10c6d077d3b9dc1cc6e686b5fcae8f20b6e2d621a016f82a4\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.492\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.81\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.493\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.494\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num420\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.495\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num421\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.496\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num422\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.497\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num423\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.498\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num424\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.499\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num425\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.500\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num426\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.501\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num427\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.502\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num428\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.503\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.82\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num429\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperand838dc20449138906a7f16bcd0cca3e401ab50dd9612c97ebb95583809f2e8b4d\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperanddae5fcb165e7e861d625046bd776828c666cfb77620adc781e7130255f7b6e2f\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.504\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.83\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.505\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.506\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num430\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.507\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num431\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.508\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num432\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.509\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num433\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.510\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num434\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.511\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num435\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.512\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num436\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.513\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num437\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.514\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num438\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.515\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.84\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num439\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperand53fc996822df2ca6c8221d7a30b00205ac201f3c5c0311b48f63e126ebd888da\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperand53fc996822df2ca6c8221d7a30b00205ac201f3c5c0311b48f63e126ebd888da\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.516\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.85\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.517\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.518\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num440\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.519\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num441\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.520\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num442\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.521\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num443\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.522\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num444\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.523\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num445\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.524\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num446\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.525\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num447\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.526\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num448\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.527\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.86\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num449\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperand838dc20449138906a7f16bcd0cca3e401ab50dd9612c97ebb95583809f2e8b4d\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.528\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.87\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.529\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.530\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num450\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.531\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num451\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.532\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num452\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.533\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num453\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.534\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num454\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.535\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num455\: unsigned(63 downto 0) := to_unsigned(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.536\: unsigned(63 downto 0) := to_unsigned(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num456\: unsigned(63 downto 0) := to_unsigned(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.537\: unsigned(63 downto 0) := to_unsigned(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num457\: unsigned(63 downto 0) := to_unsigned(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.538\: unsigned(63 downto 0) := to_unsigned(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num458\: unsigned(63 downto 0) := to_unsigned(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.539\: unsigned(63 downto 0) := to_unsigned(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.88\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num459\: unsigned(63 downto 0) := to_unsigned(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperande025c253aa170f0ff3164efe3aeca6fef8214365534775fffe1d555e2bcc3eb9\: unsigned(63 downto 0) := to_unsigned(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.540\: unsigned(63 downto 0) := to_unsigned(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.89\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.541\: unsigned(63 downto 0) := to_unsigned(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.542\: unsigned(63 downto 0) := to_unsigned(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num460\: unsigned(63 downto 0) := to_unsigned(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.543\: unsigned(63 downto 0) := to_unsigned(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num461\: unsigned(63 downto 0) := to_unsigned(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.544\: unsigned(63 downto 0) := to_unsigned(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num462\: unsigned(63 downto 0) := to_unsigned(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.545\: unsigned(63 downto 0) := to_unsigned(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num463\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num464\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.546\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num465\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.547\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num466\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.548\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num467\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.549\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num468\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.550\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num469\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.551\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.90\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num470\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperandb6423718107955c2ecf45b7e5d988ed436e150a113e441457863975c450572ce\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.552\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.91\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.553\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.554\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num471\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.555\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num472\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.556\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num473\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.557\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num474\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.558\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num475\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.559\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num476\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.560\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num477\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.561\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num478\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.562\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num479\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.563\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.92\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num480\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperand1346e3fa7e3fef52080fc3f08a5ff36da6ab3a15eadde4d8269b43c5e4ddcb1c\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.564\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.93\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.565\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.566\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num481\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.567\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num482\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.568\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num483\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.569\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num484\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.570\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num485\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.571\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num486\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.572\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num487\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.573\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num488\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.574\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num489\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.575\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.94\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num490\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperand39f189a5a6fd49d5a3f6bd80d1ceee60bf027f1d81c8a0b1eafffc7901b654ad\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.576\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.95\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.577\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.578\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num491\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.579\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num492\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.580\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num493\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.581\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num494\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.582\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num495\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.583\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num496\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.584\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num497\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.585\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num498\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.586\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num499\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.587\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.96\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num500\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperande75b4bacd4211a21f9776359dfc373b08cfbd7b6164b8b1e2d68af31c1f9117d\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.588\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.97\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.589\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.590\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num501\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.591\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num502\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.592\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num503\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.593\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num504\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.594\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num505\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.595\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num506\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.596\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num507\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.597\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num508\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.598\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num509\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.599\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.98\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num510\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperand4bc89824826eaf4fc488736139d661507595ff0e316afc22e8c21ebdfa9bf28e\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.600\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.99\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.601\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.602\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num511\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.603\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num512\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.604\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num513\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.605\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num514\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.606\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num515\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.607\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num516\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.608\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num517\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.609\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num518\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.610\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num519\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.611\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.100\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num520\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperand838dc20449138906a7f16bcd0cca3e401ab50dd9612c97ebb95583809f2e8b4d\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.612\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.101\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.613\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.614\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num521\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.615\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num522\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.616\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num523\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.617\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num524\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.618\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num525\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.619\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num526\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.620\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num527\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.621\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num528\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.622\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num529\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.623\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.102\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num530\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.624\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.103\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.625\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.626\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num531\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.627\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num532\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.628\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num533\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.629\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num534\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.630\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num535\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.631\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num536\: unsigned(63 downto 0) := to_unsigned(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num537\: unsigned(63 downto 0) := to_unsigned(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.632\: unsigned(63 downto 0) := to_unsigned(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num538\: unsigned(63 downto 0) := to_unsigned(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.633\: unsigned(63 downto 0) := to_unsigned(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num539\: unsigned(63 downto 0) := to_unsigned(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.634\: unsigned(63 downto 0) := to_unsigned(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num540\: unsigned(63 downto 0) := to_unsigned(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.635\: unsigned(63 downto 0) := to_unsigned(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num541\: unsigned(63 downto 0) := to_unsigned(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.636\: unsigned(63 downto 0) := to_unsigned(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num542\: unsigned(63 downto 0) := to_unsigned(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.637\: unsigned(63 downto 0) := to_unsigned(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.104\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num543\: unsigned(63 downto 0) := to_unsigned(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperandd41a858f0a0da47bf5fee838effa2f00316370d206099aadf1a55a416664eab9\: unsigned(63 downto 0) := to_unsigned(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.638\: unsigned(63 downto 0) := to_unsigned(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.105\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.639\: unsigned(63 downto 0) := to_unsigned(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.640\: unsigned(63 downto 0) := to_unsigned(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num544\: unsigned(63 downto 0) := to_unsigned(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.641\: unsigned(63 downto 0) := to_unsigned(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num545\: unsigned(63 downto 0) := to_unsigned(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.642\: unsigned(63 downto 0) := to_unsigned(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num546\: unsigned(63 downto 0) := to_unsigned(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.643\: unsigned(63 downto 0) := to_unsigned(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num547\: unsigned(63 downto 0) := to_unsigned(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.644\: unsigned(63 downto 0) := to_unsigned(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num548\: unsigned(63 downto 0) := to_unsigned(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.645\: unsigned(63 downto 0) := to_unsigned(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num549\: unsigned(63 downto 0) := to_unsigned(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.646\: unsigned(63 downto 0) := to_unsigned(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num550\: unsigned(63 downto 0) := to_unsigned(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.647\: unsigned(63 downto 0) := to_unsigned(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num551\: unsigned(63 downto 0) := to_unsigned(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.648\: unsigned(63 downto 0) := to_unsigned(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num552\: unsigned(63 downto 0) := to_unsigned(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.649\: unsigned(63 downto 0) := to_unsigned(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num553\: unsigned(63 downto 0) := to_unsigned(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.650\: unsigned(63 downto 0) := to_unsigned(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num554\: unsigned(63 downto 0) := to_unsigned(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.651\: unsigned(63 downto 0) := to_unsigned(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num555\: unsigned(63 downto 0) := to_unsigned(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.652\: unsigned(63 downto 0) := to_unsigned(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num556\: unsigned(63 downto 0) := to_unsigned(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.653\: unsigned(63 downto 0) := to_unsigned(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.106\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num557\: unsigned(63 downto 0) := to_unsigned(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperand0cef0b10925aa267884ea977d8f49c176c5a99f0b399413db8459d9d88797467\: unsigned(63 downto 0) := to_unsigned(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.654\: unsigned(63 downto 0) := to_unsigned(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.107\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.655\: unsigned(63 downto 0) := to_unsigned(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.656\: unsigned(63 downto 0) := to_unsigned(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num558\: unsigned(63 downto 0) := to_unsigned(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.657\: unsigned(63 downto 0) := to_unsigned(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num559\: unsigned(63 downto 0) := to_unsigned(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.658\: unsigned(63 downto 0) := to_unsigned(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num560\: unsigned(63 downto 0) := to_unsigned(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.659\: unsigned(63 downto 0) := to_unsigned(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num561\: unsigned(63 downto 0) := to_unsigned(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.660\: unsigned(63 downto 0) := to_unsigned(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num562\: unsigned(63 downto 0) := to_unsigned(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.661\: unsigned(63 downto 0) := to_unsigned(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num563\: unsigned(63 downto 0) := to_unsigned(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.662\: unsigned(63 downto 0) := to_unsigned(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num564\: unsigned(63 downto 0) := to_unsigned(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.663\: unsigned(63 downto 0) := to_unsigned(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num565\: unsigned(63 downto 0) := to_unsigned(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.664\: unsigned(63 downto 0) := to_unsigned(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num566\: unsigned(63 downto 0) := to_unsigned(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.665\: unsigned(63 downto 0) := to_unsigned(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num567\: unsigned(63 downto 0) := to_unsigned(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.666\: unsigned(63 downto 0) := to_unsigned(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num568\: unsigned(63 downto 0) := to_unsigned(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.667\: unsigned(63 downto 0) := to_unsigned(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.108\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num569\: unsigned(63 downto 0) := to_unsigned(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperande025c253aa170f0ff3164efe3aeca6fef8214365534775fffe1d555e2bcc3eb9\: unsigned(63 downto 0) := to_unsigned(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.668\: unsigned(63 downto 0) := to_unsigned(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.109\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.669\: unsigned(63 downto 0) := to_unsigned(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.670\: unsigned(63 downto 0) := to_unsigned(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num570\: unsigned(63 downto 0) := to_unsigned(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.671\: unsigned(63 downto 0) := to_unsigned(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num571\: unsigned(63 downto 0) := to_unsigned(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.672\: unsigned(63 downto 0) := to_unsigned(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num572\: unsigned(63 downto 0) := to_unsigned(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.673\: unsigned(63 downto 0) := to_unsigned(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num573\: unsigned(63 downto 0) := to_unsigned(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.674\: unsigned(63 downto 0) := to_unsigned(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num574\: unsigned(63 downto 0) := to_unsigned(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.675\: unsigned(63 downto 0) := to_unsigned(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num575\: unsigned(63 downto 0) := to_unsigned(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.676\: unsigned(63 downto 0) := to_unsigned(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num576\: unsigned(63 downto 0) := to_unsigned(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.677\: unsigned(63 downto 0) := to_unsigned(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num577\: unsigned(63 downto 0) := to_unsigned(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.678\: unsigned(63 downto 0) := to_unsigned(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num578\: unsigned(63 downto 0) := to_unsigned(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.679\: unsigned(63 downto 0) := to_unsigned(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num579\: unsigned(63 downto 0) := to_unsigned(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.680\: unsigned(63 downto 0) := to_unsigned(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num580\: unsigned(63 downto 0) := to_unsigned(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.681\: unsigned(63 downto 0) := to_unsigned(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.110\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num581\: unsigned(63 downto 0) := to_unsigned(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.682\: unsigned(63 downto 0) := to_unsigned(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.111\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.683\: unsigned(63 downto 0) := to_unsigned(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.684\: unsigned(63 downto 0) := to_unsigned(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num582\: unsigned(63 downto 0) := to_unsigned(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.685\: unsigned(63 downto 0) := to_unsigned(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num583\: unsigned(63 downto 0) := to_unsigned(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.686\: unsigned(63 downto 0) := to_unsigned(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num584\: unsigned(63 downto 0) := to_unsigned(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.687\: unsigned(63 downto 0) := to_unsigned(0, 64);
    begin 
        if (rising_edge(\Clock\)) then 
            if (\Reset\ = '1') then 
                -- Synchronous reset
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._Finished\ <= false;
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_0\;
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b\ := to_unsigned(0, 8);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b2\ := to_unsigned(0, 8);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.0\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num2\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.1\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num3\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.2\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num4\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.3\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num5\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.4\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num6\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.5\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.0\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num7\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperande0dec034380243af918edfbb353ffc94df2d5e762f30ac11e56e569fc631ab0d\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperandefb5053f4e77ffd15920919821d1b736d3db1e0fd89b385eef9b7790a8d5a8bd\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.6\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.1\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.7\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.8\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num8\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.9\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num9\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.10\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num10\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.11\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b3\ := to_signed(0, 8);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num11\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.12\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num12\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.13\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num13\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.14\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num14\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.15\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num15\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.16\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num16\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.17\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.2\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num17\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperande0dec034380243af918edfbb353ffc94df2d5e762f30ac11e56e569fc631ab0d\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperand4c3cf3d35d8c430e76c83773ad4ef9d06066af4ce4171b6ecf9bfec42e53ac0b\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.18\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.3\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.19\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.20\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num18\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.21\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num19\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.22\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num20\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.23\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num21\ := to_signed(0, 16);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num22\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.24\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num23\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.25\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num24\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.26\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num25\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.27\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num26\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.28\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num27\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.29\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.4\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num28\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperande0dec034380243af918edfbb353ffc94df2d5e762f30ac11e56e569fc631ab0d\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperand486ca49e4664657d55b40163951a093d44b764f3014e198f9d9f5cc683a8d06a\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.30\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.5\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.31\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.32\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num29\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.33\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num30\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.34\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num31\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.35\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num32\ := to_unsigned(0, 16);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num33\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.36\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num34\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.37\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num35\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.38\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num36\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.39\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num37\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.40\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num38\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.41\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.6\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num39\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperande0dec034380243af918edfbb353ffc94df2d5e762f30ac11e56e569fc631ab0d\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperandac2d84469251a7f2b094378d1bb4e487b3a02527d578d9b4bf7f070b2adad76c\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.42\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.7\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.43\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.44\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num40\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.45\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num41\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.46\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num42\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.47\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num43\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.48\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num44\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.49\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num45\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.50\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num46\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.51\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num47\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.52\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num48\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.53\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.8\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num49\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperande0dec034380243af918edfbb353ffc94df2d5e762f30ac11e56e569fc631ab0d\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.54\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.9\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.55\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.56\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num50\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.57\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num51\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.58\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num52\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.59\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num53\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.60\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num54\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.61\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num55\ := to_unsigned(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.62\ := to_unsigned(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num56\ := to_unsigned(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.63\ := to_unsigned(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num57\ := to_unsigned(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.64\ := to_unsigned(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num58\ := to_unsigned(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.65\ := to_unsigned(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.10\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num59\ := to_unsigned(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperandfedb548b6bc02115814b6f22cee148c23d5b2d4ad3733b1fa59f9d6abc514958\ := to_unsigned(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperand53fc996822df2ca6c8221d7a30b00205ac201f3c5c0311b48f63e126ebd888da\ := to_unsigned(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.66\ := to_unsigned(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.11\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.67\ := to_unsigned(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.68\ := to_unsigned(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num60\ := to_unsigned(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.69\ := to_unsigned(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num61\ := to_unsigned(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.70\ := to_unsigned(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num62\ := to_unsigned(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.71\ := to_unsigned(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num63\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num64\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.72\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num65\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.73\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num66\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.74\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num67\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.75\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num68\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.76\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num69\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.77\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.12\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num70\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperand90c71211fa3a2c465400d59ca0094459fa91c3f298657cbf0e7ddf3843a93ccd\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.78\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.13\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.79\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.80\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num71\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.81\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num72\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.82\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num73\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.83\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num74\ := to_unsigned(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num75\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.84\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num76\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.85\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num77\ := to_unsigned(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.86\ := to_unsigned(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num78\ := to_unsigned(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.87\ := to_unsigned(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num79\ := to_unsigned(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.88\ := to_unsigned(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num80\ := to_unsigned(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.89\ := to_unsigned(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.14\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num81\ := to_unsigned(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperandb2bb265c0c6ee21348307caac84b9b47c1e6ebb0c6581657022886ab4c248eba\ := to_unsigned(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.90\ := to_unsigned(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.15\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.91\ := to_unsigned(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.92\ := to_unsigned(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num82\ := to_unsigned(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.93\ := to_unsigned(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num83\ := to_unsigned(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.94\ := to_unsigned(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num84\ := to_unsigned(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.95\ := to_unsigned(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b4\ := to_signed(0, 8);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num85\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.96\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num86\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.97\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num87\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.98\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num88\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.99\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num89\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.100\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num90\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.101\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.16\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num91\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperand6d8cede8d70111ca361a1985df79c723b7ce711b62ea690c648a953fc49f8346\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperandefb5053f4e77ffd15920919821d1b736d3db1e0fd89b385eef9b7790a8d5a8bd\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.102\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.17\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.103\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.104\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num92\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.105\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num93\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.106\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num94\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.107\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num95\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.108\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num96\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.109\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num97\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.110\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num98\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.111\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num99\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.112\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num100\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.113\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.18\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num101\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperandf7fd36c5f3c36a06296e55f55058938d5ce4cc83d5be052090acaa625b6f19c2\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperand68798c761018f1346ae01a4a965252f4d790df620e22a5fd736220a79a7f0b21\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.114\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.19\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.115\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.116\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num102\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.117\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num103\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.118\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num104\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.119\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num105\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.120\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num106\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.121\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num107\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.122\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num108\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.123\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num109\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.124\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num110\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.125\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.20\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num111\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperandf7fd36c5f3c36a06296e55f55058938d5ce4cc83d5be052090acaa625b6f19c2\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperandc5ee9b088dd78f02d0eea0801ee05c33005011bf73db14965ef1c5f8b39119ce\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.126\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.21\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.127\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.128\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num112\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.129\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num113\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.130\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num114\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.131\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num115\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.132\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num116\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.133\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num117\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.134\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num118\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.135\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num119\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.136\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num120\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.137\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.22\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num121\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperand6d8cede8d70111ca361a1985df79c723b7ce711b62ea690c648a953fc49f8346\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperandac2d84469251a7f2b094378d1bb4e487b3a02527d578d9b4bf7f070b2adad76c\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.138\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.23\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.139\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.140\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num122\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.141\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num123\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.142\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num124\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.143\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num125\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.144\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num126\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.145\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num127\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.146\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num128\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.147\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num129\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.148\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num130\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.149\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.24\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num131\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperandf7fd36c5f3c36a06296e55f55058938d5ce4cc83d5be052090acaa625b6f19c2\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperand55586d2b42b18b95e7ea5915e9a18ecf4963523e9143b4e67cef115719e52a29\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.150\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.25\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.151\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.152\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num132\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.153\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num133\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.154\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num134\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.155\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num135\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.156\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num136\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.157\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num137\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.158\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num138\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.159\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num139\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.160\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num140\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.161\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.26\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num141\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperandfef2df461637cb1cc130c6268d1711bc86ab19c8fb374e86b74bd0a2498a54ab\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperand838dc20449138906a7f16bcd0cca3e401ab50dd9612c97ebb95583809f2e8b4d\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.162\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.27\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.163\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.164\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num142\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.165\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num143\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.166\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num144\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.167\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num145\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.168\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num146\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.169\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num147\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.170\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num148\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.171\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num149\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.172\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num150\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.173\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.28\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num151\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperand912e68ba2644f768a30eaf25875bd9a02d956bfcff3422a00bbbfd004fa4af61\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.174\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.29\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.175\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.176\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num152\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.177\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num153\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.178\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num154\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.179\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num155\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.180\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num156\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.181\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num157\ := to_signed(0, 16);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num158\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.182\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num159\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.183\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num160\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.184\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num161\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.185\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num162\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.186\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num163\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.187\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.30\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num164\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperand033b366fa1571fbf8ca63821ade5469843d14d3351dc061d7fb3e08d605c96d5\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperandefb5053f4e77ffd15920919821d1b736d3db1e0fd89b385eef9b7790a8d5a8bd\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.188\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.31\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.189\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.190\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num165\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.191\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num166\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.192\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num167\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.193\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num168\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.194\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num169\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.195\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num170\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.196\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num171\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.197\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num172\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.198\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num173\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.199\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.32\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num174\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperandcede095fbb8c8658418d12c0d44ff3490e2e194ada1ee6b234f52ae2523bcc92\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperand68798c761018f1346ae01a4a965252f4d790df620e22a5fd736220a79a7f0b21\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.200\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.33\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.201\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.202\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num175\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.203\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num176\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.204\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num177\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.205\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num178\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.206\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num179\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.207\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num180\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.208\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num181\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.209\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num182\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.210\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num183\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.211\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.34\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num184\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperandcede095fbb8c8658418d12c0d44ff3490e2e194ada1ee6b234f52ae2523bcc92\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperandc5ee9b088dd78f02d0eea0801ee05c33005011bf73db14965ef1c5f8b39119ce\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.212\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.35\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.213\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.214\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num185\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.215\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num186\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.216\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num187\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.217\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num188\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.218\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num189\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.219\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num190\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.220\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num191\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.221\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num192\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.222\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num193\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.223\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.36\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num194\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperand033b366fa1571fbf8ca63821ade5469843d14d3351dc061d7fb3e08d605c96d5\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperandac2d84469251a7f2b094378d1bb4e487b3a02527d578d9b4bf7f070b2adad76c\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.224\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.37\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.225\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.226\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num195\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.227\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num196\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.228\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num197\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.229\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num198\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.230\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num199\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.231\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num200\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.232\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num201\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.233\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num202\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.234\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num203\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.235\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.38\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num204\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperandcede095fbb8c8658418d12c0d44ff3490e2e194ada1ee6b234f52ae2523bcc92\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperand55586d2b42b18b95e7ea5915e9a18ecf4963523e9143b4e67cef115719e52a29\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.236\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.39\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.237\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.238\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num205\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.239\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num206\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.240\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num207\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.241\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num208\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.242\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num209\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.243\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num210\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.244\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num211\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.245\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num212\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.246\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num213\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.247\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.40\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num214\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperand421be12b093d27d26687a865d4e11d5515aa3ecae4344c565491aa5dd5d91929\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperand838dc20449138906a7f16bcd0cca3e401ab50dd9612c97ebb95583809f2e8b4d\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.248\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.41\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.249\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.250\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num215\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.251\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num216\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.252\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num217\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.253\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num218\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.254\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num219\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.255\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num220\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.256\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num221\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.257\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num222\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.258\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num223\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.259\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.42\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num224\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperandb8bf5e410ff3b8d766d9d35325c080b4e4b775b7c29e622566e012b2b2d83cc3\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.260\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.43\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.261\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.262\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num225\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.263\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num226\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.264\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num227\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.265\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num228\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.266\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num229\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.267\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num230\ := to_unsigned(0, 16);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num231\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.268\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num232\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.269\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num233\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.270\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num234\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.271\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num235\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.272\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num236\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.273\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.44\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num237\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperand697c42756dcb424b7508ecb28c70ac2d4b136b19af6534cd788dd93e090fa8a8\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperandefb5053f4e77ffd15920919821d1b736d3db1e0fd89b385eef9b7790a8d5a8bd\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.274\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.45\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.275\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.276\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num238\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.277\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num239\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.278\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num240\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.279\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num241\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.280\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num242\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.281\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num243\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.282\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num244\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.283\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num245\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.284\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num246\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.285\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.46\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num247\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperand697c42756dcb424b7508ecb28c70ac2d4b136b19af6534cd788dd93e090fa8a8\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperand4c3cf3d35d8c430e76c83773ad4ef9d06066af4ce4171b6ecf9bfec42e53ac0b\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.286\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.47\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.287\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.288\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num248\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.289\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num249\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.290\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num250\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.291\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num251\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.292\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num252\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.293\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num253\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.294\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num254\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.295\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num255\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.296\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num256\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.297\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.48\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num257\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperand697c42756dcb424b7508ecb28c70ac2d4b136b19af6534cd788dd93e090fa8a8\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperand486ca49e4664657d55b40163951a093d44b764f3014e198f9d9f5cc683a8d06a\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.298\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.49\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.299\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.300\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num258\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.301\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num259\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.302\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num260\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.303\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num261\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.304\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num262\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.305\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num263\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.306\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num264\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.307\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num265\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.308\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num266\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.309\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.50\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num267\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperand697c42756dcb424b7508ecb28c70ac2d4b136b19af6534cd788dd93e090fa8a8\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperandac2d84469251a7f2b094378d1bb4e487b3a02527d578d9b4bf7f070b2adad76c\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.310\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.51\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.311\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.312\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num268\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.313\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num269\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.314\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num270\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.315\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num271\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.316\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num272\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.317\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num273\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.318\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num274\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.319\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num275\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.320\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num276\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.321\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.52\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num277\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperand697c42756dcb424b7508ecb28c70ac2d4b136b19af6534cd788dd93e090fa8a8\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.322\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.53\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.323\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.324\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num278\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.325\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num279\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.326\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num280\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.327\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num281\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.328\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num282\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.329\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num283\ := to_unsigned(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.330\ := to_unsigned(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num284\ := to_unsigned(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.331\ := to_unsigned(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num285\ := to_unsigned(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.332\ := to_unsigned(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num286\ := to_unsigned(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.333\ := to_unsigned(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.54\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num287\ := to_unsigned(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperand44907e69281d00024cf1973eb10ffde485b2374c89e688546f4a23c25c37b2f1\ := to_unsigned(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperand53fc996822df2ca6c8221d7a30b00205ac201f3c5c0311b48f63e126ebd888da\ := to_unsigned(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.334\ := to_unsigned(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.55\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.335\ := to_unsigned(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.336\ := to_unsigned(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num288\ := to_unsigned(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.337\ := to_unsigned(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num289\ := to_unsigned(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.338\ := to_unsigned(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num290\ := to_unsigned(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.339\ := to_unsigned(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num291\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.340\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num292\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.341\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num293\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.342\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num294\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.343\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num295\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.344\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num296\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.345\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.56\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num297\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperand6a575358c9b91a9821aaaf06a47326a8adb841bbc7a1c7c32cb5d073ad2c05b1\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.346\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.57\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.347\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.348\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num298\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.349\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num299\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.350\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num300\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.351\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num301\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.352\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num302\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.353\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num303\ := to_unsigned(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.354\ := to_unsigned(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num304\ := to_unsigned(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.355\ := to_unsigned(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num305\ := to_unsigned(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.356\ := to_unsigned(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num306\ := to_unsigned(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.357\ := to_unsigned(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.58\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num307\ := to_unsigned(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperandbb992bb061bf48fb71682099b8954f325393ba29862bba027a3cc3dbece20233\ := to_unsigned(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.358\ := to_unsigned(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.59\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.359\ := to_unsigned(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.360\ := to_unsigned(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num308\ := to_unsigned(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.361\ := to_unsigned(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num309\ := to_unsigned(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.362\ := to_unsigned(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num310\ := to_unsigned(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.363\ := to_unsigned(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num311\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.364\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num312\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.365\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num313\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.366\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num314\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.367\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num315\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.368\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num316\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.369\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.60\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num317\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperandefb5053f4e77ffd15920919821d1b736d3db1e0fd89b385eef9b7790a8d5a8bd\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.370\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.61\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.371\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.372\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num318\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.373\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num319\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.374\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num320\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.375\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num321\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.376\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num322\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.377\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num323\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.378\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num324\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.379\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num325\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.380\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num326\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.381\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.62\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num327\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperand55586d2b42b18b95e7ea5915e9a18ecf4963523e9143b4e67cef115719e52a29\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperand68798c761018f1346ae01a4a965252f4d790df620e22a5fd736220a79a7f0b21\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.382\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.63\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.383\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.384\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num328\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.385\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num329\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.386\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num330\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.387\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num331\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.388\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num332\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.389\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num333\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.390\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num334\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.391\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num335\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.392\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num336\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.393\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.64\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num337\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperand55586d2b42b18b95e7ea5915e9a18ecf4963523e9143b4e67cef115719e52a29\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperandc5ee9b088dd78f02d0eea0801ee05c33005011bf73db14965ef1c5f8b39119ce\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.394\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.65\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.395\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.396\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num338\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.397\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num339\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.398\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num340\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.399\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num341\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.400\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num342\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.401\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num343\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.402\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num344\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.403\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num345\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.404\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num346\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.405\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.66\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num347\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperandac2d84469251a7f2b094378d1bb4e487b3a02527d578d9b4bf7f070b2adad76c\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.406\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.67\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.407\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.408\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num348\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.409\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num349\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.410\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num350\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.411\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num351\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.412\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num352\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.413\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num353\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.414\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num354\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.415\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num355\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.416\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num356\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.417\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.68\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num357\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.418\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.69\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.419\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.420\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num358\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.421\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num359\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.422\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num360\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.423\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num361\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.424\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num362\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.425\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num363\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.426\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num364\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.427\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num365\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.428\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num366\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.429\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.70\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num367\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperanddae5fcb165e7e861d625046bd776828c666cfb77620adc781e7130255f7b6e2f\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperand838dc20449138906a7f16bcd0cca3e401ab50dd9612c97ebb95583809f2e8b4d\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.430\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.71\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.431\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.432\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num368\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.433\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num369\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.434\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num370\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.435\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num371\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.436\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num372\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.437\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num373\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.438\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num374\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.439\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num375\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.440\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num376\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.441\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.72\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num377\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperand4bc89824826eaf4fc488736139d661507595ff0e316afc22e8c21ebdfa9bf28e\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.442\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.73\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.443\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.444\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num378\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.445\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num379\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.446\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num380\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.447\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num381\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.448\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num382\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.449\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num383\ := to_unsigned(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.450\ := to_unsigned(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num384\ := to_unsigned(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.451\ := to_unsigned(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num385\ := to_unsigned(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.452\ := to_unsigned(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num386\ := to_unsigned(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.453\ := to_unsigned(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num387\ := to_unsigned(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.454\ := to_unsigned(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num388\ := to_unsigned(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.455\ := to_unsigned(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.74\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num389\ := to_unsigned(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperand53fc996822df2ca6c8221d7a30b00205ac201f3c5c0311b48f63e126ebd888da\ := to_unsigned(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperandf016d2c872a88a1d3b3a4dd56c5722e1ee378e8b0ec44f88bd08722d64a9331c\ := to_unsigned(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.456\ := to_unsigned(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.75\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.457\ := to_unsigned(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.458\ := to_unsigned(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num390\ := to_unsigned(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.459\ := to_unsigned(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num391\ := to_unsigned(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.460\ := to_unsigned(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num392\ := to_unsigned(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.461\ := to_unsigned(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num393\ := to_unsigned(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.462\ := to_unsigned(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num394\ := to_unsigned(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.463\ := to_unsigned(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num395\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.464\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num396\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.465\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num397\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.466\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num398\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.467\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.76\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num399\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperand838dc20449138906a7f16bcd0cca3e401ab50dd9612c97ebb95583809f2e8b4d\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperand6bf900f755d22c2c9b9316dbf2e413290b12bacf8bd77ca7f46fdf4612ed5a99\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.468\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.77\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.469\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.470\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num400\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.471\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num401\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.472\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num402\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.473\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num403\ := to_unsigned(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.474\ := to_unsigned(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num404\ := to_unsigned(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.475\ := to_unsigned(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num405\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.476\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num406\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.477\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num407\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.478\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num408\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.479\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.78\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num409\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperand838dc20449138906a7f16bcd0cca3e401ab50dd9612c97ebb95583809f2e8b4d\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperand1587b7d1f92df4bc6d9cc052aceb74de89ea81aae088961b0f5b83ac2344ccc3\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.480\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.79\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.481\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.482\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num410\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.483\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num411\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.484\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num412\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.485\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num413\ := to_unsigned(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.486\ := to_unsigned(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num414\ := to_unsigned(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.487\ := to_unsigned(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num415\ := to_unsigned(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.488\ := to_unsigned(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num416\ := to_unsigned(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.489\ := to_unsigned(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num417\ := to_unsigned(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.490\ := to_unsigned(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num418\ := to_unsigned(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.491\ := to_unsigned(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.80\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num419\ := to_unsigned(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperand53fc996822df2ca6c8221d7a30b00205ac201f3c5c0311b48f63e126ebd888da\ := to_unsigned(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperand232b174c22f225c10c6d077d3b9dc1cc6e686b5fcae8f20b6e2d621a016f82a4\ := to_unsigned(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.492\ := to_unsigned(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.81\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.493\ := to_unsigned(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.494\ := to_unsigned(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num420\ := to_unsigned(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.495\ := to_unsigned(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num421\ := to_unsigned(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.496\ := to_unsigned(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num422\ := to_unsigned(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.497\ := to_unsigned(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num423\ := to_unsigned(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.498\ := to_unsigned(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num424\ := to_unsigned(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.499\ := to_unsigned(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num425\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.500\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num426\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.501\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num427\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.502\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num428\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.503\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.82\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num429\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperand838dc20449138906a7f16bcd0cca3e401ab50dd9612c97ebb95583809f2e8b4d\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperanddae5fcb165e7e861d625046bd776828c666cfb77620adc781e7130255f7b6e2f\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.504\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.83\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.505\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.506\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num430\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.507\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num431\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.508\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num432\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.509\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num433\ := to_unsigned(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.510\ := to_unsigned(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num434\ := to_unsigned(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.511\ := to_unsigned(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num435\ := to_unsigned(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.512\ := to_unsigned(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num436\ := to_unsigned(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.513\ := to_unsigned(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num437\ := to_unsigned(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.514\ := to_unsigned(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num438\ := to_unsigned(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.515\ := to_unsigned(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.84\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num439\ := to_unsigned(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperand53fc996822df2ca6c8221d7a30b00205ac201f3c5c0311b48f63e126ebd888da\ := to_unsigned(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperand53fc996822df2ca6c8221d7a30b00205ac201f3c5c0311b48f63e126ebd888da\ := to_unsigned(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.516\ := to_unsigned(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.85\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.517\ := to_unsigned(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.518\ := to_unsigned(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num440\ := to_unsigned(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.519\ := to_unsigned(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num441\ := to_unsigned(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.520\ := to_unsigned(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num442\ := to_unsigned(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.521\ := to_unsigned(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num443\ := to_unsigned(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.522\ := to_unsigned(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num444\ := to_unsigned(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.523\ := to_unsigned(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num445\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.524\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num446\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.525\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num447\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.526\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num448\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.527\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.86\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num449\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperand838dc20449138906a7f16bcd0cca3e401ab50dd9612c97ebb95583809f2e8b4d\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.528\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.87\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.529\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.530\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num450\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.531\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num451\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.532\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num452\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.533\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num453\ := to_unsigned(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.534\ := to_unsigned(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num454\ := to_unsigned(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.535\ := to_unsigned(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num455\ := to_unsigned(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.536\ := to_unsigned(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num456\ := to_unsigned(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.537\ := to_unsigned(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num457\ := to_unsigned(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.538\ := to_unsigned(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num458\ := to_unsigned(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.539\ := to_unsigned(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.88\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num459\ := to_unsigned(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperande025c253aa170f0ff3164efe3aeca6fef8214365534775fffe1d555e2bcc3eb9\ := to_unsigned(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.540\ := to_unsigned(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.89\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.541\ := to_unsigned(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.542\ := to_unsigned(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num460\ := to_unsigned(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.543\ := to_unsigned(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num461\ := to_unsigned(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.544\ := to_unsigned(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num462\ := to_unsigned(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.545\ := to_unsigned(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num463\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num464\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.546\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num465\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.547\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num466\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.548\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num467\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.549\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num468\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.550\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num469\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.551\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.90\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num470\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperandb6423718107955c2ecf45b7e5d988ed436e150a113e441457863975c450572ce\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.552\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.91\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.553\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.554\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num471\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.555\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num472\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.556\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num473\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.557\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num474\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.558\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num475\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.559\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num476\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.560\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num477\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.561\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num478\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.562\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num479\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.563\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.92\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num480\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperand1346e3fa7e3fef52080fc3f08a5ff36da6ab3a15eadde4d8269b43c5e4ddcb1c\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.564\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.93\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.565\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.566\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num481\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.567\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num482\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.568\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num483\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.569\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num484\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.570\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num485\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.571\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num486\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.572\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num487\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.573\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num488\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.574\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num489\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.575\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.94\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num490\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperand39f189a5a6fd49d5a3f6bd80d1ceee60bf027f1d81c8a0b1eafffc7901b654ad\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.576\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.95\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.577\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.578\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num491\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.579\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num492\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.580\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num493\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.581\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num494\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.582\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num495\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.583\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num496\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.584\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num497\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.585\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num498\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.586\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num499\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.587\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.96\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num500\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperande75b4bacd4211a21f9776359dfc373b08cfbd7b6164b8b1e2d68af31c1f9117d\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.588\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.97\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.589\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.590\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num501\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.591\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num502\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.592\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num503\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.593\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num504\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.594\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num505\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.595\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num506\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.596\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num507\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.597\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num508\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.598\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num509\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.599\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.98\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num510\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperand4bc89824826eaf4fc488736139d661507595ff0e316afc22e8c21ebdfa9bf28e\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.600\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.99\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.601\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.602\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num511\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.603\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num512\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.604\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num513\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.605\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num514\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.606\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num515\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.607\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num516\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.608\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num517\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.609\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num518\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.610\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num519\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.611\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.100\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num520\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperand838dc20449138906a7f16bcd0cca3e401ab50dd9612c97ebb95583809f2e8b4d\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.612\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.101\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.613\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.614\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num521\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.615\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num522\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.616\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num523\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.617\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num524\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.618\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num525\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.619\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num526\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.620\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num527\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.621\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num528\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.622\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num529\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.623\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.102\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num530\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.624\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.103\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.625\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.626\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num531\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.627\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num532\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.628\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num533\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.629\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num534\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.630\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num535\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.631\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num536\ := to_unsigned(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num537\ := to_unsigned(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.632\ := to_unsigned(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num538\ := to_unsigned(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.633\ := to_unsigned(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num539\ := to_unsigned(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.634\ := to_unsigned(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num540\ := to_unsigned(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.635\ := to_unsigned(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num541\ := to_unsigned(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.636\ := to_unsigned(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num542\ := to_unsigned(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.637\ := to_unsigned(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.104\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num543\ := to_unsigned(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperandd41a858f0a0da47bf5fee838effa2f00316370d206099aadf1a55a416664eab9\ := to_unsigned(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.638\ := to_unsigned(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.105\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.639\ := to_unsigned(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.640\ := to_unsigned(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num544\ := to_unsigned(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.641\ := to_unsigned(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num545\ := to_unsigned(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.642\ := to_unsigned(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num546\ := to_unsigned(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.643\ := to_unsigned(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num547\ := to_unsigned(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.644\ := to_unsigned(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num548\ := to_unsigned(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.645\ := to_unsigned(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num549\ := to_unsigned(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.646\ := to_unsigned(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num550\ := to_unsigned(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.647\ := to_unsigned(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num551\ := to_unsigned(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.648\ := to_unsigned(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num552\ := to_unsigned(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.649\ := to_unsigned(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num553\ := to_unsigned(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.650\ := to_unsigned(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num554\ := to_unsigned(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.651\ := to_unsigned(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num555\ := to_unsigned(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.652\ := to_unsigned(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num556\ := to_unsigned(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.653\ := to_unsigned(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.106\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num557\ := to_unsigned(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperand0cef0b10925aa267884ea977d8f49c176c5a99f0b399413db8459d9d88797467\ := to_unsigned(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.654\ := to_unsigned(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.107\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.655\ := to_unsigned(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.656\ := to_unsigned(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num558\ := to_unsigned(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.657\ := to_unsigned(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num559\ := to_unsigned(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.658\ := to_unsigned(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num560\ := to_unsigned(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.659\ := to_unsigned(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num561\ := to_unsigned(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.660\ := to_unsigned(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num562\ := to_unsigned(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.661\ := to_unsigned(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num563\ := to_unsigned(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.662\ := to_unsigned(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num564\ := to_unsigned(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.663\ := to_unsigned(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num565\ := to_unsigned(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.664\ := to_unsigned(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num566\ := to_unsigned(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.665\ := to_unsigned(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num567\ := to_unsigned(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.666\ := to_unsigned(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num568\ := to_unsigned(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.667\ := to_unsigned(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.108\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num569\ := to_unsigned(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperande025c253aa170f0ff3164efe3aeca6fef8214365534775fffe1d555e2bcc3eb9\ := to_unsigned(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.668\ := to_unsigned(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.109\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.669\ := to_unsigned(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.670\ := to_unsigned(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num570\ := to_unsigned(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.671\ := to_unsigned(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num571\ := to_unsigned(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.672\ := to_unsigned(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num572\ := to_unsigned(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.673\ := to_unsigned(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num573\ := to_unsigned(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.674\ := to_unsigned(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num574\ := to_unsigned(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.675\ := to_unsigned(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num575\ := to_unsigned(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.676\ := to_unsigned(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num576\ := to_unsigned(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.677\ := to_unsigned(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num577\ := to_unsigned(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.678\ := to_unsigned(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num578\ := to_unsigned(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.679\ := to_unsigned(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num579\ := to_unsigned(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.680\ := to_unsigned(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num580\ := to_unsigned(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.681\ := to_unsigned(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.110\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num581\ := to_unsigned(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.682\ := to_unsigned(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.111\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.683\ := to_unsigned(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.684\ := to_unsigned(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num582\ := to_unsigned(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.685\ := to_unsigned(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num583\ := to_unsigned(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.686\ := to_unsigned(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num584\ := to_unsigned(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.687\ := to_unsigned(0, 64);
            else 
                case \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ is 
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_0\ => 
                        -- Start state
                        -- Waiting for the start signal.
                        if (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._Started\ = true) then 
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_2\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_1\ => 
                        -- Final state
                        -- Signaling finished until Started is pulled back to false, then returning to the start state.
                        if (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._Started\ = true) then 
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._Finished\ <= true;
                        else 
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._Finished\ <= false;
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_0\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_2\ => 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input.parameter.In\;
                        -- The following section was transformed from the .NET statement below:
                        -- byte b;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- b = (byte)input;
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b\ := SmartResize(unsigned(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\), 8);
                        -- The following section was transformed from the .NET statement below:
                        -- byte b2;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- b2 = (byte)input;
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b2\ := SmartResize(unsigned(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\), 8);
                        -- The following section was transformed from the .NET statement below:
                        -- int num;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num = b << (int)b2;
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.0\ := signed(SmartResize(shift_left(signed(SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b\, 32)), to_integer(unsigned(SmartResize(signed(SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b2\, 32)), 5)))), 32));
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.0\;
                        -- The following section was transformed from the .NET statement below:
                        -- int num2;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num2 = b >> (int)b2;
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_3\;
                        -- Clock cycles needed to complete this state (approximation): 0.5244
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_3\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.1\ := signed(SmartResize(shift_right(signed(SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b\, 32)), to_integer(unsigned(SmartResize(signed(SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b2\, 32)), 5) and "11111"))), 32));
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num2\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.1\;
                        -- The following section was transformed from the .NET statement below:
                        -- int num3;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num3 = (int)((int)(b) + (int)(b2));
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.2\ := SmartResize(signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b\), 32)) + signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b2\), 32)), 32);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num3\ := (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.2\);
                        -- The following section was transformed from the .NET statement below:
                        -- int num4;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num4 = (int)((int)(b) - (int)(b2));
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_4\;
                        -- Clock cycles needed to complete this state (approximation): 0.9774
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_4\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.3\ := signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b\), 32)) - signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b2\), 32));
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num4\ := (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.3\);
                        -- The following section was transformed from the .NET statement below:
                        -- int num5;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num5 = (int)((int)(b) * (int)(b2));
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.4\ := SmartResize(signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b\), 32)) * signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b2\), 32)), 32);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num5\ := (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.4\);
                        -- The following section was transformed from the .NET statement below:
                        -- int num6;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num6 = (int)b / (int)b2;
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_5\;
                        -- Clock cycles needed to complete this state (approximation): 0.7471
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_5\ => 
                        -- Waiting for the result to appear in \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.5\ (have to wait 10 clock cycles in this state).
                        -- The assignment needs to be kept up for multi-cycle operations for the result to actually appear in the target.
                        if (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.0\ >= to_signed(10, 32)) then 
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_6\;
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.0\ := to_signed(0, 32);
                        else 
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.0\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.0\ + to_signed(1, 32);
                        end if;
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.5\ := signed(SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b\, 32)) / signed(SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b2\, 32));
                        -- Clock cycles needed to complete this state (approximation): 10
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_6\ => 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num6\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.5\;
                        -- The following section was transformed from the .NET statement below:
                        -- int num7;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- int remainderOperande0dec034380243af918edfbb353ffc94df2d5e762f30ac11e56e569fc631ab0d;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- remainderOperande0dec034380243af918edfbb353ffc94df2d5e762f30ac11e56e569fc631ab0d = (int)b;
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperande0dec034380243af918edfbb353ffc94df2d5e762f30ac11e56e569fc631ab0d\ := signed(SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b\, 32));
                        -- The following section was transformed from the .NET statement below:
                        -- int remainderOperandefb5053f4e77ffd15920919821d1b736d3db1e0fd89b385eef9b7790a8d5a8bd;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- remainderOperandefb5053f4e77ffd15920919821d1b736d3db1e0fd89b385eef9b7790a8d5a8bd = (int)b2;
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperandefb5053f4e77ffd15920919821d1b736d3db1e0fd89b385eef9b7790a8d5a8bd\ := signed(SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b2\, 32));
                        -- The following section was transformed from the .NET statement below:
                        -- num7 = remainderOperande0dec034380243af918edfbb353ffc94df2d5e762f30ac11e56e569fc631ab0d - remainderOperande0dec034380243af918edfbb353ffc94df2d5e762f30ac11e56e569fc631ab0d / remainderOperandefb5053f4e77ffd15920919821d1b736d3db1e0fd89b385eef9b7790a8d5a8bd * remainderOperandefb5053f4e77ffd15920919821d1b736d3db1e0fd89b385eef9b7790a8d5a8bd;
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_7\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_7\ => 
                        -- Waiting for the result to appear in \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.6\ (have to wait 10 clock cycles in this state).
                        -- The assignment needs to be kept up for multi-cycle operations for the result to actually appear in the target.
                        if (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.1\ >= to_signed(10, 32)) then 
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_8\;
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.1\ := to_signed(0, 32);
                        else 
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.1\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.1\ + to_signed(1, 32);
                        end if;
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.6\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperande0dec034380243af918edfbb353ffc94df2d5e762f30ac11e56e569fc631ab0d\ / \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperandefb5053f4e77ffd15920919821d1b736d3db1e0fd89b385eef9b7790a8d5a8bd\;
                        -- Clock cycles needed to complete this state (approximation): 10
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_8\ => 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.7\ := SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.6\ * \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperandefb5053f4e77ffd15920919821d1b736d3db1e0fd89b385eef9b7790a8d5a8bd\, 32);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.8\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperande0dec034380243af918edfbb353ffc94df2d5e762f30ac11e56e569fc631ab0d\ - \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.7\;
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num7\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.8\;
                        -- The following section was transformed from the .NET statement below:
                        -- int num8;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num8 = ((int)((int)(b) & (int)(b2)));
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.9\ := signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b\), 32)) and signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b2\), 32));
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num8\ := ((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.9\));
                        -- The following section was transformed from the .NET statement below:
                        -- int num9;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num9 = ((int)((int)(b) | (int)(b2)));
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_9\;
                        -- Clock cycles needed to complete this state (approximation): 0.8857
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_9\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.10\ := signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b\), 32)) or signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b2\), 32));
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num9\ := ((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.10\));
                        -- The following section was transformed from the .NET statement below:
                        -- int num10;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num10 = ((int)((int)(b) ^ (int)(b2)));
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.11\ := signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b\), 32)) xor signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b2\), 32));
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num10\ := ((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.11\));
                        -- The following section was transformed from the .NET statement below:
                        -- sbyte b3;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- b3 = (sbyte)input;
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b3\ := SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\, 8);
                        -- The following section was transformed from the .NET statement below:
                        -- int num11;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num11 = b << (int)b3;
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.12\ := signed(SmartResize(shift_left(signed(SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b\, 32)), to_integer(unsigned(SmartResize(SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b3\, 32), 5)))), 32));
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num11\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.12\;
                        -- The following section was transformed from the .NET statement below:
                        -- int num12;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num12 = b >> (int)b3;
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_10\;
                        -- Clock cycles needed to complete this state (approximation): 0.8016
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_10\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.13\ := signed(SmartResize(shift_right(signed(SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b\, 32)), to_integer(unsigned(SmartResize(SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b3\, 32), 5) and "11111"))), 32));
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num12\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.13\;
                        -- The following section was transformed from the .NET statement below:
                        -- int num13;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num13 = (int)((int)(b) + (int)(b3));
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.14\ := SmartResize(signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b\), 32)) + SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b3\), 32), 32);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num13\ := (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.14\);
                        -- The following section was transformed from the .NET statement below:
                        -- int num14;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num14 = (int)((int)(b) - (int)(b3));
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_11\;
                        -- Clock cycles needed to complete this state (approximation): 0.9774
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_11\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.15\ := signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b\), 32)) - SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b3\), 32);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num14\ := (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.15\);
                        -- The following section was transformed from the .NET statement below:
                        -- int num15;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num15 = (int)((int)(b) * (int)(b3));
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.16\ := SmartResize(signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b\), 32)) * SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b3\), 32), 32);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num15\ := (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.16\);
                        -- The following section was transformed from the .NET statement below:
                        -- int num16;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num16 = (int)b / (int)b3;
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_12\;
                        -- Clock cycles needed to complete this state (approximation): 0.7471
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_12\ => 
                        -- Waiting for the result to appear in \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.17\ (have to wait 10 clock cycles in this state).
                        -- The assignment needs to be kept up for multi-cycle operations for the result to actually appear in the target.
                        if (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.2\ >= to_signed(10, 32)) then 
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_13\;
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.2\ := to_signed(0, 32);
                        else 
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.2\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.2\ + to_signed(1, 32);
                        end if;
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.17\ := signed(SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b\, 32)) / SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b3\, 32);
                        -- Clock cycles needed to complete this state (approximation): 10
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_13\ => 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num16\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.17\;
                        -- The following section was transformed from the .NET statement below:
                        -- int num17;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- int remainderOperande0dec034380243af918edfbb353ffc94df2d5e762f30ac11e56e569fc631ab0d;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- remainderOperande0dec034380243af918edfbb353ffc94df2d5e762f30ac11e56e569fc631ab0d = (int)b;
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperande0dec034380243af918edfbb353ffc94df2d5e762f30ac11e56e569fc631ab0d\ := signed(SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b\, 32));
                        -- The following section was transformed from the .NET statement below:
                        -- int remainderOperand4c3cf3d35d8c430e76c83773ad4ef9d06066af4ce4171b6ecf9bfec42e53ac0b;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- remainderOperand4c3cf3d35d8c430e76c83773ad4ef9d06066af4ce4171b6ecf9bfec42e53ac0b = (int)b3;
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperand4c3cf3d35d8c430e76c83773ad4ef9d06066af4ce4171b6ecf9bfec42e53ac0b\ := SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b3\, 32);
                        -- The following section was transformed from the .NET statement below:
                        -- num17 = remainderOperande0dec034380243af918edfbb353ffc94df2d5e762f30ac11e56e569fc631ab0d - remainderOperande0dec034380243af918edfbb353ffc94df2d5e762f30ac11e56e569fc631ab0d / remainderOperand4c3cf3d35d8c430e76c83773ad4ef9d06066af4ce4171b6ecf9bfec42e53ac0b * remainderOperand4c3cf3d35d8c430e76c83773ad4ef9d06066af4ce4171b6ecf9bfec42e53ac0b;
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_14\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_14\ => 
                        -- Waiting for the result to appear in \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.18\ (have to wait 10 clock cycles in this state).
                        -- The assignment needs to be kept up for multi-cycle operations for the result to actually appear in the target.
                        if (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.3\ >= to_signed(10, 32)) then 
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_15\;
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.3\ := to_signed(0, 32);
                        else 
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.3\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.3\ + to_signed(1, 32);
                        end if;
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.18\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperande0dec034380243af918edfbb353ffc94df2d5e762f30ac11e56e569fc631ab0d\ / \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperand4c3cf3d35d8c430e76c83773ad4ef9d06066af4ce4171b6ecf9bfec42e53ac0b\;
                        -- Clock cycles needed to complete this state (approximation): 10
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_15\ => 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.19\ := SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.18\ * \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperand4c3cf3d35d8c430e76c83773ad4ef9d06066af4ce4171b6ecf9bfec42e53ac0b\, 32);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.20\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperande0dec034380243af918edfbb353ffc94df2d5e762f30ac11e56e569fc631ab0d\ - \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.19\;
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num17\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.20\;
                        -- The following section was transformed from the .NET statement below:
                        -- int num18;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num18 = ((int)((int)(b) & (int)(b3)));
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.21\ := signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b\), 32)) and SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b3\), 32);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num18\ := ((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.21\));
                        -- The following section was transformed from the .NET statement below:
                        -- int num19;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num19 = ((int)((int)(b) | (int)(b3)));
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_16\;
                        -- Clock cycles needed to complete this state (approximation): 0.8857
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_16\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.22\ := signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b\), 32)) or SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b3\), 32);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num19\ := ((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.22\));
                        -- The following section was transformed from the .NET statement below:
                        -- int num20;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num20 = ((int)((int)(b) ^ (int)(b3)));
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.23\ := signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b\), 32)) xor SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b3\), 32);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num20\ := ((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.23\));
                        -- The following section was transformed from the .NET statement below:
                        -- short num21;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num21 = (short)input;
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num21\ := SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\, 16);
                        -- The following section was transformed from the .NET statement below:
                        -- int num22;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num22 = b << (int)num21;
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.24\ := signed(SmartResize(shift_left(signed(SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b\, 32)), to_integer(unsigned(SmartResize(SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num21\, 32), 5)))), 32));
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num22\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.24\;
                        -- The following section was transformed from the .NET statement below:
                        -- int num23;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num23 = b >> (int)num21;
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_17\;
                        -- Clock cycles needed to complete this state (approximation): 0.8016
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_17\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.25\ := signed(SmartResize(shift_right(signed(SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b\, 32)), to_integer(unsigned(SmartResize(SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num21\, 32), 5) and "11111"))), 32));
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num23\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.25\;
                        -- The following section was transformed from the .NET statement below:
                        -- int num24;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num24 = (int)((int)(b) + (int)(num21));
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.26\ := SmartResize(signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b\), 32)) + SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num21\), 32), 32);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num24\ := (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.26\);
                        -- The following section was transformed from the .NET statement below:
                        -- int num25;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num25 = (int)((int)(b) - (int)(num21));
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_18\;
                        -- Clock cycles needed to complete this state (approximation): 0.9774
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_18\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.27\ := signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b\), 32)) - SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num21\), 32);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num25\ := (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.27\);
                        -- The following section was transformed from the .NET statement below:
                        -- int num26;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num26 = (int)((int)(b) * (int)(num21));
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.28\ := SmartResize(signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b\), 32)) * SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num21\), 32), 32);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num26\ := (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.28\);
                        -- The following section was transformed from the .NET statement below:
                        -- int num27;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num27 = (int)b / (int)num21;
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_19\;
                        -- Clock cycles needed to complete this state (approximation): 0.7471
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_19\ => 
                        -- Waiting for the result to appear in \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.29\ (have to wait 10 clock cycles in this state).
                        -- The assignment needs to be kept up for multi-cycle operations for the result to actually appear in the target.
                        if (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.4\ >= to_signed(10, 32)) then 
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_20\;
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.4\ := to_signed(0, 32);
                        else 
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.4\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.4\ + to_signed(1, 32);
                        end if;
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.29\ := signed(SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b\, 32)) / SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num21\, 32);
                        -- Clock cycles needed to complete this state (approximation): 10
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_20\ => 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num27\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.29\;
                        -- The following section was transformed from the .NET statement below:
                        -- int num28;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- int remainderOperande0dec034380243af918edfbb353ffc94df2d5e762f30ac11e56e569fc631ab0d;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- remainderOperande0dec034380243af918edfbb353ffc94df2d5e762f30ac11e56e569fc631ab0d = (int)b;
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperande0dec034380243af918edfbb353ffc94df2d5e762f30ac11e56e569fc631ab0d\ := signed(SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b\, 32));
                        -- The following section was transformed from the .NET statement below:
                        -- int remainderOperand486ca49e4664657d55b40163951a093d44b764f3014e198f9d9f5cc683a8d06a;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- remainderOperand486ca49e4664657d55b40163951a093d44b764f3014e198f9d9f5cc683a8d06a = (int)num21;
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperand486ca49e4664657d55b40163951a093d44b764f3014e198f9d9f5cc683a8d06a\ := SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num21\, 32);
                        -- The following section was transformed from the .NET statement below:
                        -- num28 = remainderOperande0dec034380243af918edfbb353ffc94df2d5e762f30ac11e56e569fc631ab0d - remainderOperande0dec034380243af918edfbb353ffc94df2d5e762f30ac11e56e569fc631ab0d / remainderOperand486ca49e4664657d55b40163951a093d44b764f3014e198f9d9f5cc683a8d06a * remainderOperand486ca49e4664657d55b40163951a093d44b764f3014e198f9d9f5cc683a8d06a;
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_21\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_21\ => 
                        -- Waiting for the result to appear in \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.30\ (have to wait 10 clock cycles in this state).
                        -- The assignment needs to be kept up for multi-cycle operations for the result to actually appear in the target.
                        if (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.5\ >= to_signed(10, 32)) then 
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_22\;
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.5\ := to_signed(0, 32);
                        else 
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.5\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.5\ + to_signed(1, 32);
                        end if;
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.30\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperande0dec034380243af918edfbb353ffc94df2d5e762f30ac11e56e569fc631ab0d\ / \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperand486ca49e4664657d55b40163951a093d44b764f3014e198f9d9f5cc683a8d06a\;
                        -- Clock cycles needed to complete this state (approximation): 10
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_22\ => 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.31\ := SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.30\ * \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperand486ca49e4664657d55b40163951a093d44b764f3014e198f9d9f5cc683a8d06a\, 32);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.32\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperande0dec034380243af918edfbb353ffc94df2d5e762f30ac11e56e569fc631ab0d\ - \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.31\;
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num28\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.32\;
                        -- The following section was transformed from the .NET statement below:
                        -- int num29;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num29 = ((int)((int)(b) & (int)(num21)));
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.33\ := signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b\), 32)) and SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num21\), 32);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num29\ := ((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.33\));
                        -- The following section was transformed from the .NET statement below:
                        -- int num30;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num30 = ((int)((int)(b) | (int)(num21)));
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_23\;
                        -- Clock cycles needed to complete this state (approximation): 0.8857
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_23\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.34\ := signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b\), 32)) or SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num21\), 32);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num30\ := ((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.34\));
                        -- The following section was transformed from the .NET statement below:
                        -- int num31;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num31 = ((int)((int)(b) ^ (int)(num21)));
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.35\ := signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b\), 32)) xor SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num21\), 32);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num31\ := ((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.35\));
                        -- The following section was transformed from the .NET statement below:
                        -- ushort num32;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num32 = (ushort)input;
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num32\ := SmartResize(unsigned(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\), 16);
                        -- The following section was transformed from the .NET statement below:
                        -- int num33;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num33 = b << (int)num32;
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.36\ := signed(SmartResize(shift_left(signed(SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b\, 32)), to_integer(unsigned(SmartResize(signed(SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num32\, 32)), 5)))), 32));
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num33\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.36\;
                        -- The following section was transformed from the .NET statement below:
                        -- int num34;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num34 = b >> (int)num32;
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_24\;
                        -- Clock cycles needed to complete this state (approximation): 0.8016
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_24\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.37\ := signed(SmartResize(shift_right(signed(SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b\, 32)), to_integer(unsigned(SmartResize(signed(SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num32\, 32)), 5) and "11111"))), 32));
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num34\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.37\;
                        -- The following section was transformed from the .NET statement below:
                        -- int num35;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num35 = (int)((int)(b) + (int)(num32));
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.38\ := SmartResize(signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b\), 32)) + signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num32\), 32)), 32);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num35\ := (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.38\);
                        -- The following section was transformed from the .NET statement below:
                        -- int num36;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num36 = (int)((int)(b) - (int)(num32));
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_25\;
                        -- Clock cycles needed to complete this state (approximation): 0.9774
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_25\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.39\ := signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b\), 32)) - signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num32\), 32));
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num36\ := (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.39\);
                        -- The following section was transformed from the .NET statement below:
                        -- int num37;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num37 = (int)((int)(b) * (int)(num32));
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.40\ := SmartResize(signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b\), 32)) * signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num32\), 32)), 32);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num37\ := (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.40\);
                        -- The following section was transformed from the .NET statement below:
                        -- int num38;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num38 = (int)b / (int)num32;
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_26\;
                        -- Clock cycles needed to complete this state (approximation): 0.7471
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_26\ => 
                        -- Waiting for the result to appear in \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.41\ (have to wait 10 clock cycles in this state).
                        -- The assignment needs to be kept up for multi-cycle operations for the result to actually appear in the target.
                        if (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.6\ >= to_signed(10, 32)) then 
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_27\;
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.6\ := to_signed(0, 32);
                        else 
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.6\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.6\ + to_signed(1, 32);
                        end if;
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.41\ := signed(SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b\, 32)) / signed(SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num32\, 32));
                        -- Clock cycles needed to complete this state (approximation): 10
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_27\ => 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num38\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.41\;
                        -- The following section was transformed from the .NET statement below:
                        -- int num39;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- int remainderOperande0dec034380243af918edfbb353ffc94df2d5e762f30ac11e56e569fc631ab0d;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- remainderOperande0dec034380243af918edfbb353ffc94df2d5e762f30ac11e56e569fc631ab0d = (int)b;
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperande0dec034380243af918edfbb353ffc94df2d5e762f30ac11e56e569fc631ab0d\ := signed(SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b\, 32));
                        -- The following section was transformed from the .NET statement below:
                        -- int remainderOperandac2d84469251a7f2b094378d1bb4e487b3a02527d578d9b4bf7f070b2adad76c;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- remainderOperandac2d84469251a7f2b094378d1bb4e487b3a02527d578d9b4bf7f070b2adad76c = (int)num32;
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperandac2d84469251a7f2b094378d1bb4e487b3a02527d578d9b4bf7f070b2adad76c\ := signed(SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num32\, 32));
                        -- The following section was transformed from the .NET statement below:
                        -- num39 = remainderOperande0dec034380243af918edfbb353ffc94df2d5e762f30ac11e56e569fc631ab0d - remainderOperande0dec034380243af918edfbb353ffc94df2d5e762f30ac11e56e569fc631ab0d / remainderOperandac2d84469251a7f2b094378d1bb4e487b3a02527d578d9b4bf7f070b2adad76c * remainderOperandac2d84469251a7f2b094378d1bb4e487b3a02527d578d9b4bf7f070b2adad76c;
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_28\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_28\ => 
                        -- Waiting for the result to appear in \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.42\ (have to wait 10 clock cycles in this state).
                        -- The assignment needs to be kept up for multi-cycle operations for the result to actually appear in the target.
                        if (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.7\ >= to_signed(10, 32)) then 
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_29\;
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.7\ := to_signed(0, 32);
                        else 
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.7\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.7\ + to_signed(1, 32);
                        end if;
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.42\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperande0dec034380243af918edfbb353ffc94df2d5e762f30ac11e56e569fc631ab0d\ / \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperandac2d84469251a7f2b094378d1bb4e487b3a02527d578d9b4bf7f070b2adad76c\;
                        -- Clock cycles needed to complete this state (approximation): 10
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_29\ => 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.43\ := SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.42\ * \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperandac2d84469251a7f2b094378d1bb4e487b3a02527d578d9b4bf7f070b2adad76c\, 32);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.44\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperande0dec034380243af918edfbb353ffc94df2d5e762f30ac11e56e569fc631ab0d\ - \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.43\;
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num39\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.44\;
                        -- The following section was transformed from the .NET statement below:
                        -- int num40;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num40 = ((int)((int)(b) & (int)(num32)));
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.45\ := signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b\), 32)) and signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num32\), 32));
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num40\ := ((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.45\));
                        -- The following section was transformed from the .NET statement below:
                        -- int num41;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num41 = ((int)((int)(b) | (int)(num32)));
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_30\;
                        -- Clock cycles needed to complete this state (approximation): 0.8857
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_30\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.46\ := signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b\), 32)) or signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num32\), 32));
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num41\ := ((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.46\));
                        -- The following section was transformed from the .NET statement below:
                        -- int num42;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num42 = ((int)((int)(b) ^ (int)(num32)));
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.47\ := signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b\), 32)) xor signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num32\), 32));
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num42\ := ((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.47\));
                        -- The following section was transformed from the .NET statement below:
                        -- int num43;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num43 = b << input;
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.48\ := signed(SmartResize(shift_left(signed(SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b\, 32)), to_integer(unsigned(SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\, 5)))), 32));
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num43\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.48\;
                        -- The following section was transformed from the .NET statement below:
                        -- int num44;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num44 = b >> input;
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_31\;
                        -- Clock cycles needed to complete this state (approximation): 0.8016
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_31\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.49\ := signed(SmartResize(shift_right(signed(SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b\, 32)), to_integer(unsigned(SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\, 5) and "11111"))), 32));
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num44\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.49\;
                        -- The following section was transformed from the .NET statement below:
                        -- int num45;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num45 = (int)((int)(b) + (int)(input));
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.50\ := SmartResize(signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b\), 32)) + (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\), 32);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num45\ := (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.50\);
                        -- The following section was transformed from the .NET statement below:
                        -- int num46;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num46 = (int)((int)(b) - (int)(input));
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_32\;
                        -- Clock cycles needed to complete this state (approximation): 0.9774
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_32\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.51\ := signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b\), 32)) - (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num46\ := (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.51\);
                        -- The following section was transformed from the .NET statement below:
                        -- int num47;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num47 = (int)((int)(b) * (int)(input));
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.52\ := SmartResize(signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b\), 32)) * (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\), 32);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num47\ := (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.52\);
                        -- The following section was transformed from the .NET statement below:
                        -- int num48;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num48 = (int)b / input;
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_33\;
                        -- Clock cycles needed to complete this state (approximation): 0.7471
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_33\ => 
                        -- Waiting for the result to appear in \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.53\ (have to wait 10 clock cycles in this state).
                        -- The assignment needs to be kept up for multi-cycle operations for the result to actually appear in the target.
                        if (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.8\ >= to_signed(10, 32)) then 
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_34\;
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.8\ := to_signed(0, 32);
                        else 
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.8\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.8\ + to_signed(1, 32);
                        end if;
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.53\ := signed(SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b\, 32)) / \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\;
                        -- Clock cycles needed to complete this state (approximation): 10
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_34\ => 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num48\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.53\;
                        -- The following section was transformed from the .NET statement below:
                        -- int num49;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- int remainderOperande0dec034380243af918edfbb353ffc94df2d5e762f30ac11e56e569fc631ab0d;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- remainderOperande0dec034380243af918edfbb353ffc94df2d5e762f30ac11e56e569fc631ab0d = (int)b;
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperande0dec034380243af918edfbb353ffc94df2d5e762f30ac11e56e569fc631ab0d\ := signed(SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b\, 32));
                        -- The following section was transformed from the .NET statement below:
                        -- num49 = remainderOperande0dec034380243af918edfbb353ffc94df2d5e762f30ac11e56e569fc631ab0d - remainderOperande0dec034380243af918edfbb353ffc94df2d5e762f30ac11e56e569fc631ab0d / input * input;
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_35\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_35\ => 
                        -- Waiting for the result to appear in \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.54\ (have to wait 10 clock cycles in this state).
                        -- The assignment needs to be kept up for multi-cycle operations for the result to actually appear in the target.
                        if (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.9\ >= to_signed(10, 32)) then 
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_36\;
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.9\ := to_signed(0, 32);
                        else 
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.9\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.9\ + to_signed(1, 32);
                        end if;
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.54\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperande0dec034380243af918edfbb353ffc94df2d5e762f30ac11e56e569fc631ab0d\ / \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\;
                        -- Clock cycles needed to complete this state (approximation): 10
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_36\ => 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.55\ := SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.54\ * \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\, 32);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.56\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperande0dec034380243af918edfbb353ffc94df2d5e762f30ac11e56e569fc631ab0d\ - \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.55\;
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num49\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.56\;
                        -- The following section was transformed from the .NET statement below:
                        -- int num50;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num50 = ((int)((int)(b) & (int)(input)));
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.57\ := signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b\), 32)) and (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num50\ := ((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.57\));
                        -- The following section was transformed from the .NET statement below:
                        -- int num51;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num51 = ((int)((int)(b) | (int)(input)));
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_37\;
                        -- Clock cycles needed to complete this state (approximation): 0.8857
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_37\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.58\ := signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b\), 32)) or (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num51\ := ((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.58\));
                        -- The following section was transformed from the .NET statement below:
                        -- int num52;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num52 = ((int)((int)(b) ^ (int)(input)));
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.59\ := signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b\), 32)) xor (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num52\ := ((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.59\));
                        -- The following section was transformed from the .NET statement below:
                        -- int num53;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num53 = b << input;
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.60\ := signed(SmartResize(shift_left(signed(SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b\, 32)), to_integer(unsigned(SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\, 5)))), 32));
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num53\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.60\;
                        -- The following section was transformed from the .NET statement below:
                        -- int num54;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num54 = b >> input;
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_38\;
                        -- Clock cycles needed to complete this state (approximation): 0.8016
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_38\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.61\ := signed(SmartResize(shift_right(signed(SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b\, 32)), to_integer(unsigned(SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\, 5) and "11111"))), 32));
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num54\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.61\;
                        -- The following section was transformed from the .NET statement below:
                        -- uint num55;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num55 = (uint)((int)(b) + (int)(input));
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.62\ := SmartResize(unsigned(signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b\), 32)) + (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\)), 32);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num55\ := (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.62\);
                        -- The following section was transformed from the .NET statement below:
                        -- uint num56;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num56 = (uint)((int)(b) - (int)(input));
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_39\;
                        -- Clock cycles needed to complete this state (approximation): 0.9774
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_39\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.63\ := unsigned(signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b\), 32)) - (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\));
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num56\ := (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.63\);
                        -- The following section was transformed from the .NET statement below:
                        -- uint num57;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num57 = (uint)((int)(b) * (int)(input));
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.64\ := SmartResize(unsigned(signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b\), 32)) * (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\)), 32);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num57\ := (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.64\);
                        -- The following section was transformed from the .NET statement below:
                        -- uint num58;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num58 = (uint)b / (uint)input;
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_40\;
                        -- Clock cycles needed to complete this state (approximation): 0.7471
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_40\ => 
                        -- Waiting for the result to appear in \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.65\ (have to wait 9 clock cycles in this state).
                        -- The assignment needs to be kept up for multi-cycle operations for the result to actually appear in the target.
                        if (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.10\ >= to_signed(9, 32)) then 
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_41\;
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.10\ := to_signed(0, 32);
                        else 
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.10\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.10\ + to_signed(1, 32);
                        end if;
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.65\ := SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b\, 32) / unsigned(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\);
                        -- Clock cycles needed to complete this state (approximation): 9
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_41\ => 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num58\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.65\;
                        -- The following section was transformed from the .NET statement below:
                        -- uint num59;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- uint remainderOperandfedb548b6bc02115814b6f22cee148c23d5b2d4ad3733b1fa59f9d6abc514958;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- remainderOperandfedb548b6bc02115814b6f22cee148c23d5b2d4ad3733b1fa59f9d6abc514958 = (uint)b;
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperandfedb548b6bc02115814b6f22cee148c23d5b2d4ad3733b1fa59f9d6abc514958\ := SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b\, 32);
                        -- The following section was transformed from the .NET statement below:
                        -- uint remainderOperand53fc996822df2ca6c8221d7a30b00205ac201f3c5c0311b48f63e126ebd888da;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- remainderOperand53fc996822df2ca6c8221d7a30b00205ac201f3c5c0311b48f63e126ebd888da = (uint)input;
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperand53fc996822df2ca6c8221d7a30b00205ac201f3c5c0311b48f63e126ebd888da\ := unsigned(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\);
                        -- The following section was transformed from the .NET statement below:
                        -- num59 = remainderOperandfedb548b6bc02115814b6f22cee148c23d5b2d4ad3733b1fa59f9d6abc514958 - remainderOperandfedb548b6bc02115814b6f22cee148c23d5b2d4ad3733b1fa59f9d6abc514958 / remainderOperand53fc996822df2ca6c8221d7a30b00205ac201f3c5c0311b48f63e126ebd888da * remainderOperand53fc996822df2ca6c8221d7a30b00205ac201f3c5c0311b48f63e126ebd888da;
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_42\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_42\ => 
                        -- Waiting for the result to appear in \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.66\ (have to wait 9 clock cycles in this state).
                        -- The assignment needs to be kept up for multi-cycle operations for the result to actually appear in the target.
                        if (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.11\ >= to_signed(9, 32)) then 
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_43\;
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.11\ := to_signed(0, 32);
                        else 
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.11\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.11\ + to_signed(1, 32);
                        end if;
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.66\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperandfedb548b6bc02115814b6f22cee148c23d5b2d4ad3733b1fa59f9d6abc514958\ / \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperand53fc996822df2ca6c8221d7a30b00205ac201f3c5c0311b48f63e126ebd888da\;
                        -- Clock cycles needed to complete this state (approximation): 9
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_43\ => 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.67\ := SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.66\ * \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperand53fc996822df2ca6c8221d7a30b00205ac201f3c5c0311b48f63e126ebd888da\, 32);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.68\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperandfedb548b6bc02115814b6f22cee148c23d5b2d4ad3733b1fa59f9d6abc514958\ - \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.67\;
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num59\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.68\;
                        -- The following section was transformed from the .NET statement below:
                        -- uint num60;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num60 = (uint)((int)(b) & (int)(input));
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.69\ := unsigned(signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b\), 32)) and (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\));
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num60\ := (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.69\);
                        -- The following section was transformed from the .NET statement below:
                        -- uint num61;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num61 = (uint)((int)(b) | (int)(input));
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_44\;
                        -- Clock cycles needed to complete this state (approximation): 0.8857
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_44\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.70\ := unsigned(signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b\), 32)) or (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\));
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num61\ := (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.70\);
                        -- The following section was transformed from the .NET statement below:
                        -- uint num62;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num62 = (uint)((int)(b) ^ (int)(input));
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.71\ := unsigned(signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b\), 32)) xor (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\));
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num62\ := (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.71\);
                        -- The following section was transformed from the .NET statement below:
                        -- long num63;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num63 = input;
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num63\ := SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\, 64);
                        -- The following section was transformed from the .NET statement below:
                        -- int num64;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num64 = b << (int)num63;
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.72\ := signed(SmartResize(shift_left(signed(SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b\, 32)), to_integer(unsigned(SmartResize(SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num63\, 32), 5)))), 32));
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num64\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.72\;
                        -- The following section was transformed from the .NET statement below:
                        -- int num65;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num65 = b >> (int)num63;
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_45\;
                        -- Clock cycles needed to complete this state (approximation): 0.8016
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_45\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.73\ := signed(SmartResize(shift_right(signed(SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b\, 32)), to_integer(unsigned(SmartResize(SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num63\, 32), 5) and "11111"))), 32));
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num65\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.73\;
                        -- The following section was transformed from the .NET statement below:
                        -- long num66;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num66 = (long)((long)(b) + num63);
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_46\;
                        -- Clock cycles needed to complete this state (approximation): 0.6511
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_46\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.74\ := signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b\), 64)) + \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num63\;
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num66\ := (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.74\);
                        -- The following section was transformed from the .NET statement below:
                        -- long num67;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num67 = (long)((long)(b) - num63);
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.75\ := signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b\), 64)) - \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num63\;
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num67\ := (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.75\);
                        -- The following section was transformed from the .NET statement below:
                        -- long num68;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num68 = (long)((long)(b) * num63);
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_47\;
                        -- Clock cycles needed to complete this state (approximation): 0.7796
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_47\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.76\ := SmartResize(signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b\), 64)) * \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num63\, 64);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num68\ := (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.76\);
                        -- The following section was transformed from the .NET statement below:
                        -- long num69;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num69 = (long)b / num63;
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_48\;
                        -- Clock cycles needed to complete this state (approximation): 0.7638
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_48\ => 
                        -- Waiting for the result to appear in \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.77\ (have to wait 27 clock cycles in this state).
                        -- The assignment needs to be kept up for multi-cycle operations for the result to actually appear in the target.
                        if (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.12\ >= to_signed(27, 32)) then 
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_49\;
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.12\ := to_signed(0, 32);
                        else 
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.12\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.12\ + to_signed(1, 32);
                        end if;
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.77\ := signed(SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b\, 64)) / \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num63\;
                        -- Clock cycles needed to complete this state (approximation): 27
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_49\ => 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num69\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.77\;
                        -- The following section was transformed from the .NET statement below:
                        -- long num70;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- long remainderOperand90c71211fa3a2c465400d59ca0094459fa91c3f298657cbf0e7ddf3843a93ccd;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- remainderOperand90c71211fa3a2c465400d59ca0094459fa91c3f298657cbf0e7ddf3843a93ccd = (long)b;
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperand90c71211fa3a2c465400d59ca0094459fa91c3f298657cbf0e7ddf3843a93ccd\ := signed(SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b\, 64));
                        -- The following section was transformed from the .NET statement below:
                        -- num70 = remainderOperand90c71211fa3a2c465400d59ca0094459fa91c3f298657cbf0e7ddf3843a93ccd - remainderOperand90c71211fa3a2c465400d59ca0094459fa91c3f298657cbf0e7ddf3843a93ccd / num63 * num63;
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_50\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_50\ => 
                        -- Waiting for the result to appear in \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.78\ (have to wait 27 clock cycles in this state).
                        -- The assignment needs to be kept up for multi-cycle operations for the result to actually appear in the target.
                        if (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.13\ >= to_signed(27, 32)) then 
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_51\;
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.13\ := to_signed(0, 32);
                        else 
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.13\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.13\ + to_signed(1, 32);
                        end if;
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.78\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperand90c71211fa3a2c465400d59ca0094459fa91c3f298657cbf0e7ddf3843a93ccd\ / \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num63\;
                        -- Clock cycles needed to complete this state (approximation): 27
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_51\ => 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.79\ := SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.78\ * \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num63\, 64);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_52\;
                        -- Clock cycles needed to complete this state (approximation): 0.7638
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_52\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.80\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperand90c71211fa3a2c465400d59ca0094459fa91c3f298657cbf0e7ddf3843a93ccd\ - \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.79\;
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num70\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.80\;
                        -- The following section was transformed from the .NET statement below:
                        -- long num71;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num71 = ((long)((long)(b) & num63));
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.81\ := signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b\), 64)) and \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num63\;
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num71\ := ((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.81\));
                        -- The following section was transformed from the .NET statement below:
                        -- long num72;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num72 = ((long)((long)(b) | num63));
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.82\ := signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b\), 64)) or \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num63\;
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num72\ := ((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.82\));
                        -- The following section was transformed from the .NET statement below:
                        -- long num73;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num73 = ((long)((long)(b) ^ num63));
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.83\ := signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b\), 64)) xor \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num63\;
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num73\ := ((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.83\));
                        -- The following section was transformed from the .NET statement below:
                        -- ulong num74;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num74 = (ulong)input;
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num74\ := ToUnsignedAndExpand(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\, 64);
                        -- The following section was transformed from the .NET statement below:
                        -- int num75;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num75 = b << (int)num74;
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_53\;
                        -- Clock cycles needed to complete this state (approximation): 0.91
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_53\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.84\ := signed(SmartResize(shift_left(signed(SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b\, 32)), to_integer(unsigned(SmartResize(signed(SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num74\, 32)), 5)))), 32));
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num75\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.84\;
                        -- The following section was transformed from the .NET statement below:
                        -- int num76;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num76 = b >> (int)num74;
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_54\;
                        -- Clock cycles needed to complete this state (approximation): 0.5244
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_54\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.85\ := signed(SmartResize(shift_right(signed(SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b\, 32)), to_integer(unsigned(SmartResize(signed(SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num74\, 32)), 5) and "11111"))), 32));
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num76\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.85\;
                        -- The following section was transformed from the .NET statement below:
                        -- ulong num77;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num77 = (ulong)((ulong)(b) + num74);
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_55\;
                        -- Clock cycles needed to complete this state (approximation): 0.6511
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_55\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.86\ := SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b\), 64) + \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num74\;
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num77\ := (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.86\);
                        -- The following section was transformed from the .NET statement below:
                        -- ulong num78;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num78 = (ulong)((ulong)(b) - num74);
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.87\ := SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b\), 64) - \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num74\;
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num78\ := (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.87\);
                        -- The following section was transformed from the .NET statement below:
                        -- ulong num79;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num79 = (ulong)((ulong)(b) * num74);
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_56\;
                        -- Clock cycles needed to complete this state (approximation): 0.7796
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_56\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.88\ := SmartResize(SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b\), 64) * \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num74\, 64);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num79\ := (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.88\);
                        -- The following section was transformed from the .NET statement below:
                        -- ulong num80;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num80 = (ulong)((ulong)(b) / num74);
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_57\;
                        -- Clock cycles needed to complete this state (approximation): 0.7638
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_57\ => 
                        -- Waiting for the result to appear in \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.89\ (have to wait 26 clock cycles in this state).
                        -- The assignment needs to be kept up for multi-cycle operations for the result to actually appear in the target.
                        if (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.14\ >= to_signed(26, 32)) then 
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_58\;
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.14\ := to_signed(0, 32);
                        else 
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.14\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.14\ + to_signed(1, 32);
                        end if;
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.89\ := SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b\), 64) / \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num74\;
                        -- Clock cycles needed to complete this state (approximation): 26
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_58\ => 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num80\ := (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.89\);
                        -- The following section was transformed from the .NET statement below:
                        -- ulong num81;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- ulong remainderOperandb2bb265c0c6ee21348307caac84b9b47c1e6ebb0c6581657022886ab4c248eba;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- remainderOperandb2bb265c0c6ee21348307caac84b9b47c1e6ebb0c6581657022886ab4c248eba = (ulong)(b);
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperandb2bb265c0c6ee21348307caac84b9b47c1e6ebb0c6581657022886ab4c248eba\ := SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b\), 64);
                        -- The following section was transformed from the .NET statement below:
                        -- num81 = (ulong)(remainderOperandb2bb265c0c6ee21348307caac84b9b47c1e6ebb0c6581657022886ab4c248eba - remainderOperandb2bb265c0c6ee21348307caac84b9b47c1e6ebb0c6581657022886ab4c248eba / num74 * num74);
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_59\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_59\ => 
                        -- Waiting for the result to appear in \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.90\ (have to wait 26 clock cycles in this state).
                        -- The assignment needs to be kept up for multi-cycle operations for the result to actually appear in the target.
                        if (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.15\ >= to_signed(26, 32)) then 
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_60\;
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.15\ := to_signed(0, 32);
                        else 
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.15\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.15\ + to_signed(1, 32);
                        end if;
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.90\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperandb2bb265c0c6ee21348307caac84b9b47c1e6ebb0c6581657022886ab4c248eba\ / \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num74\;
                        -- Clock cycles needed to complete this state (approximation): 26
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_60\ => 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.91\ := SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.90\ * \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num74\, 64);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_61\;
                        -- Clock cycles needed to complete this state (approximation): 0.7638
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_61\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.92\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperandb2bb265c0c6ee21348307caac84b9b47c1e6ebb0c6581657022886ab4c248eba\ - \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.91\;
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num81\ := (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.92\);
                        -- The following section was transformed from the .NET statement below:
                        -- ulong num82;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num82 = ((ulong)((ulong)(b) & num74));
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.93\ := SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b\), 64) and \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num74\;
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num82\ := ((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.93\));
                        -- The following section was transformed from the .NET statement below:
                        -- ulong num83;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num83 = ((ulong)((ulong)(b) | num74));
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.94\ := SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b\), 64) or \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num74\;
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num83\ := ((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.94\));
                        -- The following section was transformed from the .NET statement below:
                        -- ulong num84;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num84 = ((ulong)((ulong)(b) ^ num74));
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.95\ := SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b\), 64) xor \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num74\;
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num84\ := ((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.95\));
                        -- The following section was transformed from the .NET statement below:
                        -- sbyte b4;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- b4 = (sbyte)input;
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b4\ := SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\, 8);
                        -- The following section was transformed from the .NET statement below:
                        -- int num85;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num85 = b4 << (int)b2;
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_62\;
                        -- Clock cycles needed to complete this state (approximation): 0.91
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_62\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.96\ := SmartResize(shift_left(SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b4\, 32), to_integer(unsigned(SmartResize(signed(SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b2\, 32)), 5)))), 32);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num85\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.96\;
                        -- The following section was transformed from the .NET statement below:
                        -- int num86;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num86 = b4 >> (int)b2;
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_63\;
                        -- Clock cycles needed to complete this state (approximation): 0.5244
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_63\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.97\ := SmartResize(shift_right(SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b4\, 32), to_integer(unsigned(SmartResize(signed(SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b2\, 32)), 5) and "11111"))), 32);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num86\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.97\;
                        -- The following section was transformed from the .NET statement below:
                        -- int num87;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num87 = (int)((int)(b4) + (int)(b2));
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.98\ := SmartResize(SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b4\), 32) + signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b2\), 32)), 32);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num87\ := (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.98\);
                        -- The following section was transformed from the .NET statement below:
                        -- int num88;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num88 = (int)((int)(b4) - (int)(b2));
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_64\;
                        -- Clock cycles needed to complete this state (approximation): 0.9742
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_64\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.99\ := SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b4\), 32) - signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b2\), 32));
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num88\ := (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.99\);
                        -- The following section was transformed from the .NET statement below:
                        -- int num89;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num89 = (int)((int)(b4) * (int)(b2));
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.100\ := SmartResize(SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b4\), 32) * signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b2\), 32)), 32);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num89\ := (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.100\);
                        -- The following section was transformed from the .NET statement below:
                        -- int num90;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num90 = (int)b4 / (int)b2;
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_65\;
                        -- Clock cycles needed to complete this state (approximation): 0.7471
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_65\ => 
                        -- Waiting for the result to appear in \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.101\ (have to wait 10 clock cycles in this state).
                        -- The assignment needs to be kept up for multi-cycle operations for the result to actually appear in the target.
                        if (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.16\ >= to_signed(10, 32)) then 
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_66\;
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.16\ := to_signed(0, 32);
                        else 
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.16\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.16\ + to_signed(1, 32);
                        end if;
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.101\ := SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b4\, 32) / signed(SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b2\, 32));
                        -- Clock cycles needed to complete this state (approximation): 10
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_66\ => 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num90\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.101\;
                        -- The following section was transformed from the .NET statement below:
                        -- int num91;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- int remainderOperand6d8cede8d70111ca361a1985df79c723b7ce711b62ea690c648a953fc49f8346;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- remainderOperand6d8cede8d70111ca361a1985df79c723b7ce711b62ea690c648a953fc49f8346 = (int)b4;
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperand6d8cede8d70111ca361a1985df79c723b7ce711b62ea690c648a953fc49f8346\ := SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b4\, 32);
                        -- The following section was transformed from the .NET statement below:
                        -- int remainderOperandefb5053f4e77ffd15920919821d1b736d3db1e0fd89b385eef9b7790a8d5a8bd;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- remainderOperandefb5053f4e77ffd15920919821d1b736d3db1e0fd89b385eef9b7790a8d5a8bd = (int)b2;
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperandefb5053f4e77ffd15920919821d1b736d3db1e0fd89b385eef9b7790a8d5a8bd\ := signed(SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b2\, 32));
                        -- The following section was transformed from the .NET statement below:
                        -- num91 = remainderOperand6d8cede8d70111ca361a1985df79c723b7ce711b62ea690c648a953fc49f8346 - remainderOperand6d8cede8d70111ca361a1985df79c723b7ce711b62ea690c648a953fc49f8346 / remainderOperandefb5053f4e77ffd15920919821d1b736d3db1e0fd89b385eef9b7790a8d5a8bd * remainderOperandefb5053f4e77ffd15920919821d1b736d3db1e0fd89b385eef9b7790a8d5a8bd;
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_67\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_67\ => 
                        -- Waiting for the result to appear in \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.102\ (have to wait 10 clock cycles in this state).
                        -- The assignment needs to be kept up for multi-cycle operations for the result to actually appear in the target.
                        if (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.17\ >= to_signed(10, 32)) then 
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_68\;
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.17\ := to_signed(0, 32);
                        else 
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.17\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.17\ + to_signed(1, 32);
                        end if;
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.102\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperand6d8cede8d70111ca361a1985df79c723b7ce711b62ea690c648a953fc49f8346\ / \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperandefb5053f4e77ffd15920919821d1b736d3db1e0fd89b385eef9b7790a8d5a8bd\;
                        -- Clock cycles needed to complete this state (approximation): 10
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_68\ => 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.103\ := SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.102\ * \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperandefb5053f4e77ffd15920919821d1b736d3db1e0fd89b385eef9b7790a8d5a8bd\, 32);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.104\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperand6d8cede8d70111ca361a1985df79c723b7ce711b62ea690c648a953fc49f8346\ - \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.103\;
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num91\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.104\;
                        -- The following section was transformed from the .NET statement below:
                        -- int num92;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num92 = ((int)((int)(b4) & (int)(b2)));
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.105\ := SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b4\), 32) and signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b2\), 32));
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num92\ := ((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.105\));
                        -- The following section was transformed from the .NET statement below:
                        -- int num93;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num93 = ((int)((int)(b4) | (int)(b2)));
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_69\;
                        -- Clock cycles needed to complete this state (approximation): 0.8857
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_69\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.106\ := SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b4\), 32) or signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b2\), 32));
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num93\ := ((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.106\));
                        -- The following section was transformed from the .NET statement below:
                        -- int num94;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num94 = ((int)((int)(b4) ^ (int)(b2)));
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.107\ := SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b4\), 32) xor signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b2\), 32));
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num94\ := ((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.107\));
                        -- The following section was transformed from the .NET statement below:
                        -- int num95;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num95 = b4 << (int)b3;
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.108\ := SmartResize(shift_left(SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b4\, 32), to_integer(unsigned(SmartResize(SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b3\, 32), 5)))), 32);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num95\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.108\;
                        -- The following section was transformed from the .NET statement below:
                        -- int num96;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num96 = b4 >> (int)b3;
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_70\;
                        -- Clock cycles needed to complete this state (approximation): 0.8016
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_70\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.109\ := SmartResize(shift_right(SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b4\, 32), to_integer(unsigned(SmartResize(SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b3\, 32), 5) and "11111"))), 32);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num96\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.109\;
                        -- The following section was transformed from the .NET statement below:
                        -- int num97;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num97 = (int)((int)(b4) + (int)(b3));
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.110\ := SmartResize(SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b4\), 32) + SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b3\), 32), 32);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num97\ := (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.110\);
                        -- The following section was transformed from the .NET statement below:
                        -- int num98;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num98 = (int)((int)(b4) - (int)(b3));
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_71\;
                        -- Clock cycles needed to complete this state (approximation): 0.9742
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_71\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.111\ := SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b4\), 32) - SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b3\), 32);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num98\ := (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.111\);
                        -- The following section was transformed from the .NET statement below:
                        -- int num99;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num99 = (int)((int)(b4) * (int)(b3));
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.112\ := SmartResize(SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b4\), 32) * SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b3\), 32), 32);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num99\ := (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.112\);
                        -- The following section was transformed from the .NET statement below:
                        -- int num100;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num100 = (int)((int)(b4) / (int)(b3));
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_72\;
                        -- Clock cycles needed to complete this state (approximation): 0.7471
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_72\ => 
                        -- Waiting for the result to appear in \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.113\ (have to wait 10 clock cycles in this state).
                        -- The assignment needs to be kept up for multi-cycle operations for the result to actually appear in the target.
                        if (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.18\ >= to_signed(10, 32)) then 
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_73\;
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.18\ := to_signed(0, 32);
                        else 
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.18\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.18\ + to_signed(1, 32);
                        end if;
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.113\ := SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b4\), 32) / SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b3\), 32);
                        -- Clock cycles needed to complete this state (approximation): 10
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_73\ => 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num100\ := (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.113\);
                        -- The following section was transformed from the .NET statement below:
                        -- int num101;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- int remainderOperandf7fd36c5f3c36a06296e55f55058938d5ce4cc83d5be052090acaa625b6f19c2;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- remainderOperandf7fd36c5f3c36a06296e55f55058938d5ce4cc83d5be052090acaa625b6f19c2 = (int)(b4);
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperandf7fd36c5f3c36a06296e55f55058938d5ce4cc83d5be052090acaa625b6f19c2\ := SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b4\), 32);
                        -- The following section was transformed from the .NET statement below:
                        -- int remainderOperand68798c761018f1346ae01a4a965252f4d790df620e22a5fd736220a79a7f0b21;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- remainderOperand68798c761018f1346ae01a4a965252f4d790df620e22a5fd736220a79a7f0b21 = (int)(b3);
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperand68798c761018f1346ae01a4a965252f4d790df620e22a5fd736220a79a7f0b21\ := SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b3\), 32);
                        -- The following section was transformed from the .NET statement below:
                        -- num101 = (int)(remainderOperandf7fd36c5f3c36a06296e55f55058938d5ce4cc83d5be052090acaa625b6f19c2 - remainderOperandf7fd36c5f3c36a06296e55f55058938d5ce4cc83d5be052090acaa625b6f19c2 / remainderOperand68798c761018f1346ae01a4a965252f4d790df620e22a5fd736220a79a7f0b21 * remainderOperand68798c761018f1346ae01a4a965252f4d790df620e22a5fd736220a79a7f0b21);
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_74\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_74\ => 
                        -- Waiting for the result to appear in \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.114\ (have to wait 10 clock cycles in this state).
                        -- The assignment needs to be kept up for multi-cycle operations for the result to actually appear in the target.
                        if (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.19\ >= to_signed(10, 32)) then 
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_75\;
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.19\ := to_signed(0, 32);
                        else 
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.19\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.19\ + to_signed(1, 32);
                        end if;
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.114\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperandf7fd36c5f3c36a06296e55f55058938d5ce4cc83d5be052090acaa625b6f19c2\ / \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperand68798c761018f1346ae01a4a965252f4d790df620e22a5fd736220a79a7f0b21\;
                        -- Clock cycles needed to complete this state (approximation): 10
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_75\ => 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.115\ := SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.114\ * \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperand68798c761018f1346ae01a4a965252f4d790df620e22a5fd736220a79a7f0b21\, 32);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.116\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperandf7fd36c5f3c36a06296e55f55058938d5ce4cc83d5be052090acaa625b6f19c2\ - \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.115\;
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num101\ := (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.116\);
                        -- The following section was transformed from the .NET statement below:
                        -- int num102;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num102 = ((int)((int)(b4) & (int)(b3)));
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.117\ := SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b4\), 32) and SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b3\), 32);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num102\ := ((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.117\));
                        -- The following section was transformed from the .NET statement below:
                        -- int num103;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num103 = ((int)((int)(b4) | (int)(b3)));
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_76\;
                        -- Clock cycles needed to complete this state (approximation): 0.8857
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_76\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.118\ := SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b4\), 32) or SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b3\), 32);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num103\ := ((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.118\));
                        -- The following section was transformed from the .NET statement below:
                        -- int num104;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num104 = ((int)((int)(b4) ^ (int)(b3)));
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.119\ := SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b4\), 32) xor SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b3\), 32);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num104\ := ((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.119\));
                        -- The following section was transformed from the .NET statement below:
                        -- int num105;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num105 = b4 << (int)num21;
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.120\ := SmartResize(shift_left(SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b4\, 32), to_integer(unsigned(SmartResize(SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num21\, 32), 5)))), 32);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num105\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.120\;
                        -- The following section was transformed from the .NET statement below:
                        -- int num106;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num106 = b4 >> (int)num21;
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_77\;
                        -- Clock cycles needed to complete this state (approximation): 0.8016
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_77\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.121\ := SmartResize(shift_right(SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b4\, 32), to_integer(unsigned(SmartResize(SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num21\, 32), 5) and "11111"))), 32);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num106\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.121\;
                        -- The following section was transformed from the .NET statement below:
                        -- int num107;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num107 = (int)((int)(b4) + (int)(num21));
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.122\ := SmartResize(SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b4\), 32) + SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num21\), 32), 32);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num107\ := (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.122\);
                        -- The following section was transformed from the .NET statement below:
                        -- int num108;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num108 = (int)((int)(b4) - (int)(num21));
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_78\;
                        -- Clock cycles needed to complete this state (approximation): 0.9742
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_78\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.123\ := SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b4\), 32) - SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num21\), 32);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num108\ := (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.123\);
                        -- The following section was transformed from the .NET statement below:
                        -- int num109;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num109 = (int)((int)(b4) * (int)(num21));
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.124\ := SmartResize(SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b4\), 32) * SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num21\), 32), 32);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num109\ := (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.124\);
                        -- The following section was transformed from the .NET statement below:
                        -- int num110;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num110 = (int)((int)(b4) / (int)(num21));
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_79\;
                        -- Clock cycles needed to complete this state (approximation): 0.7471
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_79\ => 
                        -- Waiting for the result to appear in \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.125\ (have to wait 10 clock cycles in this state).
                        -- The assignment needs to be kept up for multi-cycle operations for the result to actually appear in the target.
                        if (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.20\ >= to_signed(10, 32)) then 
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_80\;
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.20\ := to_signed(0, 32);
                        else 
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.20\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.20\ + to_signed(1, 32);
                        end if;
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.125\ := SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b4\), 32) / SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num21\), 32);
                        -- Clock cycles needed to complete this state (approximation): 10
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_80\ => 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num110\ := (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.125\);
                        -- The following section was transformed from the .NET statement below:
                        -- int num111;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- int remainderOperandf7fd36c5f3c36a06296e55f55058938d5ce4cc83d5be052090acaa625b6f19c2;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- remainderOperandf7fd36c5f3c36a06296e55f55058938d5ce4cc83d5be052090acaa625b6f19c2 = (int)(b4);
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperandf7fd36c5f3c36a06296e55f55058938d5ce4cc83d5be052090acaa625b6f19c2\ := SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b4\), 32);
                        -- The following section was transformed from the .NET statement below:
                        -- int remainderOperandc5ee9b088dd78f02d0eea0801ee05c33005011bf73db14965ef1c5f8b39119ce;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- remainderOperandc5ee9b088dd78f02d0eea0801ee05c33005011bf73db14965ef1c5f8b39119ce = (int)(num21);
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperandc5ee9b088dd78f02d0eea0801ee05c33005011bf73db14965ef1c5f8b39119ce\ := SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num21\), 32);
                        -- The following section was transformed from the .NET statement below:
                        -- num111 = (int)(remainderOperandf7fd36c5f3c36a06296e55f55058938d5ce4cc83d5be052090acaa625b6f19c2 - remainderOperandf7fd36c5f3c36a06296e55f55058938d5ce4cc83d5be052090acaa625b6f19c2 / remainderOperandc5ee9b088dd78f02d0eea0801ee05c33005011bf73db14965ef1c5f8b39119ce * remainderOperandc5ee9b088dd78f02d0eea0801ee05c33005011bf73db14965ef1c5f8b39119ce);
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_81\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_81\ => 
                        -- Waiting for the result to appear in \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.126\ (have to wait 10 clock cycles in this state).
                        -- The assignment needs to be kept up for multi-cycle operations for the result to actually appear in the target.
                        if (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.21\ >= to_signed(10, 32)) then 
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_82\;
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.21\ := to_signed(0, 32);
                        else 
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.21\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.21\ + to_signed(1, 32);
                        end if;
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.126\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperandf7fd36c5f3c36a06296e55f55058938d5ce4cc83d5be052090acaa625b6f19c2\ / \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperandc5ee9b088dd78f02d0eea0801ee05c33005011bf73db14965ef1c5f8b39119ce\;
                        -- Clock cycles needed to complete this state (approximation): 10
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_82\ => 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.127\ := SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.126\ * \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperandc5ee9b088dd78f02d0eea0801ee05c33005011bf73db14965ef1c5f8b39119ce\, 32);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.128\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperandf7fd36c5f3c36a06296e55f55058938d5ce4cc83d5be052090acaa625b6f19c2\ - \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.127\;
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num111\ := (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.128\);
                        -- The following section was transformed from the .NET statement below:
                        -- int num112;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num112 = ((int)((int)(b4) & (int)(num21)));
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.129\ := SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b4\), 32) and SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num21\), 32);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num112\ := ((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.129\));
                        -- The following section was transformed from the .NET statement below:
                        -- int num113;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num113 = ((int)((int)(b4) | (int)(num21)));
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_83\;
                        -- Clock cycles needed to complete this state (approximation): 0.8857
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_83\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.130\ := SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b4\), 32) or SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num21\), 32);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num113\ := ((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.130\));
                        -- The following section was transformed from the .NET statement below:
                        -- int num114;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num114 = ((int)((int)(b4) ^ (int)(num21)));
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.131\ := SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b4\), 32) xor SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num21\), 32);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num114\ := ((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.131\));
                        -- The following section was transformed from the .NET statement below:
                        -- int num115;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num115 = b4 << (int)num32;
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.132\ := SmartResize(shift_left(SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b4\, 32), to_integer(unsigned(SmartResize(signed(SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num32\, 32)), 5)))), 32);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num115\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.132\;
                        -- The following section was transformed from the .NET statement below:
                        -- int num116;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num116 = b4 >> (int)num32;
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_84\;
                        -- Clock cycles needed to complete this state (approximation): 0.8016
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_84\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.133\ := SmartResize(shift_right(SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b4\, 32), to_integer(unsigned(SmartResize(signed(SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num32\, 32)), 5) and "11111"))), 32);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num116\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.133\;
                        -- The following section was transformed from the .NET statement below:
                        -- int num117;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num117 = (int)((int)(b4) + (int)(num32));
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.134\ := SmartResize(SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b4\), 32) + signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num32\), 32)), 32);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num117\ := (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.134\);
                        -- The following section was transformed from the .NET statement below:
                        -- int num118;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num118 = (int)((int)(b4) - (int)(num32));
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_85\;
                        -- Clock cycles needed to complete this state (approximation): 0.9742
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_85\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.135\ := SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b4\), 32) - signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num32\), 32));
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num118\ := (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.135\);
                        -- The following section was transformed from the .NET statement below:
                        -- int num119;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num119 = (int)((int)(b4) * (int)(num32));
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.136\ := SmartResize(SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b4\), 32) * signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num32\), 32)), 32);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num119\ := (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.136\);
                        -- The following section was transformed from the .NET statement below:
                        -- int num120;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num120 = (int)b4 / (int)num32;
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_86\;
                        -- Clock cycles needed to complete this state (approximation): 0.7471
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_86\ => 
                        -- Waiting for the result to appear in \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.137\ (have to wait 10 clock cycles in this state).
                        -- The assignment needs to be kept up for multi-cycle operations for the result to actually appear in the target.
                        if (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.22\ >= to_signed(10, 32)) then 
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_87\;
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.22\ := to_signed(0, 32);
                        else 
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.22\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.22\ + to_signed(1, 32);
                        end if;
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.137\ := SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b4\, 32) / signed(SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num32\, 32));
                        -- Clock cycles needed to complete this state (approximation): 10
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_87\ => 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num120\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.137\;
                        -- The following section was transformed from the .NET statement below:
                        -- int num121;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- int remainderOperand6d8cede8d70111ca361a1985df79c723b7ce711b62ea690c648a953fc49f8346;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- remainderOperand6d8cede8d70111ca361a1985df79c723b7ce711b62ea690c648a953fc49f8346 = (int)b4;
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperand6d8cede8d70111ca361a1985df79c723b7ce711b62ea690c648a953fc49f8346\ := SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b4\, 32);
                        -- The following section was transformed from the .NET statement below:
                        -- int remainderOperandac2d84469251a7f2b094378d1bb4e487b3a02527d578d9b4bf7f070b2adad76c;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- remainderOperandac2d84469251a7f2b094378d1bb4e487b3a02527d578d9b4bf7f070b2adad76c = (int)num32;
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperandac2d84469251a7f2b094378d1bb4e487b3a02527d578d9b4bf7f070b2adad76c\ := signed(SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num32\, 32));
                        -- The following section was transformed from the .NET statement below:
                        -- num121 = remainderOperand6d8cede8d70111ca361a1985df79c723b7ce711b62ea690c648a953fc49f8346 - remainderOperand6d8cede8d70111ca361a1985df79c723b7ce711b62ea690c648a953fc49f8346 / remainderOperandac2d84469251a7f2b094378d1bb4e487b3a02527d578d9b4bf7f070b2adad76c * remainderOperandac2d84469251a7f2b094378d1bb4e487b3a02527d578d9b4bf7f070b2adad76c;
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_88\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_88\ => 
                        -- Waiting for the result to appear in \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.138\ (have to wait 10 clock cycles in this state).
                        -- The assignment needs to be kept up for multi-cycle operations for the result to actually appear in the target.
                        if (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.23\ >= to_signed(10, 32)) then 
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_89\;
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.23\ := to_signed(0, 32);
                        else 
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.23\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.23\ + to_signed(1, 32);
                        end if;
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.138\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperand6d8cede8d70111ca361a1985df79c723b7ce711b62ea690c648a953fc49f8346\ / \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperandac2d84469251a7f2b094378d1bb4e487b3a02527d578d9b4bf7f070b2adad76c\;
                        -- Clock cycles needed to complete this state (approximation): 10
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_89\ => 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.139\ := SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.138\ * \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperandac2d84469251a7f2b094378d1bb4e487b3a02527d578d9b4bf7f070b2adad76c\, 32);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.140\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperand6d8cede8d70111ca361a1985df79c723b7ce711b62ea690c648a953fc49f8346\ - \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.139\;
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num121\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.140\;
                        -- The following section was transformed from the .NET statement below:
                        -- int num122;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num122 = ((int)((int)(b4) & (int)(num32)));
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.141\ := SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b4\), 32) and signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num32\), 32));
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num122\ := ((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.141\));
                        -- The following section was transformed from the .NET statement below:
                        -- int num123;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num123 = ((int)((int)(b4) | (int)(num32)));
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_90\;
                        -- Clock cycles needed to complete this state (approximation): 0.8857
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_90\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.142\ := SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b4\), 32) or signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num32\), 32));
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num123\ := ((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.142\));
                        -- The following section was transformed from the .NET statement below:
                        -- int num124;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num124 = ((int)((int)(b4) ^ (int)(num32)));
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.143\ := SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b4\), 32) xor signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num32\), 32));
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num124\ := ((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.143\));
                        -- The following section was transformed from the .NET statement below:
                        -- int num125;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num125 = b4 << input;
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.144\ := SmartResize(shift_left(SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b4\, 32), to_integer(unsigned(SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\, 5)))), 32);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num125\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.144\;
                        -- The following section was transformed from the .NET statement below:
                        -- int num126;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num126 = b4 >> input;
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_91\;
                        -- Clock cycles needed to complete this state (approximation): 0.8016
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_91\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.145\ := SmartResize(shift_right(SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b4\, 32), to_integer(unsigned(SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\, 5) and "11111"))), 32);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num126\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.145\;
                        -- The following section was transformed from the .NET statement below:
                        -- int num127;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num127 = (int)((int)(b4) + (int)(input));
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.146\ := SmartResize(SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b4\), 32) + (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\), 32);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num127\ := (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.146\);
                        -- The following section was transformed from the .NET statement below:
                        -- int num128;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num128 = (int)((int)(b4) - (int)(input));
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_92\;
                        -- Clock cycles needed to complete this state (approximation): 0.9742
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_92\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.147\ := SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b4\), 32) - (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num128\ := (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.147\);
                        -- The following section was transformed from the .NET statement below:
                        -- int num129;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num129 = (int)((int)(b4) * (int)(input));
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.148\ := SmartResize(SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b4\), 32) * (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\), 32);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num129\ := (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.148\);
                        -- The following section was transformed from the .NET statement below:
                        -- int num130;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num130 = (int)((int)(b4) / (int)(input));
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_93\;
                        -- Clock cycles needed to complete this state (approximation): 0.7471
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_93\ => 
                        -- Waiting for the result to appear in \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.149\ (have to wait 10 clock cycles in this state).
                        -- The assignment needs to be kept up for multi-cycle operations for the result to actually appear in the target.
                        if (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.24\ >= to_signed(10, 32)) then 
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_94\;
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.24\ := to_signed(0, 32);
                        else 
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.24\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.24\ + to_signed(1, 32);
                        end if;
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.149\ := SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b4\), 32) / (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\);
                        -- Clock cycles needed to complete this state (approximation): 10
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_94\ => 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num130\ := (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.149\);
                        -- The following section was transformed from the .NET statement below:
                        -- int num131;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- int remainderOperandf7fd36c5f3c36a06296e55f55058938d5ce4cc83d5be052090acaa625b6f19c2;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- remainderOperandf7fd36c5f3c36a06296e55f55058938d5ce4cc83d5be052090acaa625b6f19c2 = (int)(b4);
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperandf7fd36c5f3c36a06296e55f55058938d5ce4cc83d5be052090acaa625b6f19c2\ := SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b4\), 32);
                        -- The following section was transformed from the .NET statement below:
                        -- int remainderOperand55586d2b42b18b95e7ea5915e9a18ecf4963523e9143b4e67cef115719e52a29;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- remainderOperand55586d2b42b18b95e7ea5915e9a18ecf4963523e9143b4e67cef115719e52a29 = (int)(input);
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperand55586d2b42b18b95e7ea5915e9a18ecf4963523e9143b4e67cef115719e52a29\ := (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\);
                        -- The following section was transformed from the .NET statement below:
                        -- num131 = (int)(remainderOperandf7fd36c5f3c36a06296e55f55058938d5ce4cc83d5be052090acaa625b6f19c2 - remainderOperandf7fd36c5f3c36a06296e55f55058938d5ce4cc83d5be052090acaa625b6f19c2 / remainderOperand55586d2b42b18b95e7ea5915e9a18ecf4963523e9143b4e67cef115719e52a29 * remainderOperand55586d2b42b18b95e7ea5915e9a18ecf4963523e9143b4e67cef115719e52a29);
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_95\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_95\ => 
                        -- Waiting for the result to appear in \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.150\ (have to wait 10 clock cycles in this state).
                        -- The assignment needs to be kept up for multi-cycle operations for the result to actually appear in the target.
                        if (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.25\ >= to_signed(10, 32)) then 
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_96\;
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.25\ := to_signed(0, 32);
                        else 
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.25\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.25\ + to_signed(1, 32);
                        end if;
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.150\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperandf7fd36c5f3c36a06296e55f55058938d5ce4cc83d5be052090acaa625b6f19c2\ / \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperand55586d2b42b18b95e7ea5915e9a18ecf4963523e9143b4e67cef115719e52a29\;
                        -- Clock cycles needed to complete this state (approximation): 10
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_96\ => 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.151\ := SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.150\ * \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperand55586d2b42b18b95e7ea5915e9a18ecf4963523e9143b4e67cef115719e52a29\, 32);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.152\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperandf7fd36c5f3c36a06296e55f55058938d5ce4cc83d5be052090acaa625b6f19c2\ - \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.151\;
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num131\ := (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.152\);
                        -- The following section was transformed from the .NET statement below:
                        -- int num132;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num132 = ((int)((int)(b4) & (int)(input)));
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.153\ := SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b4\), 32) and (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num132\ := ((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.153\));
                        -- The following section was transformed from the .NET statement below:
                        -- int num133;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num133 = ((int)((int)(b4) | (int)(input)));
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_97\;
                        -- Clock cycles needed to complete this state (approximation): 0.8857
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_97\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.154\ := SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b4\), 32) or (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num133\ := ((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.154\));
                        -- The following section was transformed from the .NET statement below:
                        -- int num134;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num134 = ((int)((int)(b4) ^ (int)(input)));
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.155\ := SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b4\), 32) xor (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num134\ := ((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.155\));
                        -- The following section was transformed from the .NET statement below:
                        -- int num135;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num135 = b4 << input;
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.156\ := SmartResize(shift_left(SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b4\, 32), to_integer(unsigned(SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\, 5)))), 32);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num135\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.156\;
                        -- The following section was transformed from the .NET statement below:
                        -- int num136;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num136 = b4 >> input;
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_98\;
                        -- Clock cycles needed to complete this state (approximation): 0.8016
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_98\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.157\ := SmartResize(shift_right(SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b4\, 32), to_integer(unsigned(SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\, 5) and "11111"))), 32);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num136\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.157\;
                        -- The following section was transformed from the .NET statement below:
                        -- long num137;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num137 = (long)((long)(b4) + (long)((uint)input));
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_99\;
                        -- Clock cycles needed to complete this state (approximation): 0.6479
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_99\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.158\ := SmartResize(SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b4\), 64) + signed(SmartResize((unsigned(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\)), 64)), 64);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num137\ := (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.158\);
                        -- The following section was transformed from the .NET statement below:
                        -- long num138;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num138 = (long)((long)(b4) - (long)((uint)input));
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.159\ := SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b4\), 64) - signed(SmartResize((unsigned(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\)), 64));
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num138\ := (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.159\);
                        -- The following section was transformed from the .NET statement below:
                        -- long num139;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num139 = (long)((long)(b4) * (long)((uint)input));
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_100\;
                        -- Clock cycles needed to complete this state (approximation): 0.7796
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_100\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.160\ := SmartResize(SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b4\), 64) * signed(SmartResize((unsigned(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\)), 64)), 64);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num139\ := (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.160\);
                        -- The following section was transformed from the .NET statement below:
                        -- long num140;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num140 = (long)b4 / (long)(uint)input;
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_101\;
                        -- Clock cycles needed to complete this state (approximation): 0.7638
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_101\ => 
                        -- Waiting for the result to appear in \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.161\ (have to wait 27 clock cycles in this state).
                        -- The assignment needs to be kept up for multi-cycle operations for the result to actually appear in the target.
                        if (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.26\ >= to_signed(27, 32)) then 
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_102\;
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.26\ := to_signed(0, 32);
                        else 
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.26\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.26\ + to_signed(1, 32);
                        end if;
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.161\ := SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b4\, 64) / signed(SmartResize(unsigned(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\), 64));
                        -- Clock cycles needed to complete this state (approximation): 27
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_102\ => 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num140\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.161\;
                        -- The following section was transformed from the .NET statement below:
                        -- long num141;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- long remainderOperandfef2df461637cb1cc130c6268d1711bc86ab19c8fb374e86b74bd0a2498a54ab;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- remainderOperandfef2df461637cb1cc130c6268d1711bc86ab19c8fb374e86b74bd0a2498a54ab = (long)b4;
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperandfef2df461637cb1cc130c6268d1711bc86ab19c8fb374e86b74bd0a2498a54ab\ := SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b4\, 64);
                        -- The following section was transformed from the .NET statement below:
                        -- long remainderOperand838dc20449138906a7f16bcd0cca3e401ab50dd9612c97ebb95583809f2e8b4d;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- remainderOperand838dc20449138906a7f16bcd0cca3e401ab50dd9612c97ebb95583809f2e8b4d = (long)(uint)input;
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperand838dc20449138906a7f16bcd0cca3e401ab50dd9612c97ebb95583809f2e8b4d\ := signed(SmartResize(unsigned(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\), 64));
                        -- The following section was transformed from the .NET statement below:
                        -- num141 = remainderOperandfef2df461637cb1cc130c6268d1711bc86ab19c8fb374e86b74bd0a2498a54ab - remainderOperandfef2df461637cb1cc130c6268d1711bc86ab19c8fb374e86b74bd0a2498a54ab / remainderOperand838dc20449138906a7f16bcd0cca3e401ab50dd9612c97ebb95583809f2e8b4d * remainderOperand838dc20449138906a7f16bcd0cca3e401ab50dd9612c97ebb95583809f2e8b4d;
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_103\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_103\ => 
                        -- Waiting for the result to appear in \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.162\ (have to wait 27 clock cycles in this state).
                        -- The assignment needs to be kept up for multi-cycle operations for the result to actually appear in the target.
                        if (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.27\ >= to_signed(27, 32)) then 
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_104\;
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.27\ := to_signed(0, 32);
                        else 
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.27\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.27\ + to_signed(1, 32);
                        end if;
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.162\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperandfef2df461637cb1cc130c6268d1711bc86ab19c8fb374e86b74bd0a2498a54ab\ / \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperand838dc20449138906a7f16bcd0cca3e401ab50dd9612c97ebb95583809f2e8b4d\;
                        -- Clock cycles needed to complete this state (approximation): 27
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_104\ => 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.163\ := SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.162\ * \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperand838dc20449138906a7f16bcd0cca3e401ab50dd9612c97ebb95583809f2e8b4d\, 64);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_105\;
                        -- Clock cycles needed to complete this state (approximation): 0.7638
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_105\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.164\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperandfef2df461637cb1cc130c6268d1711bc86ab19c8fb374e86b74bd0a2498a54ab\ - \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.163\;
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num141\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.164\;
                        -- The following section was transformed from the .NET statement below:
                        -- long num142;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num142 = ((long)((long)(b4) & (long)((uint)input)));
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.165\ := SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b4\), 64) and signed(SmartResize((unsigned(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\)), 64));
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num142\ := ((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.165\));
                        -- The following section was transformed from the .NET statement below:
                        -- long num143;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num143 = ((long)((long)(b4) | (long)((uint)input)));
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.166\ := SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b4\), 64) or signed(SmartResize((unsigned(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\)), 64));
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num143\ := ((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.166\));
                        -- The following section was transformed from the .NET statement below:
                        -- long num144;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num144 = ((long)((long)(b4) ^ (long)((uint)input)));
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.167\ := SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b4\), 64) xor signed(SmartResize((unsigned(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\)), 64));
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num144\ := ((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.167\));
                        -- The following section was transformed from the .NET statement below:
                        -- int num145;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num145 = b4 << (int)num63;
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_106\;
                        -- Clock cycles needed to complete this state (approximation): 0.91
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_106\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.168\ := SmartResize(shift_left(SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b4\, 32), to_integer(unsigned(SmartResize(SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num63\, 32), 5)))), 32);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num145\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.168\;
                        -- The following section was transformed from the .NET statement below:
                        -- int num146;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num146 = b4 >> (int)num63;
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_107\;
                        -- Clock cycles needed to complete this state (approximation): 0.5244
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_107\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.169\ := SmartResize(shift_right(SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b4\, 32), to_integer(unsigned(SmartResize(SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num63\, 32), 5) and "11111"))), 32);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num146\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.169\;
                        -- The following section was transformed from the .NET statement below:
                        -- long num147;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num147 = (long)((long)(b4) + num63);
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_108\;
                        -- Clock cycles needed to complete this state (approximation): 0.6479
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_108\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.170\ := SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b4\), 64) + \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num63\;
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num147\ := (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.170\);
                        -- The following section was transformed from the .NET statement below:
                        -- long num148;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num148 = (long)((long)(b4) - num63);
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.171\ := SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b4\), 64) - \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num63\;
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num148\ := (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.171\);
                        -- The following section was transformed from the .NET statement below:
                        -- long num149;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num149 = (long)((long)(b4) * num63);
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_109\;
                        -- Clock cycles needed to complete this state (approximation): 0.7796
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_109\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.172\ := SmartResize(SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b4\), 64) * \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num63\, 64);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num149\ := (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.172\);
                        -- The following section was transformed from the .NET statement below:
                        -- long num150;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num150 = (long)((long)(b4) / num63);
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_110\;
                        -- Clock cycles needed to complete this state (approximation): 0.7638
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_110\ => 
                        -- Waiting for the result to appear in \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.173\ (have to wait 27 clock cycles in this state).
                        -- The assignment needs to be kept up for multi-cycle operations for the result to actually appear in the target.
                        if (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.28\ >= to_signed(27, 32)) then 
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_111\;
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.28\ := to_signed(0, 32);
                        else 
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.28\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.28\ + to_signed(1, 32);
                        end if;
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.173\ := SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b4\), 64) / \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num63\;
                        -- Clock cycles needed to complete this state (approximation): 27
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_111\ => 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num150\ := (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.173\);
                        -- The following section was transformed from the .NET statement below:
                        -- long num151;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- long remainderOperand912e68ba2644f768a30eaf25875bd9a02d956bfcff3422a00bbbfd004fa4af61;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- remainderOperand912e68ba2644f768a30eaf25875bd9a02d956bfcff3422a00bbbfd004fa4af61 = (long)(b4);
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperand912e68ba2644f768a30eaf25875bd9a02d956bfcff3422a00bbbfd004fa4af61\ := SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b4\), 64);
                        -- The following section was transformed from the .NET statement below:
                        -- num151 = (long)(remainderOperand912e68ba2644f768a30eaf25875bd9a02d956bfcff3422a00bbbfd004fa4af61 - remainderOperand912e68ba2644f768a30eaf25875bd9a02d956bfcff3422a00bbbfd004fa4af61 / num63 * num63);
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_112\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_112\ => 
                        -- Waiting for the result to appear in \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.174\ (have to wait 27 clock cycles in this state).
                        -- The assignment needs to be kept up for multi-cycle operations for the result to actually appear in the target.
                        if (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.29\ >= to_signed(27, 32)) then 
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_113\;
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.29\ := to_signed(0, 32);
                        else 
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.29\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.29\ + to_signed(1, 32);
                        end if;
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.174\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperand912e68ba2644f768a30eaf25875bd9a02d956bfcff3422a00bbbfd004fa4af61\ / \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num63\;
                        -- Clock cycles needed to complete this state (approximation): 27
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_113\ => 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.175\ := SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.174\ * \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num63\, 64);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_114\;
                        -- Clock cycles needed to complete this state (approximation): 0.7638
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_114\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.176\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperand912e68ba2644f768a30eaf25875bd9a02d956bfcff3422a00bbbfd004fa4af61\ - \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.175\;
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num151\ := (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.176\);
                        -- The following section was transformed from the .NET statement below:
                        -- long num152;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num152 = ((long)((long)(b4) & num63));
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.177\ := SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b4\), 64) and \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num63\;
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num152\ := ((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.177\));
                        -- The following section was transformed from the .NET statement below:
                        -- long num153;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num153 = ((long)((long)(b4) | num63));
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.178\ := SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b4\), 64) or \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num63\;
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num153\ := ((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.178\));
                        -- The following section was transformed from the .NET statement below:
                        -- long num154;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num154 = ((long)((long)(b4) ^ num63));
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.179\ := SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b4\), 64) xor \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num63\;
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num154\ := ((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.179\));
                        -- The following section was transformed from the .NET statement below:
                        -- int num155;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num155 = b4 << (int)num74;
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_115\;
                        -- Clock cycles needed to complete this state (approximation): 0.91
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_115\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.180\ := SmartResize(shift_left(SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b4\, 32), to_integer(unsigned(SmartResize(signed(SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num74\, 32)), 5)))), 32);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num155\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.180\;
                        -- The following section was transformed from the .NET statement below:
                        -- int num156;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num156 = b4 >> (int)num74;
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_116\;
                        -- Clock cycles needed to complete this state (approximation): 0.5244
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_116\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.181\ := SmartResize(shift_right(SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b4\, 32), to_integer(unsigned(SmartResize(signed(SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num74\, 32)), 5) and "11111"))), 32);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num156\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.181\;
                        -- The following section was transformed from the .NET statement below:
                        -- short num157;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num157 = (short)input;
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num157\ := SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\, 16);
                        -- The following section was transformed from the .NET statement below:
                        -- int num158;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num158 = num157 << (int)b2;
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_117\;
                        -- Clock cycles needed to complete this state (approximation): 0.6479
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_117\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.182\ := SmartResize(shift_left(SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num157\, 32), to_integer(unsigned(SmartResize(signed(SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b2\, 32)), 5)))), 32);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num158\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.182\;
                        -- The following section was transformed from the .NET statement below:
                        -- int num159;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num159 = num157 >> (int)b2;
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_118\;
                        -- Clock cycles needed to complete this state (approximation): 0.5244
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_118\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.183\ := SmartResize(shift_right(SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num157\, 32), to_integer(unsigned(SmartResize(signed(SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b2\, 32)), 5) and "11111"))), 32);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num159\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.183\;
                        -- The following section was transformed from the .NET statement below:
                        -- int num160;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num160 = (int)((int)(num157) + (int)(b2));
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.184\ := SmartResize(SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num157\), 32) + signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b2\), 32)), 32);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num160\ := (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.184\);
                        -- The following section was transformed from the .NET statement below:
                        -- int num161;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num161 = (int)((int)(num157) - (int)(b2));
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_119\;
                        -- Clock cycles needed to complete this state (approximation): 0.9742
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_119\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.185\ := SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num157\), 32) - signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b2\), 32));
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num161\ := (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.185\);
                        -- The following section was transformed from the .NET statement below:
                        -- int num162;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num162 = (int)((int)(num157) * (int)(b2));
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.186\ := SmartResize(SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num157\), 32) * signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b2\), 32)), 32);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num162\ := (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.186\);
                        -- The following section was transformed from the .NET statement below:
                        -- int num163;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num163 = (int)num157 / (int)b2;
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_120\;
                        -- Clock cycles needed to complete this state (approximation): 0.7471
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_120\ => 
                        -- Waiting for the result to appear in \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.187\ (have to wait 10 clock cycles in this state).
                        -- The assignment needs to be kept up for multi-cycle operations for the result to actually appear in the target.
                        if (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.30\ >= to_signed(10, 32)) then 
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_121\;
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.30\ := to_signed(0, 32);
                        else 
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.30\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.30\ + to_signed(1, 32);
                        end if;
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.187\ := SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num157\, 32) / signed(SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b2\, 32));
                        -- Clock cycles needed to complete this state (approximation): 10
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_121\ => 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num163\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.187\;
                        -- The following section was transformed from the .NET statement below:
                        -- int num164;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- int remainderOperand033b366fa1571fbf8ca63821ade5469843d14d3351dc061d7fb3e08d605c96d5;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- remainderOperand033b366fa1571fbf8ca63821ade5469843d14d3351dc061d7fb3e08d605c96d5 = (int)num157;
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperand033b366fa1571fbf8ca63821ade5469843d14d3351dc061d7fb3e08d605c96d5\ := SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num157\, 32);
                        -- The following section was transformed from the .NET statement below:
                        -- int remainderOperandefb5053f4e77ffd15920919821d1b736d3db1e0fd89b385eef9b7790a8d5a8bd;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- remainderOperandefb5053f4e77ffd15920919821d1b736d3db1e0fd89b385eef9b7790a8d5a8bd = (int)b2;
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperandefb5053f4e77ffd15920919821d1b736d3db1e0fd89b385eef9b7790a8d5a8bd\ := signed(SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b2\, 32));
                        -- The following section was transformed from the .NET statement below:
                        -- num164 = remainderOperand033b366fa1571fbf8ca63821ade5469843d14d3351dc061d7fb3e08d605c96d5 - remainderOperand033b366fa1571fbf8ca63821ade5469843d14d3351dc061d7fb3e08d605c96d5 / remainderOperandefb5053f4e77ffd15920919821d1b736d3db1e0fd89b385eef9b7790a8d5a8bd * remainderOperandefb5053f4e77ffd15920919821d1b736d3db1e0fd89b385eef9b7790a8d5a8bd;
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_122\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_122\ => 
                        -- Waiting for the result to appear in \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.188\ (have to wait 10 clock cycles in this state).
                        -- The assignment needs to be kept up for multi-cycle operations for the result to actually appear in the target.
                        if (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.31\ >= to_signed(10, 32)) then 
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_123\;
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.31\ := to_signed(0, 32);
                        else 
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.31\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.31\ + to_signed(1, 32);
                        end if;
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.188\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperand033b366fa1571fbf8ca63821ade5469843d14d3351dc061d7fb3e08d605c96d5\ / \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperandefb5053f4e77ffd15920919821d1b736d3db1e0fd89b385eef9b7790a8d5a8bd\;
                        -- Clock cycles needed to complete this state (approximation): 10
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_123\ => 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.189\ := SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.188\ * \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperandefb5053f4e77ffd15920919821d1b736d3db1e0fd89b385eef9b7790a8d5a8bd\, 32);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.190\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperand033b366fa1571fbf8ca63821ade5469843d14d3351dc061d7fb3e08d605c96d5\ - \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.189\;
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num164\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.190\;
                        -- The following section was transformed from the .NET statement below:
                        -- int num165;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num165 = ((int)((int)(num157) & (int)(b2)));
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.191\ := SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num157\), 32) and signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b2\), 32));
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num165\ := ((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.191\));
                        -- The following section was transformed from the .NET statement below:
                        -- int num166;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num166 = ((int)((int)(num157) | (int)(b2)));
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_124\;
                        -- Clock cycles needed to complete this state (approximation): 0.8857
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_124\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.192\ := SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num157\), 32) or signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b2\), 32));
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num166\ := ((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.192\));
                        -- The following section was transformed from the .NET statement below:
                        -- int num167;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num167 = ((int)((int)(num157) ^ (int)(b2)));
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.193\ := SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num157\), 32) xor signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b2\), 32));
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num167\ := ((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.193\));
                        -- The following section was transformed from the .NET statement below:
                        -- int num168;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num168 = num157 << (int)b3;
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.194\ := SmartResize(shift_left(SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num157\, 32), to_integer(unsigned(SmartResize(SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b3\, 32), 5)))), 32);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num168\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.194\;
                        -- The following section was transformed from the .NET statement below:
                        -- int num169;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num169 = num157 >> (int)b3;
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_125\;
                        -- Clock cycles needed to complete this state (approximation): 0.8016
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_125\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.195\ := SmartResize(shift_right(SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num157\, 32), to_integer(unsigned(SmartResize(SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b3\, 32), 5) and "11111"))), 32);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num169\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.195\;
                        -- The following section was transformed from the .NET statement below:
                        -- int num170;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num170 = (int)((int)(num157) + (int)(b3));
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.196\ := SmartResize(SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num157\), 32) + SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b3\), 32), 32);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num170\ := (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.196\);
                        -- The following section was transformed from the .NET statement below:
                        -- int num171;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num171 = (int)((int)(num157) - (int)(b3));
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_126\;
                        -- Clock cycles needed to complete this state (approximation): 0.9742
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_126\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.197\ := SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num157\), 32) - SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b3\), 32);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num171\ := (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.197\);
                        -- The following section was transformed from the .NET statement below:
                        -- int num172;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num172 = (int)((int)(num157) * (int)(b3));
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.198\ := SmartResize(SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num157\), 32) * SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b3\), 32), 32);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num172\ := (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.198\);
                        -- The following section was transformed from the .NET statement below:
                        -- int num173;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num173 = (int)((int)(num157) / (int)(b3));
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_127\;
                        -- Clock cycles needed to complete this state (approximation): 0.7471
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_127\ => 
                        -- Waiting for the result to appear in \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.199\ (have to wait 10 clock cycles in this state).
                        -- The assignment needs to be kept up for multi-cycle operations for the result to actually appear in the target.
                        if (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.32\ >= to_signed(10, 32)) then 
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_128\;
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.32\ := to_signed(0, 32);
                        else 
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.32\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.32\ + to_signed(1, 32);
                        end if;
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.199\ := SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num157\), 32) / SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b3\), 32);
                        -- Clock cycles needed to complete this state (approximation): 10
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_128\ => 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num173\ := (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.199\);
                        -- The following section was transformed from the .NET statement below:
                        -- int num174;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- int remainderOperandcede095fbb8c8658418d12c0d44ff3490e2e194ada1ee6b234f52ae2523bcc92;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- remainderOperandcede095fbb8c8658418d12c0d44ff3490e2e194ada1ee6b234f52ae2523bcc92 = (int)(num157);
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperandcede095fbb8c8658418d12c0d44ff3490e2e194ada1ee6b234f52ae2523bcc92\ := SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num157\), 32);
                        -- The following section was transformed from the .NET statement below:
                        -- int remainderOperand68798c761018f1346ae01a4a965252f4d790df620e22a5fd736220a79a7f0b21;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- remainderOperand68798c761018f1346ae01a4a965252f4d790df620e22a5fd736220a79a7f0b21 = (int)(b3);
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperand68798c761018f1346ae01a4a965252f4d790df620e22a5fd736220a79a7f0b21\ := SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b3\), 32);
                        -- The following section was transformed from the .NET statement below:
                        -- num174 = (int)(remainderOperandcede095fbb8c8658418d12c0d44ff3490e2e194ada1ee6b234f52ae2523bcc92 - remainderOperandcede095fbb8c8658418d12c0d44ff3490e2e194ada1ee6b234f52ae2523bcc92 / remainderOperand68798c761018f1346ae01a4a965252f4d790df620e22a5fd736220a79a7f0b21 * remainderOperand68798c761018f1346ae01a4a965252f4d790df620e22a5fd736220a79a7f0b21);
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_129\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_129\ => 
                        -- Waiting for the result to appear in \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.200\ (have to wait 10 clock cycles in this state).
                        -- The assignment needs to be kept up for multi-cycle operations for the result to actually appear in the target.
                        if (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.33\ >= to_signed(10, 32)) then 
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_130\;
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.33\ := to_signed(0, 32);
                        else 
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.33\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.33\ + to_signed(1, 32);
                        end if;
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.200\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperandcede095fbb8c8658418d12c0d44ff3490e2e194ada1ee6b234f52ae2523bcc92\ / \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperand68798c761018f1346ae01a4a965252f4d790df620e22a5fd736220a79a7f0b21\;
                        -- Clock cycles needed to complete this state (approximation): 10
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_130\ => 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.201\ := SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.200\ * \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperand68798c761018f1346ae01a4a965252f4d790df620e22a5fd736220a79a7f0b21\, 32);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.202\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperandcede095fbb8c8658418d12c0d44ff3490e2e194ada1ee6b234f52ae2523bcc92\ - \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.201\;
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num174\ := (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.202\);
                        -- The following section was transformed from the .NET statement below:
                        -- int num175;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num175 = ((int)((int)(num157) & (int)(b3)));
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.203\ := SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num157\), 32) and SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b3\), 32);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num175\ := ((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.203\));
                        -- The following section was transformed from the .NET statement below:
                        -- int num176;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num176 = ((int)((int)(num157) | (int)(b3)));
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_131\;
                        -- Clock cycles needed to complete this state (approximation): 0.8857
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_131\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.204\ := SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num157\), 32) or SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b3\), 32);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num176\ := ((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.204\));
                        -- The following section was transformed from the .NET statement below:
                        -- int num177;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num177 = ((int)((int)(num157) ^ (int)(b3)));
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.205\ := SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num157\), 32) xor SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b3\), 32);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num177\ := ((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.205\));
                        -- The following section was transformed from the .NET statement below:
                        -- int num178;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num178 = num157 << (int)num21;
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.206\ := SmartResize(shift_left(SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num157\, 32), to_integer(unsigned(SmartResize(SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num21\, 32), 5)))), 32);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num178\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.206\;
                        -- The following section was transformed from the .NET statement below:
                        -- int num179;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num179 = num157 >> (int)num21;
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_132\;
                        -- Clock cycles needed to complete this state (approximation): 0.8016
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_132\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.207\ := SmartResize(shift_right(SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num157\, 32), to_integer(unsigned(SmartResize(SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num21\, 32), 5) and "11111"))), 32);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num179\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.207\;
                        -- The following section was transformed from the .NET statement below:
                        -- int num180;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num180 = (int)((int)(num157) + (int)(num21));
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.208\ := SmartResize(SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num157\), 32) + SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num21\), 32), 32);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num180\ := (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.208\);
                        -- The following section was transformed from the .NET statement below:
                        -- int num181;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num181 = (int)((int)(num157) - (int)(num21));
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_133\;
                        -- Clock cycles needed to complete this state (approximation): 0.9742
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_133\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.209\ := SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num157\), 32) - SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num21\), 32);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num181\ := (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.209\);
                        -- The following section was transformed from the .NET statement below:
                        -- int num182;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num182 = (int)((int)(num157) * (int)(num21));
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.210\ := SmartResize(SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num157\), 32) * SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num21\), 32), 32);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num182\ := (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.210\);
                        -- The following section was transformed from the .NET statement below:
                        -- int num183;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num183 = (int)((int)(num157) / (int)(num21));
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_134\;
                        -- Clock cycles needed to complete this state (approximation): 0.7471
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_134\ => 
                        -- Waiting for the result to appear in \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.211\ (have to wait 10 clock cycles in this state).
                        -- The assignment needs to be kept up for multi-cycle operations for the result to actually appear in the target.
                        if (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.34\ >= to_signed(10, 32)) then 
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_135\;
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.34\ := to_signed(0, 32);
                        else 
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.34\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.34\ + to_signed(1, 32);
                        end if;
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.211\ := SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num157\), 32) / SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num21\), 32);
                        -- Clock cycles needed to complete this state (approximation): 10
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_135\ => 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num183\ := (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.211\);
                        -- The following section was transformed from the .NET statement below:
                        -- int num184;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- int remainderOperandcede095fbb8c8658418d12c0d44ff3490e2e194ada1ee6b234f52ae2523bcc92;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- remainderOperandcede095fbb8c8658418d12c0d44ff3490e2e194ada1ee6b234f52ae2523bcc92 = (int)(num157);
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperandcede095fbb8c8658418d12c0d44ff3490e2e194ada1ee6b234f52ae2523bcc92\ := SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num157\), 32);
                        -- The following section was transformed from the .NET statement below:
                        -- int remainderOperandc5ee9b088dd78f02d0eea0801ee05c33005011bf73db14965ef1c5f8b39119ce;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- remainderOperandc5ee9b088dd78f02d0eea0801ee05c33005011bf73db14965ef1c5f8b39119ce = (int)(num21);
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperandc5ee9b088dd78f02d0eea0801ee05c33005011bf73db14965ef1c5f8b39119ce\ := SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num21\), 32);
                        -- The following section was transformed from the .NET statement below:
                        -- num184 = (int)(remainderOperandcede095fbb8c8658418d12c0d44ff3490e2e194ada1ee6b234f52ae2523bcc92 - remainderOperandcede095fbb8c8658418d12c0d44ff3490e2e194ada1ee6b234f52ae2523bcc92 / remainderOperandc5ee9b088dd78f02d0eea0801ee05c33005011bf73db14965ef1c5f8b39119ce * remainderOperandc5ee9b088dd78f02d0eea0801ee05c33005011bf73db14965ef1c5f8b39119ce);
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_136\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_136\ => 
                        -- Waiting for the result to appear in \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.212\ (have to wait 10 clock cycles in this state).
                        -- The assignment needs to be kept up for multi-cycle operations for the result to actually appear in the target.
                        if (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.35\ >= to_signed(10, 32)) then 
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_137\;
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.35\ := to_signed(0, 32);
                        else 
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.35\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.35\ + to_signed(1, 32);
                        end if;
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.212\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperandcede095fbb8c8658418d12c0d44ff3490e2e194ada1ee6b234f52ae2523bcc92\ / \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperandc5ee9b088dd78f02d0eea0801ee05c33005011bf73db14965ef1c5f8b39119ce\;
                        -- Clock cycles needed to complete this state (approximation): 10
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_137\ => 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.213\ := SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.212\ * \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperandc5ee9b088dd78f02d0eea0801ee05c33005011bf73db14965ef1c5f8b39119ce\, 32);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.214\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperandcede095fbb8c8658418d12c0d44ff3490e2e194ada1ee6b234f52ae2523bcc92\ - \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.213\;
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num184\ := (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.214\);
                        -- The following section was transformed from the .NET statement below:
                        -- int num185;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num185 = ((int)((int)(num157) & (int)(num21)));
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.215\ := SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num157\), 32) and SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num21\), 32);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num185\ := ((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.215\));
                        -- The following section was transformed from the .NET statement below:
                        -- int num186;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num186 = ((int)((int)(num157) | (int)(num21)));
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_138\;
                        -- Clock cycles needed to complete this state (approximation): 0.8857
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_138\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.216\ := SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num157\), 32) or SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num21\), 32);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num186\ := ((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.216\));
                        -- The following section was transformed from the .NET statement below:
                        -- int num187;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num187 = ((int)((int)(num157) ^ (int)(num21)));
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.217\ := SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num157\), 32) xor SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num21\), 32);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num187\ := ((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.217\));
                        -- The following section was transformed from the .NET statement below:
                        -- int num188;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num188 = num157 << (int)num32;
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.218\ := SmartResize(shift_left(SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num157\, 32), to_integer(unsigned(SmartResize(signed(SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num32\, 32)), 5)))), 32);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num188\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.218\;
                        -- The following section was transformed from the .NET statement below:
                        -- int num189;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num189 = num157 >> (int)num32;
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_139\;
                        -- Clock cycles needed to complete this state (approximation): 0.8016
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_139\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.219\ := SmartResize(shift_right(SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num157\, 32), to_integer(unsigned(SmartResize(signed(SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num32\, 32)), 5) and "11111"))), 32);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num189\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.219\;
                        -- The following section was transformed from the .NET statement below:
                        -- int num190;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num190 = (int)((int)(num157) + (int)(num32));
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.220\ := SmartResize(SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num157\), 32) + signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num32\), 32)), 32);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num190\ := (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.220\);
                        -- The following section was transformed from the .NET statement below:
                        -- int num191;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num191 = (int)((int)(num157) - (int)(num32));
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_140\;
                        -- Clock cycles needed to complete this state (approximation): 0.9742
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_140\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.221\ := SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num157\), 32) - signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num32\), 32));
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num191\ := (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.221\);
                        -- The following section was transformed from the .NET statement below:
                        -- int num192;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num192 = (int)((int)(num157) * (int)(num32));
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.222\ := SmartResize(SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num157\), 32) * signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num32\), 32)), 32);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num192\ := (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.222\);
                        -- The following section was transformed from the .NET statement below:
                        -- int num193;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num193 = (int)num157 / (int)num32;
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_141\;
                        -- Clock cycles needed to complete this state (approximation): 0.7471
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_141\ => 
                        -- Waiting for the result to appear in \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.223\ (have to wait 10 clock cycles in this state).
                        -- The assignment needs to be kept up for multi-cycle operations for the result to actually appear in the target.
                        if (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.36\ >= to_signed(10, 32)) then 
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_142\;
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.36\ := to_signed(0, 32);
                        else 
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.36\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.36\ + to_signed(1, 32);
                        end if;
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.223\ := SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num157\, 32) / signed(SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num32\, 32));
                        -- Clock cycles needed to complete this state (approximation): 10
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_142\ => 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num193\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.223\;
                        -- The following section was transformed from the .NET statement below:
                        -- int num194;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- int remainderOperand033b366fa1571fbf8ca63821ade5469843d14d3351dc061d7fb3e08d605c96d5;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- remainderOperand033b366fa1571fbf8ca63821ade5469843d14d3351dc061d7fb3e08d605c96d5 = (int)num157;
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperand033b366fa1571fbf8ca63821ade5469843d14d3351dc061d7fb3e08d605c96d5\ := SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num157\, 32);
                        -- The following section was transformed from the .NET statement below:
                        -- int remainderOperandac2d84469251a7f2b094378d1bb4e487b3a02527d578d9b4bf7f070b2adad76c;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- remainderOperandac2d84469251a7f2b094378d1bb4e487b3a02527d578d9b4bf7f070b2adad76c = (int)num32;
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperandac2d84469251a7f2b094378d1bb4e487b3a02527d578d9b4bf7f070b2adad76c\ := signed(SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num32\, 32));
                        -- The following section was transformed from the .NET statement below:
                        -- num194 = remainderOperand033b366fa1571fbf8ca63821ade5469843d14d3351dc061d7fb3e08d605c96d5 - remainderOperand033b366fa1571fbf8ca63821ade5469843d14d3351dc061d7fb3e08d605c96d5 / remainderOperandac2d84469251a7f2b094378d1bb4e487b3a02527d578d9b4bf7f070b2adad76c * remainderOperandac2d84469251a7f2b094378d1bb4e487b3a02527d578d9b4bf7f070b2adad76c;
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_143\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_143\ => 
                        -- Waiting for the result to appear in \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.224\ (have to wait 10 clock cycles in this state).
                        -- The assignment needs to be kept up for multi-cycle operations for the result to actually appear in the target.
                        if (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.37\ >= to_signed(10, 32)) then 
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_144\;
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.37\ := to_signed(0, 32);
                        else 
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.37\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.37\ + to_signed(1, 32);
                        end if;
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.224\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperand033b366fa1571fbf8ca63821ade5469843d14d3351dc061d7fb3e08d605c96d5\ / \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperandac2d84469251a7f2b094378d1bb4e487b3a02527d578d9b4bf7f070b2adad76c\;
                        -- Clock cycles needed to complete this state (approximation): 10
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_144\ => 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.225\ := SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.224\ * \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperandac2d84469251a7f2b094378d1bb4e487b3a02527d578d9b4bf7f070b2adad76c\, 32);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.226\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperand033b366fa1571fbf8ca63821ade5469843d14d3351dc061d7fb3e08d605c96d5\ - \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.225\;
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num194\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.226\;
                        -- The following section was transformed from the .NET statement below:
                        -- int num195;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num195 = ((int)((int)(num157) & (int)(num32)));
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.227\ := SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num157\), 32) and signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num32\), 32));
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num195\ := ((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.227\));
                        -- The following section was transformed from the .NET statement below:
                        -- int num196;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num196 = ((int)((int)(num157) | (int)(num32)));
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_145\;
                        -- Clock cycles needed to complete this state (approximation): 0.8857
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_145\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.228\ := SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num157\), 32) or signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num32\), 32));
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num196\ := ((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.228\));
                        -- The following section was transformed from the .NET statement below:
                        -- int num197;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num197 = ((int)((int)(num157) ^ (int)(num32)));
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.229\ := SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num157\), 32) xor signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num32\), 32));
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num197\ := ((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.229\));
                        -- The following section was transformed from the .NET statement below:
                        -- int num198;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num198 = num157 << input;
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.230\ := SmartResize(shift_left(SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num157\, 32), to_integer(unsigned(SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\, 5)))), 32);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num198\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.230\;
                        -- The following section was transformed from the .NET statement below:
                        -- int num199;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num199 = num157 >> input;
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_146\;
                        -- Clock cycles needed to complete this state (approximation): 0.8016
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_146\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.231\ := SmartResize(shift_right(SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num157\, 32), to_integer(unsigned(SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\, 5) and "11111"))), 32);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num199\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.231\;
                        -- The following section was transformed from the .NET statement below:
                        -- int num200;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num200 = (int)((int)(num157) + (int)(input));
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.232\ := SmartResize(SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num157\), 32) + (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\), 32);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num200\ := (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.232\);
                        -- The following section was transformed from the .NET statement below:
                        -- int num201;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num201 = (int)((int)(num157) - (int)(input));
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_147\;
                        -- Clock cycles needed to complete this state (approximation): 0.9742
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_147\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.233\ := SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num157\), 32) - (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num201\ := (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.233\);
                        -- The following section was transformed from the .NET statement below:
                        -- int num202;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num202 = (int)((int)(num157) * (int)(input));
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.234\ := SmartResize(SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num157\), 32) * (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\), 32);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num202\ := (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.234\);
                        -- The following section was transformed from the .NET statement below:
                        -- int num203;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num203 = (int)((int)(num157) / (int)(input));
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_148\;
                        -- Clock cycles needed to complete this state (approximation): 0.7471
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_148\ => 
                        -- Waiting for the result to appear in \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.235\ (have to wait 10 clock cycles in this state).
                        -- The assignment needs to be kept up for multi-cycle operations for the result to actually appear in the target.
                        if (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.38\ >= to_signed(10, 32)) then 
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_149\;
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.38\ := to_signed(0, 32);
                        else 
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.38\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.38\ + to_signed(1, 32);
                        end if;
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.235\ := SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num157\), 32) / (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\);
                        -- Clock cycles needed to complete this state (approximation): 10
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_149\ => 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num203\ := (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.235\);
                        -- The following section was transformed from the .NET statement below:
                        -- int num204;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- int remainderOperandcede095fbb8c8658418d12c0d44ff3490e2e194ada1ee6b234f52ae2523bcc92;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- remainderOperandcede095fbb8c8658418d12c0d44ff3490e2e194ada1ee6b234f52ae2523bcc92 = (int)(num157);
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperandcede095fbb8c8658418d12c0d44ff3490e2e194ada1ee6b234f52ae2523bcc92\ := SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num157\), 32);
                        -- The following section was transformed from the .NET statement below:
                        -- int remainderOperand55586d2b42b18b95e7ea5915e9a18ecf4963523e9143b4e67cef115719e52a29;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- remainderOperand55586d2b42b18b95e7ea5915e9a18ecf4963523e9143b4e67cef115719e52a29 = (int)(input);
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperand55586d2b42b18b95e7ea5915e9a18ecf4963523e9143b4e67cef115719e52a29\ := (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\);
                        -- The following section was transformed from the .NET statement below:
                        -- num204 = (int)(remainderOperandcede095fbb8c8658418d12c0d44ff3490e2e194ada1ee6b234f52ae2523bcc92 - remainderOperandcede095fbb8c8658418d12c0d44ff3490e2e194ada1ee6b234f52ae2523bcc92 / remainderOperand55586d2b42b18b95e7ea5915e9a18ecf4963523e9143b4e67cef115719e52a29 * remainderOperand55586d2b42b18b95e7ea5915e9a18ecf4963523e9143b4e67cef115719e52a29);
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_150\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_150\ => 
                        -- Waiting for the result to appear in \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.236\ (have to wait 10 clock cycles in this state).
                        -- The assignment needs to be kept up for multi-cycle operations for the result to actually appear in the target.
                        if (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.39\ >= to_signed(10, 32)) then 
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_151\;
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.39\ := to_signed(0, 32);
                        else 
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.39\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.39\ + to_signed(1, 32);
                        end if;
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.236\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperandcede095fbb8c8658418d12c0d44ff3490e2e194ada1ee6b234f52ae2523bcc92\ / \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperand55586d2b42b18b95e7ea5915e9a18ecf4963523e9143b4e67cef115719e52a29\;
                        -- Clock cycles needed to complete this state (approximation): 10
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_151\ => 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.237\ := SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.236\ * \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperand55586d2b42b18b95e7ea5915e9a18ecf4963523e9143b4e67cef115719e52a29\, 32);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.238\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperandcede095fbb8c8658418d12c0d44ff3490e2e194ada1ee6b234f52ae2523bcc92\ - \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.237\;
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num204\ := (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.238\);
                        -- The following section was transformed from the .NET statement below:
                        -- int num205;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num205 = ((int)((int)(num157) & (int)(input)));
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.239\ := SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num157\), 32) and (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num205\ := ((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.239\));
                        -- The following section was transformed from the .NET statement below:
                        -- int num206;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num206 = ((int)((int)(num157) | (int)(input)));
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_152\;
                        -- Clock cycles needed to complete this state (approximation): 0.8857
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_152\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.240\ := SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num157\), 32) or (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num206\ := ((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.240\));
                        -- The following section was transformed from the .NET statement below:
                        -- int num207;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num207 = ((int)((int)(num157) ^ (int)(input)));
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.241\ := SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num157\), 32) xor (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num207\ := ((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.241\));
                        -- The following section was transformed from the .NET statement below:
                        -- int num208;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num208 = num157 << input;
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.242\ := SmartResize(shift_left(SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num157\, 32), to_integer(unsigned(SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\, 5)))), 32);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num208\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.242\;
                        -- The following section was transformed from the .NET statement below:
                        -- int num209;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num209 = num157 >> input;
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_153\;
                        -- Clock cycles needed to complete this state (approximation): 0.8016
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_153\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.243\ := SmartResize(shift_right(SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num157\, 32), to_integer(unsigned(SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\, 5) and "11111"))), 32);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num209\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.243\;
                        -- The following section was transformed from the .NET statement below:
                        -- long num210;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num210 = (long)((long)(num157) + (long)((uint)input));
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_154\;
                        -- Clock cycles needed to complete this state (approximation): 0.6479
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_154\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.244\ := SmartResize(SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num157\), 64) + signed(SmartResize((unsigned(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\)), 64)), 64);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num210\ := (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.244\);
                        -- The following section was transformed from the .NET statement below:
                        -- long num211;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num211 = (long)((long)(num157) - (long)((uint)input));
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.245\ := SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num157\), 64) - signed(SmartResize((unsigned(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\)), 64));
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num211\ := (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.245\);
                        -- The following section was transformed from the .NET statement below:
                        -- long num212;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num212 = (long)((long)(num157) * (long)((uint)input));
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_155\;
                        -- Clock cycles needed to complete this state (approximation): 0.7796
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_155\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.246\ := SmartResize(SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num157\), 64) * signed(SmartResize((unsigned(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\)), 64)), 64);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num212\ := (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.246\);
                        -- The following section was transformed from the .NET statement below:
                        -- long num213;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num213 = (long)num157 / (long)(uint)input;
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_156\;
                        -- Clock cycles needed to complete this state (approximation): 0.7638
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_156\ => 
                        -- Waiting for the result to appear in \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.247\ (have to wait 27 clock cycles in this state).
                        -- The assignment needs to be kept up for multi-cycle operations for the result to actually appear in the target.
                        if (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.40\ >= to_signed(27, 32)) then 
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_157\;
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.40\ := to_signed(0, 32);
                        else 
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.40\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.40\ + to_signed(1, 32);
                        end if;
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.247\ := SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num157\, 64) / signed(SmartResize(unsigned(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\), 64));
                        -- Clock cycles needed to complete this state (approximation): 27
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_157\ => 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num213\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.247\;
                        -- The following section was transformed from the .NET statement below:
                        -- long num214;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- long remainderOperand421be12b093d27d26687a865d4e11d5515aa3ecae4344c565491aa5dd5d91929;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- remainderOperand421be12b093d27d26687a865d4e11d5515aa3ecae4344c565491aa5dd5d91929 = (long)num157;
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperand421be12b093d27d26687a865d4e11d5515aa3ecae4344c565491aa5dd5d91929\ := SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num157\, 64);
                        -- The following section was transformed from the .NET statement below:
                        -- long remainderOperand838dc20449138906a7f16bcd0cca3e401ab50dd9612c97ebb95583809f2e8b4d;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- remainderOperand838dc20449138906a7f16bcd0cca3e401ab50dd9612c97ebb95583809f2e8b4d = (long)(uint)input;
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperand838dc20449138906a7f16bcd0cca3e401ab50dd9612c97ebb95583809f2e8b4d\ := signed(SmartResize(unsigned(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\), 64));
                        -- The following section was transformed from the .NET statement below:
                        -- num214 = remainderOperand421be12b093d27d26687a865d4e11d5515aa3ecae4344c565491aa5dd5d91929 - remainderOperand421be12b093d27d26687a865d4e11d5515aa3ecae4344c565491aa5dd5d91929 / remainderOperand838dc20449138906a7f16bcd0cca3e401ab50dd9612c97ebb95583809f2e8b4d * remainderOperand838dc20449138906a7f16bcd0cca3e401ab50dd9612c97ebb95583809f2e8b4d;
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_158\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_158\ => 
                        -- Waiting for the result to appear in \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.248\ (have to wait 27 clock cycles in this state).
                        -- The assignment needs to be kept up for multi-cycle operations for the result to actually appear in the target.
                        if (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.41\ >= to_signed(27, 32)) then 
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_159\;
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.41\ := to_signed(0, 32);
                        else 
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.41\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.41\ + to_signed(1, 32);
                        end if;
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.248\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperand421be12b093d27d26687a865d4e11d5515aa3ecae4344c565491aa5dd5d91929\ / \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperand838dc20449138906a7f16bcd0cca3e401ab50dd9612c97ebb95583809f2e8b4d\;
                        -- Clock cycles needed to complete this state (approximation): 27
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_159\ => 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.249\ := SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.248\ * \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperand838dc20449138906a7f16bcd0cca3e401ab50dd9612c97ebb95583809f2e8b4d\, 64);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_160\;
                        -- Clock cycles needed to complete this state (approximation): 0.7638
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_160\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.250\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperand421be12b093d27d26687a865d4e11d5515aa3ecae4344c565491aa5dd5d91929\ - \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.249\;
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num214\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.250\;
                        -- The following section was transformed from the .NET statement below:
                        -- long num215;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num215 = ((long)((long)(num157) & (long)((uint)input)));
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.251\ := SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num157\), 64) and signed(SmartResize((unsigned(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\)), 64));
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num215\ := ((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.251\));
                        -- The following section was transformed from the .NET statement below:
                        -- long num216;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num216 = ((long)((long)(num157) | (long)((uint)input)));
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.252\ := SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num157\), 64) or signed(SmartResize((unsigned(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\)), 64));
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num216\ := ((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.252\));
                        -- The following section was transformed from the .NET statement below:
                        -- long num217;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num217 = ((long)((long)(num157) ^ (long)((uint)input)));
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.253\ := SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num157\), 64) xor signed(SmartResize((unsigned(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\)), 64));
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num217\ := ((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.253\));
                        -- The following section was transformed from the .NET statement below:
                        -- int num218;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num218 = num157 << (int)num63;
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_161\;
                        -- Clock cycles needed to complete this state (approximation): 0.91
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_161\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.254\ := SmartResize(shift_left(SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num157\, 32), to_integer(unsigned(SmartResize(SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num63\, 32), 5)))), 32);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num218\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.254\;
                        -- The following section was transformed from the .NET statement below:
                        -- int num219;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num219 = num157 >> (int)num63;
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_162\;
                        -- Clock cycles needed to complete this state (approximation): 0.5244
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_162\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.255\ := SmartResize(shift_right(SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num157\, 32), to_integer(unsigned(SmartResize(SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num63\, 32), 5) and "11111"))), 32);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num219\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.255\;
                        -- The following section was transformed from the .NET statement below:
                        -- long num220;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num220 = (long)((long)(num157) + num63);
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_163\;
                        -- Clock cycles needed to complete this state (approximation): 0.6479
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_163\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.256\ := SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num157\), 64) + \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num63\;
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num220\ := (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.256\);
                        -- The following section was transformed from the .NET statement below:
                        -- long num221;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num221 = (long)((long)(num157) - num63);
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.257\ := SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num157\), 64) - \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num63\;
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num221\ := (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.257\);
                        -- The following section was transformed from the .NET statement below:
                        -- long num222;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num222 = (long)((long)(num157) * num63);
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_164\;
                        -- Clock cycles needed to complete this state (approximation): 0.7796
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_164\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.258\ := SmartResize(SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num157\), 64) * \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num63\, 64);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num222\ := (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.258\);
                        -- The following section was transformed from the .NET statement below:
                        -- long num223;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num223 = (long)((long)(num157) / num63);
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_165\;
                        -- Clock cycles needed to complete this state (approximation): 0.7638
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_165\ => 
                        -- Waiting for the result to appear in \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.259\ (have to wait 27 clock cycles in this state).
                        -- The assignment needs to be kept up for multi-cycle operations for the result to actually appear in the target.
                        if (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.42\ >= to_signed(27, 32)) then 
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_166\;
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.42\ := to_signed(0, 32);
                        else 
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.42\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.42\ + to_signed(1, 32);
                        end if;
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.259\ := SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num157\), 64) / \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num63\;
                        -- Clock cycles needed to complete this state (approximation): 27
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_166\ => 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num223\ := (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.259\);
                        -- The following section was transformed from the .NET statement below:
                        -- long num224;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- long remainderOperandb8bf5e410ff3b8d766d9d35325c080b4e4b775b7c29e622566e012b2b2d83cc3;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- remainderOperandb8bf5e410ff3b8d766d9d35325c080b4e4b775b7c29e622566e012b2b2d83cc3 = (long)(num157);
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperandb8bf5e410ff3b8d766d9d35325c080b4e4b775b7c29e622566e012b2b2d83cc3\ := SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num157\), 64);
                        -- The following section was transformed from the .NET statement below:
                        -- num224 = (long)(remainderOperandb8bf5e410ff3b8d766d9d35325c080b4e4b775b7c29e622566e012b2b2d83cc3 - remainderOperandb8bf5e410ff3b8d766d9d35325c080b4e4b775b7c29e622566e012b2b2d83cc3 / num63 * num63);
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_167\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_167\ => 
                        -- Waiting for the result to appear in \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.260\ (have to wait 27 clock cycles in this state).
                        -- The assignment needs to be kept up for multi-cycle operations for the result to actually appear in the target.
                        if (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.43\ >= to_signed(27, 32)) then 
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_168\;
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.43\ := to_signed(0, 32);
                        else 
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.43\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.43\ + to_signed(1, 32);
                        end if;
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.260\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperandb8bf5e410ff3b8d766d9d35325c080b4e4b775b7c29e622566e012b2b2d83cc3\ / \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num63\;
                        -- Clock cycles needed to complete this state (approximation): 27
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_168\ => 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.261\ := SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.260\ * \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num63\, 64);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_169\;
                        -- Clock cycles needed to complete this state (approximation): 0.7638
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_169\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.262\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperandb8bf5e410ff3b8d766d9d35325c080b4e4b775b7c29e622566e012b2b2d83cc3\ - \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.261\;
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num224\ := (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.262\);
                        -- The following section was transformed from the .NET statement below:
                        -- long num225;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num225 = ((long)((long)(num157) & num63));
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.263\ := SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num157\), 64) and \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num63\;
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num225\ := ((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.263\));
                        -- The following section was transformed from the .NET statement below:
                        -- long num226;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num226 = ((long)((long)(num157) | num63));
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.264\ := SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num157\), 64) or \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num63\;
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num226\ := ((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.264\));
                        -- The following section was transformed from the .NET statement below:
                        -- long num227;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num227 = ((long)((long)(num157) ^ num63));
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.265\ := SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num157\), 64) xor \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num63\;
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num227\ := ((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.265\));
                        -- The following section was transformed from the .NET statement below:
                        -- int num228;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num228 = num157 << (int)num74;
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_170\;
                        -- Clock cycles needed to complete this state (approximation): 0.91
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_170\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.266\ := SmartResize(shift_left(SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num157\, 32), to_integer(unsigned(SmartResize(signed(SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num74\, 32)), 5)))), 32);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num228\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.266\;
                        -- The following section was transformed from the .NET statement below:
                        -- int num229;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num229 = num157 >> (int)num74;
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_171\;
                        -- Clock cycles needed to complete this state (approximation): 0.5244
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_171\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.267\ := SmartResize(shift_right(SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num157\, 32), to_integer(unsigned(SmartResize(signed(SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num74\, 32)), 5) and "11111"))), 32);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num229\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.267\;
                        -- The following section was transformed from the .NET statement below:
                        -- ushort num230;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num230 = (ushort)input;
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num230\ := SmartResize(unsigned(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\), 16);
                        -- The following section was transformed from the .NET statement below:
                        -- int num231;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num231 = num230 << (int)b2;
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_172\;
                        -- Clock cycles needed to complete this state (approximation): 0.6479
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_172\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.268\ := signed(SmartResize(shift_left(signed(SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num230\, 32)), to_integer(unsigned(SmartResize(signed(SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b2\, 32)), 5)))), 32));
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num231\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.268\;
                        -- The following section was transformed from the .NET statement below:
                        -- int num232;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num232 = num230 >> (int)b2;
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_173\;
                        -- Clock cycles needed to complete this state (approximation): 0.5244
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_173\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.269\ := signed(SmartResize(shift_right(signed(SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num230\, 32)), to_integer(unsigned(SmartResize(signed(SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b2\, 32)), 5) and "11111"))), 32));
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num232\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.269\;
                        -- The following section was transformed from the .NET statement below:
                        -- int num233;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num233 = (int)((int)(num230) + (int)(b2));
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.270\ := SmartResize(signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num230\), 32)) + signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b2\), 32)), 32);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num233\ := (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.270\);
                        -- The following section was transformed from the .NET statement below:
                        -- int num234;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num234 = (int)((int)(num230) - (int)(b2));
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_174\;
                        -- Clock cycles needed to complete this state (approximation): 0.9774
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_174\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.271\ := signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num230\), 32)) - signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b2\), 32));
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num234\ := (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.271\);
                        -- The following section was transformed from the .NET statement below:
                        -- int num235;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num235 = (int)((int)(num230) * (int)(b2));
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.272\ := SmartResize(signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num230\), 32)) * signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b2\), 32)), 32);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num235\ := (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.272\);
                        -- The following section was transformed from the .NET statement below:
                        -- int num236;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num236 = (int)num230 / (int)b2;
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_175\;
                        -- Clock cycles needed to complete this state (approximation): 0.7471
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_175\ => 
                        -- Waiting for the result to appear in \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.273\ (have to wait 10 clock cycles in this state).
                        -- The assignment needs to be kept up for multi-cycle operations for the result to actually appear in the target.
                        if (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.44\ >= to_signed(10, 32)) then 
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_176\;
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.44\ := to_signed(0, 32);
                        else 
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.44\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.44\ + to_signed(1, 32);
                        end if;
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.273\ := signed(SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num230\, 32)) / signed(SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b2\, 32));
                        -- Clock cycles needed to complete this state (approximation): 10
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_176\ => 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num236\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.273\;
                        -- The following section was transformed from the .NET statement below:
                        -- int num237;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- int remainderOperand697c42756dcb424b7508ecb28c70ac2d4b136b19af6534cd788dd93e090fa8a8;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- remainderOperand697c42756dcb424b7508ecb28c70ac2d4b136b19af6534cd788dd93e090fa8a8 = (int)num230;
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperand697c42756dcb424b7508ecb28c70ac2d4b136b19af6534cd788dd93e090fa8a8\ := signed(SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num230\, 32));
                        -- The following section was transformed from the .NET statement below:
                        -- int remainderOperandefb5053f4e77ffd15920919821d1b736d3db1e0fd89b385eef9b7790a8d5a8bd;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- remainderOperandefb5053f4e77ffd15920919821d1b736d3db1e0fd89b385eef9b7790a8d5a8bd = (int)b2;
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperandefb5053f4e77ffd15920919821d1b736d3db1e0fd89b385eef9b7790a8d5a8bd\ := signed(SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b2\, 32));
                        -- The following section was transformed from the .NET statement below:
                        -- num237 = remainderOperand697c42756dcb424b7508ecb28c70ac2d4b136b19af6534cd788dd93e090fa8a8 - remainderOperand697c42756dcb424b7508ecb28c70ac2d4b136b19af6534cd788dd93e090fa8a8 / remainderOperandefb5053f4e77ffd15920919821d1b736d3db1e0fd89b385eef9b7790a8d5a8bd * remainderOperandefb5053f4e77ffd15920919821d1b736d3db1e0fd89b385eef9b7790a8d5a8bd;
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_177\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_177\ => 
                        -- Waiting for the result to appear in \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.274\ (have to wait 10 clock cycles in this state).
                        -- The assignment needs to be kept up for multi-cycle operations for the result to actually appear in the target.
                        if (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.45\ >= to_signed(10, 32)) then 
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_178\;
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.45\ := to_signed(0, 32);
                        else 
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.45\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.45\ + to_signed(1, 32);
                        end if;
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.274\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperand697c42756dcb424b7508ecb28c70ac2d4b136b19af6534cd788dd93e090fa8a8\ / \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperandefb5053f4e77ffd15920919821d1b736d3db1e0fd89b385eef9b7790a8d5a8bd\;
                        -- Clock cycles needed to complete this state (approximation): 10
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_178\ => 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.275\ := SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.274\ * \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperandefb5053f4e77ffd15920919821d1b736d3db1e0fd89b385eef9b7790a8d5a8bd\, 32);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.276\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperand697c42756dcb424b7508ecb28c70ac2d4b136b19af6534cd788dd93e090fa8a8\ - \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.275\;
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num237\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.276\;
                        -- The following section was transformed from the .NET statement below:
                        -- int num238;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num238 = ((int)((int)(num230) & (int)(b2)));
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.277\ := signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num230\), 32)) and signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b2\), 32));
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num238\ := ((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.277\));
                        -- The following section was transformed from the .NET statement below:
                        -- int num239;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num239 = ((int)((int)(num230) | (int)(b2)));
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_179\;
                        -- Clock cycles needed to complete this state (approximation): 0.8857
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_179\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.278\ := signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num230\), 32)) or signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b2\), 32));
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num239\ := ((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.278\));
                        -- The following section was transformed from the .NET statement below:
                        -- int num240;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num240 = ((int)((int)(num230) ^ (int)(b2)));
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.279\ := signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num230\), 32)) xor signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b2\), 32));
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num240\ := ((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.279\));
                        -- The following section was transformed from the .NET statement below:
                        -- int num241;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num241 = num230 << (int)b3;
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.280\ := signed(SmartResize(shift_left(signed(SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num230\, 32)), to_integer(unsigned(SmartResize(SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b3\, 32), 5)))), 32));
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num241\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.280\;
                        -- The following section was transformed from the .NET statement below:
                        -- int num242;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num242 = num230 >> (int)b3;
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_180\;
                        -- Clock cycles needed to complete this state (approximation): 0.8016
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_180\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.281\ := signed(SmartResize(shift_right(signed(SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num230\, 32)), to_integer(unsigned(SmartResize(SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b3\, 32), 5) and "11111"))), 32));
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num242\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.281\;
                        -- The following section was transformed from the .NET statement below:
                        -- int num243;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num243 = (int)((int)(num230) + (int)(b3));
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.282\ := SmartResize(signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num230\), 32)) + SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b3\), 32), 32);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num243\ := (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.282\);
                        -- The following section was transformed from the .NET statement below:
                        -- int num244;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num244 = (int)((int)(num230) - (int)(b3));
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_181\;
                        -- Clock cycles needed to complete this state (approximation): 0.9774
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_181\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.283\ := signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num230\), 32)) - SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b3\), 32);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num244\ := (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.283\);
                        -- The following section was transformed from the .NET statement below:
                        -- int num245;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num245 = (int)((int)(num230) * (int)(b3));
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.284\ := SmartResize(signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num230\), 32)) * SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b3\), 32), 32);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num245\ := (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.284\);
                        -- The following section was transformed from the .NET statement below:
                        -- int num246;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num246 = (int)num230 / (int)b3;
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_182\;
                        -- Clock cycles needed to complete this state (approximation): 0.7471
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_182\ => 
                        -- Waiting for the result to appear in \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.285\ (have to wait 10 clock cycles in this state).
                        -- The assignment needs to be kept up for multi-cycle operations for the result to actually appear in the target.
                        if (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.46\ >= to_signed(10, 32)) then 
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_183\;
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.46\ := to_signed(0, 32);
                        else 
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.46\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.46\ + to_signed(1, 32);
                        end if;
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.285\ := signed(SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num230\, 32)) / SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b3\, 32);
                        -- Clock cycles needed to complete this state (approximation): 10
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_183\ => 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num246\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.285\;
                        -- The following section was transformed from the .NET statement below:
                        -- int num247;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- int remainderOperand697c42756dcb424b7508ecb28c70ac2d4b136b19af6534cd788dd93e090fa8a8;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- remainderOperand697c42756dcb424b7508ecb28c70ac2d4b136b19af6534cd788dd93e090fa8a8 = (int)num230;
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperand697c42756dcb424b7508ecb28c70ac2d4b136b19af6534cd788dd93e090fa8a8\ := signed(SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num230\, 32));
                        -- The following section was transformed from the .NET statement below:
                        -- int remainderOperand4c3cf3d35d8c430e76c83773ad4ef9d06066af4ce4171b6ecf9bfec42e53ac0b;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- remainderOperand4c3cf3d35d8c430e76c83773ad4ef9d06066af4ce4171b6ecf9bfec42e53ac0b = (int)b3;
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperand4c3cf3d35d8c430e76c83773ad4ef9d06066af4ce4171b6ecf9bfec42e53ac0b\ := SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b3\, 32);
                        -- The following section was transformed from the .NET statement below:
                        -- num247 = remainderOperand697c42756dcb424b7508ecb28c70ac2d4b136b19af6534cd788dd93e090fa8a8 - remainderOperand697c42756dcb424b7508ecb28c70ac2d4b136b19af6534cd788dd93e090fa8a8 / remainderOperand4c3cf3d35d8c430e76c83773ad4ef9d06066af4ce4171b6ecf9bfec42e53ac0b * remainderOperand4c3cf3d35d8c430e76c83773ad4ef9d06066af4ce4171b6ecf9bfec42e53ac0b;
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_184\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_184\ => 
                        -- Waiting for the result to appear in \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.286\ (have to wait 10 clock cycles in this state).
                        -- The assignment needs to be kept up for multi-cycle operations for the result to actually appear in the target.
                        if (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.47\ >= to_signed(10, 32)) then 
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_185\;
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.47\ := to_signed(0, 32);
                        else 
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.47\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.47\ + to_signed(1, 32);
                        end if;
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.286\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperand697c42756dcb424b7508ecb28c70ac2d4b136b19af6534cd788dd93e090fa8a8\ / \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperand4c3cf3d35d8c430e76c83773ad4ef9d06066af4ce4171b6ecf9bfec42e53ac0b\;
                        -- Clock cycles needed to complete this state (approximation): 10
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_185\ => 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.287\ := SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.286\ * \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperand4c3cf3d35d8c430e76c83773ad4ef9d06066af4ce4171b6ecf9bfec42e53ac0b\, 32);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.288\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperand697c42756dcb424b7508ecb28c70ac2d4b136b19af6534cd788dd93e090fa8a8\ - \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.287\;
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num247\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.288\;
                        -- The following section was transformed from the .NET statement below:
                        -- int num248;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num248 = ((int)((int)(num230) & (int)(b3)));
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.289\ := signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num230\), 32)) and SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b3\), 32);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num248\ := ((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.289\));
                        -- The following section was transformed from the .NET statement below:
                        -- int num249;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num249 = ((int)((int)(num230) | (int)(b3)));
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_186\;
                        -- Clock cycles needed to complete this state (approximation): 0.8857
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_186\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.290\ := signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num230\), 32)) or SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b3\), 32);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num249\ := ((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.290\));
                        -- The following section was transformed from the .NET statement below:
                        -- int num250;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num250 = ((int)((int)(num230) ^ (int)(b3)));
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.291\ := signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num230\), 32)) xor SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b3\), 32);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num250\ := ((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.291\));
                        -- The following section was transformed from the .NET statement below:
                        -- int num251;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num251 = num230 << (int)num21;
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.292\ := signed(SmartResize(shift_left(signed(SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num230\, 32)), to_integer(unsigned(SmartResize(SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num21\, 32), 5)))), 32));
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num251\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.292\;
                        -- The following section was transformed from the .NET statement below:
                        -- int num252;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num252 = num230 >> (int)num21;
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_187\;
                        -- Clock cycles needed to complete this state (approximation): 0.8016
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_187\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.293\ := signed(SmartResize(shift_right(signed(SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num230\, 32)), to_integer(unsigned(SmartResize(SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num21\, 32), 5) and "11111"))), 32));
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num252\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.293\;
                        -- The following section was transformed from the .NET statement below:
                        -- int num253;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num253 = (int)((int)(num230) + (int)(num21));
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.294\ := SmartResize(signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num230\), 32)) + SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num21\), 32), 32);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num253\ := (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.294\);
                        -- The following section was transformed from the .NET statement below:
                        -- int num254;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num254 = (int)((int)(num230) - (int)(num21));
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_188\;
                        -- Clock cycles needed to complete this state (approximation): 0.9774
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_188\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.295\ := signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num230\), 32)) - SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num21\), 32);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num254\ := (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.295\);
                        -- The following section was transformed from the .NET statement below:
                        -- int num255;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num255 = (int)((int)(num230) * (int)(num21));
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.296\ := SmartResize(signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num230\), 32)) * SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num21\), 32), 32);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num255\ := (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.296\);
                        -- The following section was transformed from the .NET statement below:
                        -- int num256;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num256 = (int)num230 / (int)num21;
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_189\;
                        -- Clock cycles needed to complete this state (approximation): 0.7471
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_189\ => 
                        -- Waiting for the result to appear in \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.297\ (have to wait 10 clock cycles in this state).
                        -- The assignment needs to be kept up for multi-cycle operations for the result to actually appear in the target.
                        if (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.48\ >= to_signed(10, 32)) then 
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_190\;
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.48\ := to_signed(0, 32);
                        else 
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.48\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.48\ + to_signed(1, 32);
                        end if;
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.297\ := signed(SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num230\, 32)) / SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num21\, 32);
                        -- Clock cycles needed to complete this state (approximation): 10
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_190\ => 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num256\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.297\;
                        -- The following section was transformed from the .NET statement below:
                        -- int num257;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- int remainderOperand697c42756dcb424b7508ecb28c70ac2d4b136b19af6534cd788dd93e090fa8a8;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- remainderOperand697c42756dcb424b7508ecb28c70ac2d4b136b19af6534cd788dd93e090fa8a8 = (int)num230;
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperand697c42756dcb424b7508ecb28c70ac2d4b136b19af6534cd788dd93e090fa8a8\ := signed(SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num230\, 32));
                        -- The following section was transformed from the .NET statement below:
                        -- int remainderOperand486ca49e4664657d55b40163951a093d44b764f3014e198f9d9f5cc683a8d06a;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- remainderOperand486ca49e4664657d55b40163951a093d44b764f3014e198f9d9f5cc683a8d06a = (int)num21;
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperand486ca49e4664657d55b40163951a093d44b764f3014e198f9d9f5cc683a8d06a\ := SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num21\, 32);
                        -- The following section was transformed from the .NET statement below:
                        -- num257 = remainderOperand697c42756dcb424b7508ecb28c70ac2d4b136b19af6534cd788dd93e090fa8a8 - remainderOperand697c42756dcb424b7508ecb28c70ac2d4b136b19af6534cd788dd93e090fa8a8 / remainderOperand486ca49e4664657d55b40163951a093d44b764f3014e198f9d9f5cc683a8d06a * remainderOperand486ca49e4664657d55b40163951a093d44b764f3014e198f9d9f5cc683a8d06a;
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_191\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_191\ => 
                        -- Waiting for the result to appear in \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.298\ (have to wait 10 clock cycles in this state).
                        -- The assignment needs to be kept up for multi-cycle operations for the result to actually appear in the target.
                        if (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.49\ >= to_signed(10, 32)) then 
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_192\;
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.49\ := to_signed(0, 32);
                        else 
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.49\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.49\ + to_signed(1, 32);
                        end if;
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.298\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperand697c42756dcb424b7508ecb28c70ac2d4b136b19af6534cd788dd93e090fa8a8\ / \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperand486ca49e4664657d55b40163951a093d44b764f3014e198f9d9f5cc683a8d06a\;
                        -- Clock cycles needed to complete this state (approximation): 10
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_192\ => 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.299\ := SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.298\ * \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperand486ca49e4664657d55b40163951a093d44b764f3014e198f9d9f5cc683a8d06a\, 32);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.300\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperand697c42756dcb424b7508ecb28c70ac2d4b136b19af6534cd788dd93e090fa8a8\ - \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.299\;
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num257\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.300\;
                        -- The following section was transformed from the .NET statement below:
                        -- int num258;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num258 = ((int)((int)(num230) & (int)(num21)));
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.301\ := signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num230\), 32)) and SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num21\), 32);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num258\ := ((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.301\));
                        -- The following section was transformed from the .NET statement below:
                        -- int num259;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num259 = ((int)((int)(num230) | (int)(num21)));
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_193\;
                        -- Clock cycles needed to complete this state (approximation): 0.8857
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_193\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.302\ := signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num230\), 32)) or SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num21\), 32);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num259\ := ((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.302\));
                        -- The following section was transformed from the .NET statement below:
                        -- int num260;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num260 = ((int)((int)(num230) ^ (int)(num21)));
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.303\ := signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num230\), 32)) xor SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num21\), 32);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num260\ := ((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.303\));
                        -- The following section was transformed from the .NET statement below:
                        -- int num261;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num261 = num230 << (int)num32;
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.304\ := signed(SmartResize(shift_left(signed(SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num230\, 32)), to_integer(unsigned(SmartResize(signed(SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num32\, 32)), 5)))), 32));
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num261\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.304\;
                        -- The following section was transformed from the .NET statement below:
                        -- int num262;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num262 = num230 >> (int)num32;
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_194\;
                        -- Clock cycles needed to complete this state (approximation): 0.8016
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_194\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.305\ := signed(SmartResize(shift_right(signed(SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num230\, 32)), to_integer(unsigned(SmartResize(signed(SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num32\, 32)), 5) and "11111"))), 32));
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num262\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.305\;
                        -- The following section was transformed from the .NET statement below:
                        -- int num263;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num263 = (int)((int)(num230) + (int)(num32));
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.306\ := SmartResize(signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num230\), 32)) + signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num32\), 32)), 32);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num263\ := (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.306\);
                        -- The following section was transformed from the .NET statement below:
                        -- int num264;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num264 = (int)((int)(num230) - (int)(num32));
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_195\;
                        -- Clock cycles needed to complete this state (approximation): 0.9774
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_195\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.307\ := signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num230\), 32)) - signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num32\), 32));
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num264\ := (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.307\);
                        -- The following section was transformed from the .NET statement below:
                        -- int num265;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num265 = (int)((int)(num230) * (int)(num32));
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.308\ := SmartResize(signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num230\), 32)) * signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num32\), 32)), 32);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num265\ := (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.308\);
                        -- The following section was transformed from the .NET statement below:
                        -- int num266;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num266 = (int)num230 / (int)num32;
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_196\;
                        -- Clock cycles needed to complete this state (approximation): 0.7471
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_196\ => 
                        -- Waiting for the result to appear in \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.309\ (have to wait 10 clock cycles in this state).
                        -- The assignment needs to be kept up for multi-cycle operations for the result to actually appear in the target.
                        if (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.50\ >= to_signed(10, 32)) then 
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_197\;
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.50\ := to_signed(0, 32);
                        else 
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.50\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.50\ + to_signed(1, 32);
                        end if;
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.309\ := signed(SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num230\, 32)) / signed(SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num32\, 32));
                        -- Clock cycles needed to complete this state (approximation): 10
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_197\ => 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num266\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.309\;
                        -- The following section was transformed from the .NET statement below:
                        -- int num267;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- int remainderOperand697c42756dcb424b7508ecb28c70ac2d4b136b19af6534cd788dd93e090fa8a8;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- remainderOperand697c42756dcb424b7508ecb28c70ac2d4b136b19af6534cd788dd93e090fa8a8 = (int)num230;
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperand697c42756dcb424b7508ecb28c70ac2d4b136b19af6534cd788dd93e090fa8a8\ := signed(SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num230\, 32));
                        -- The following section was transformed from the .NET statement below:
                        -- int remainderOperandac2d84469251a7f2b094378d1bb4e487b3a02527d578d9b4bf7f070b2adad76c;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- remainderOperandac2d84469251a7f2b094378d1bb4e487b3a02527d578d9b4bf7f070b2adad76c = (int)num32;
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperandac2d84469251a7f2b094378d1bb4e487b3a02527d578d9b4bf7f070b2adad76c\ := signed(SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num32\, 32));
                        -- The following section was transformed from the .NET statement below:
                        -- num267 = remainderOperand697c42756dcb424b7508ecb28c70ac2d4b136b19af6534cd788dd93e090fa8a8 - remainderOperand697c42756dcb424b7508ecb28c70ac2d4b136b19af6534cd788dd93e090fa8a8 / remainderOperandac2d84469251a7f2b094378d1bb4e487b3a02527d578d9b4bf7f070b2adad76c * remainderOperandac2d84469251a7f2b094378d1bb4e487b3a02527d578d9b4bf7f070b2adad76c;
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_198\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_198\ => 
                        -- Waiting for the result to appear in \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.310\ (have to wait 10 clock cycles in this state).
                        -- The assignment needs to be kept up for multi-cycle operations for the result to actually appear in the target.
                        if (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.51\ >= to_signed(10, 32)) then 
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_199\;
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.51\ := to_signed(0, 32);
                        else 
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.51\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.51\ + to_signed(1, 32);
                        end if;
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.310\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperand697c42756dcb424b7508ecb28c70ac2d4b136b19af6534cd788dd93e090fa8a8\ / \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperandac2d84469251a7f2b094378d1bb4e487b3a02527d578d9b4bf7f070b2adad76c\;
                        -- Clock cycles needed to complete this state (approximation): 10
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_199\ => 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.311\ := SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.310\ * \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperandac2d84469251a7f2b094378d1bb4e487b3a02527d578d9b4bf7f070b2adad76c\, 32);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.312\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperand697c42756dcb424b7508ecb28c70ac2d4b136b19af6534cd788dd93e090fa8a8\ - \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.311\;
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num267\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.312\;
                        -- The following section was transformed from the .NET statement below:
                        -- int num268;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num268 = ((int)((int)(num230) & (int)(num32)));
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.313\ := signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num230\), 32)) and signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num32\), 32));
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num268\ := ((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.313\));
                        -- The following section was transformed from the .NET statement below:
                        -- int num269;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num269 = ((int)((int)(num230) | (int)(num32)));
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_200\;
                        -- Clock cycles needed to complete this state (approximation): 0.8857
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_200\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.314\ := signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num230\), 32)) or signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num32\), 32));
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num269\ := ((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.314\));
                        -- The following section was transformed from the .NET statement below:
                        -- int num270;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num270 = ((int)((int)(num230) ^ (int)(num32)));
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.315\ := signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num230\), 32)) xor signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num32\), 32));
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num270\ := ((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.315\));
                        -- The following section was transformed from the .NET statement below:
                        -- int num271;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num271 = num230 << input;
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.316\ := signed(SmartResize(shift_left(signed(SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num230\, 32)), to_integer(unsigned(SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\, 5)))), 32));
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num271\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.316\;
                        -- The following section was transformed from the .NET statement below:
                        -- int num272;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num272 = num230 >> input;
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_201\;
                        -- Clock cycles needed to complete this state (approximation): 0.8016
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_201\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.317\ := signed(SmartResize(shift_right(signed(SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num230\, 32)), to_integer(unsigned(SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\, 5) and "11111"))), 32));
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num272\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.317\;
                        -- The following section was transformed from the .NET statement below:
                        -- int num273;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num273 = (int)((int)(num230) + (int)(input));
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.318\ := SmartResize(signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num230\), 32)) + (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\), 32);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num273\ := (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.318\);
                        -- The following section was transformed from the .NET statement below:
                        -- int num274;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num274 = (int)((int)(num230) - (int)(input));
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_202\;
                        -- Clock cycles needed to complete this state (approximation): 0.9774
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_202\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.319\ := signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num230\), 32)) - (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num274\ := (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.319\);
                        -- The following section was transformed from the .NET statement below:
                        -- int num275;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num275 = (int)((int)(num230) * (int)(input));
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.320\ := SmartResize(signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num230\), 32)) * (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\), 32);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num275\ := (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.320\);
                        -- The following section was transformed from the .NET statement below:
                        -- int num276;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num276 = (int)num230 / input;
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_203\;
                        -- Clock cycles needed to complete this state (approximation): 0.7471
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_203\ => 
                        -- Waiting for the result to appear in \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.321\ (have to wait 10 clock cycles in this state).
                        -- The assignment needs to be kept up for multi-cycle operations for the result to actually appear in the target.
                        if (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.52\ >= to_signed(10, 32)) then 
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_204\;
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.52\ := to_signed(0, 32);
                        else 
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.52\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.52\ + to_signed(1, 32);
                        end if;
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.321\ := signed(SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num230\, 32)) / \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\;
                        -- Clock cycles needed to complete this state (approximation): 10
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_204\ => 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num276\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.321\;
                        -- The following section was transformed from the .NET statement below:
                        -- int num277;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- int remainderOperand697c42756dcb424b7508ecb28c70ac2d4b136b19af6534cd788dd93e090fa8a8;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- remainderOperand697c42756dcb424b7508ecb28c70ac2d4b136b19af6534cd788dd93e090fa8a8 = (int)num230;
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperand697c42756dcb424b7508ecb28c70ac2d4b136b19af6534cd788dd93e090fa8a8\ := signed(SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num230\, 32));
                        -- The following section was transformed from the .NET statement below:
                        -- num277 = remainderOperand697c42756dcb424b7508ecb28c70ac2d4b136b19af6534cd788dd93e090fa8a8 - remainderOperand697c42756dcb424b7508ecb28c70ac2d4b136b19af6534cd788dd93e090fa8a8 / input * input;
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_205\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_205\ => 
                        -- Waiting for the result to appear in \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.322\ (have to wait 10 clock cycles in this state).
                        -- The assignment needs to be kept up for multi-cycle operations for the result to actually appear in the target.
                        if (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.53\ >= to_signed(10, 32)) then 
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_206\;
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.53\ := to_signed(0, 32);
                        else 
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.53\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.53\ + to_signed(1, 32);
                        end if;
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.322\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperand697c42756dcb424b7508ecb28c70ac2d4b136b19af6534cd788dd93e090fa8a8\ / \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\;
                        -- Clock cycles needed to complete this state (approximation): 10
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_206\ => 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.323\ := SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.322\ * \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\, 32);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.324\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperand697c42756dcb424b7508ecb28c70ac2d4b136b19af6534cd788dd93e090fa8a8\ - \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.323\;
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num277\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.324\;
                        -- The following section was transformed from the .NET statement below:
                        -- int num278;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num278 = ((int)((int)(num230) & (int)(input)));
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.325\ := signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num230\), 32)) and (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num278\ := ((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.325\));
                        -- The following section was transformed from the .NET statement below:
                        -- int num279;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num279 = ((int)((int)(num230) | (int)(input)));
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_207\;
                        -- Clock cycles needed to complete this state (approximation): 0.8857
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_207\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.326\ := signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num230\), 32)) or (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num279\ := ((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.326\));
                        -- The following section was transformed from the .NET statement below:
                        -- int num280;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num280 = ((int)((int)(num230) ^ (int)(input)));
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.327\ := signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num230\), 32)) xor (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num280\ := ((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.327\));
                        -- The following section was transformed from the .NET statement below:
                        -- int num281;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num281 = num230 << input;
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.328\ := signed(SmartResize(shift_left(signed(SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num230\, 32)), to_integer(unsigned(SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\, 5)))), 32));
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num281\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.328\;
                        -- The following section was transformed from the .NET statement below:
                        -- int num282;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num282 = num230 >> input;
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_208\;
                        -- Clock cycles needed to complete this state (approximation): 0.8016
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_208\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.329\ := signed(SmartResize(shift_right(signed(SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num230\, 32)), to_integer(unsigned(SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\, 5) and "11111"))), 32));
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num282\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.329\;
                        -- The following section was transformed from the .NET statement below:
                        -- uint num283;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num283 = (uint)((int)(num230) + (int)(input));
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.330\ := SmartResize(unsigned(signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num230\), 32)) + (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\)), 32);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num283\ := (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.330\);
                        -- The following section was transformed from the .NET statement below:
                        -- uint num284;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num284 = (uint)((int)(num230) - (int)(input));
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_209\;
                        -- Clock cycles needed to complete this state (approximation): 0.9774
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_209\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.331\ := unsigned(signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num230\), 32)) - (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\));
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num284\ := (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.331\);
                        -- The following section was transformed from the .NET statement below:
                        -- uint num285;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num285 = (uint)((int)(num230) * (int)(input));
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.332\ := SmartResize(unsigned(signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num230\), 32)) * (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\)), 32);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num285\ := (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.332\);
                        -- The following section was transformed from the .NET statement below:
                        -- uint num286;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num286 = (uint)num230 / (uint)input;
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_210\;
                        -- Clock cycles needed to complete this state (approximation): 0.7471
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_210\ => 
                        -- Waiting for the result to appear in \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.333\ (have to wait 9 clock cycles in this state).
                        -- The assignment needs to be kept up for multi-cycle operations for the result to actually appear in the target.
                        if (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.54\ >= to_signed(9, 32)) then 
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_211\;
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.54\ := to_signed(0, 32);
                        else 
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.54\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.54\ + to_signed(1, 32);
                        end if;
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.333\ := SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num230\, 32) / unsigned(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\);
                        -- Clock cycles needed to complete this state (approximation): 9
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_211\ => 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num286\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.333\;
                        -- The following section was transformed from the .NET statement below:
                        -- uint num287;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- uint remainderOperand44907e69281d00024cf1973eb10ffde485b2374c89e688546f4a23c25c37b2f1;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- remainderOperand44907e69281d00024cf1973eb10ffde485b2374c89e688546f4a23c25c37b2f1 = (uint)num230;
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperand44907e69281d00024cf1973eb10ffde485b2374c89e688546f4a23c25c37b2f1\ := SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num230\, 32);
                        -- The following section was transformed from the .NET statement below:
                        -- uint remainderOperand53fc996822df2ca6c8221d7a30b00205ac201f3c5c0311b48f63e126ebd888da;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- remainderOperand53fc996822df2ca6c8221d7a30b00205ac201f3c5c0311b48f63e126ebd888da = (uint)input;
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperand53fc996822df2ca6c8221d7a30b00205ac201f3c5c0311b48f63e126ebd888da\ := unsigned(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\);
                        -- The following section was transformed from the .NET statement below:
                        -- num287 = remainderOperand44907e69281d00024cf1973eb10ffde485b2374c89e688546f4a23c25c37b2f1 - remainderOperand44907e69281d00024cf1973eb10ffde485b2374c89e688546f4a23c25c37b2f1 / remainderOperand53fc996822df2ca6c8221d7a30b00205ac201f3c5c0311b48f63e126ebd888da * remainderOperand53fc996822df2ca6c8221d7a30b00205ac201f3c5c0311b48f63e126ebd888da;
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_212\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_212\ => 
                        -- Waiting for the result to appear in \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.334\ (have to wait 9 clock cycles in this state).
                        -- The assignment needs to be kept up for multi-cycle operations for the result to actually appear in the target.
                        if (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.55\ >= to_signed(9, 32)) then 
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_213\;
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.55\ := to_signed(0, 32);
                        else 
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.55\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.55\ + to_signed(1, 32);
                        end if;
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.334\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperand44907e69281d00024cf1973eb10ffde485b2374c89e688546f4a23c25c37b2f1\ / \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperand53fc996822df2ca6c8221d7a30b00205ac201f3c5c0311b48f63e126ebd888da\;
                        -- Clock cycles needed to complete this state (approximation): 9
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_213\ => 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.335\ := SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.334\ * \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperand53fc996822df2ca6c8221d7a30b00205ac201f3c5c0311b48f63e126ebd888da\, 32);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.336\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperand44907e69281d00024cf1973eb10ffde485b2374c89e688546f4a23c25c37b2f1\ - \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.335\;
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num287\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.336\;
                        -- The following section was transformed from the .NET statement below:
                        -- uint num288;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num288 = (uint)((int)(num230) & (int)(input));
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.337\ := unsigned(signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num230\), 32)) and (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\));
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num288\ := (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.337\);
                        -- The following section was transformed from the .NET statement below:
                        -- uint num289;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num289 = (uint)((int)(num230) | (int)(input));
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_214\;
                        -- Clock cycles needed to complete this state (approximation): 0.8857
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_214\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.338\ := unsigned(signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num230\), 32)) or (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\));
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num289\ := (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.338\);
                        -- The following section was transformed from the .NET statement below:
                        -- uint num290;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num290 = (uint)((int)(num230) ^ (int)(input));
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.339\ := unsigned(signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num230\), 32)) xor (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\));
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num290\ := (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.339\);
                        -- The following section was transformed from the .NET statement below:
                        -- int num291;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num291 = num230 << (int)num63;
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.340\ := signed(SmartResize(shift_left(signed(SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num230\, 32)), to_integer(unsigned(SmartResize(SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num63\, 32), 5)))), 32));
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num291\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.340\;
                        -- The following section was transformed from the .NET statement below:
                        -- int num292;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num292 = num230 >> (int)num63;
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_215\;
                        -- Clock cycles needed to complete this state (approximation): 0.8016
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_215\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.341\ := signed(SmartResize(shift_right(signed(SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num230\, 32)), to_integer(unsigned(SmartResize(SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num63\, 32), 5) and "11111"))), 32));
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num292\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.341\;
                        -- The following section was transformed from the .NET statement below:
                        -- long num293;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num293 = (long)((long)(num230) + num63);
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_216\;
                        -- Clock cycles needed to complete this state (approximation): 0.6511
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_216\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.342\ := signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num230\), 64)) + \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num63\;
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num293\ := (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.342\);
                        -- The following section was transformed from the .NET statement below:
                        -- long num294;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num294 = (long)((long)(num230) - num63);
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.343\ := signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num230\), 64)) - \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num63\;
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num294\ := (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.343\);
                        -- The following section was transformed from the .NET statement below:
                        -- long num295;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num295 = (long)((long)(num230) * num63);
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_217\;
                        -- Clock cycles needed to complete this state (approximation): 0.7796
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_217\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.344\ := SmartResize(signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num230\), 64)) * \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num63\, 64);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num295\ := (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.344\);
                        -- The following section was transformed from the .NET statement below:
                        -- long num296;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num296 = (long)num230 / num63;
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_218\;
                        -- Clock cycles needed to complete this state (approximation): 0.7638
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_218\ => 
                        -- Waiting for the result to appear in \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.345\ (have to wait 27 clock cycles in this state).
                        -- The assignment needs to be kept up for multi-cycle operations for the result to actually appear in the target.
                        if (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.56\ >= to_signed(27, 32)) then 
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_219\;
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.56\ := to_signed(0, 32);
                        else 
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.56\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.56\ + to_signed(1, 32);
                        end if;
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.345\ := signed(SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num230\, 64)) / \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num63\;
                        -- Clock cycles needed to complete this state (approximation): 27
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_219\ => 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num296\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.345\;
                        -- The following section was transformed from the .NET statement below:
                        -- long num297;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- long remainderOperand6a575358c9b91a9821aaaf06a47326a8adb841bbc7a1c7c32cb5d073ad2c05b1;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- remainderOperand6a575358c9b91a9821aaaf06a47326a8adb841bbc7a1c7c32cb5d073ad2c05b1 = (long)num230;
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperand6a575358c9b91a9821aaaf06a47326a8adb841bbc7a1c7c32cb5d073ad2c05b1\ := signed(SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num230\, 64));
                        -- The following section was transformed from the .NET statement below:
                        -- num297 = remainderOperand6a575358c9b91a9821aaaf06a47326a8adb841bbc7a1c7c32cb5d073ad2c05b1 - remainderOperand6a575358c9b91a9821aaaf06a47326a8adb841bbc7a1c7c32cb5d073ad2c05b1 / num63 * num63;
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_220\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_220\ => 
                        -- Waiting for the result to appear in \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.346\ (have to wait 27 clock cycles in this state).
                        -- The assignment needs to be kept up for multi-cycle operations for the result to actually appear in the target.
                        if (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.57\ >= to_signed(27, 32)) then 
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_221\;
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.57\ := to_signed(0, 32);
                        else 
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.57\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.57\ + to_signed(1, 32);
                        end if;
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.346\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperand6a575358c9b91a9821aaaf06a47326a8adb841bbc7a1c7c32cb5d073ad2c05b1\ / \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num63\;
                        -- Clock cycles needed to complete this state (approximation): 27
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_221\ => 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.347\ := SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.346\ * \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num63\, 64);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_222\;
                        -- Clock cycles needed to complete this state (approximation): 0.7638
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_222\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.348\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperand6a575358c9b91a9821aaaf06a47326a8adb841bbc7a1c7c32cb5d073ad2c05b1\ - \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.347\;
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num297\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.348\;
                        -- The following section was transformed from the .NET statement below:
                        -- long num298;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num298 = ((long)((long)(num230) & num63));
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.349\ := signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num230\), 64)) and \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num63\;
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num298\ := ((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.349\));
                        -- The following section was transformed from the .NET statement below:
                        -- long num299;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num299 = ((long)((long)(num230) | num63));
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.350\ := signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num230\), 64)) or \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num63\;
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num299\ := ((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.350\));
                        -- The following section was transformed from the .NET statement below:
                        -- long num300;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num300 = ((long)((long)(num230) ^ num63));
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.351\ := signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num230\), 64)) xor \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num63\;
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num300\ := ((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.351\));
                        -- The following section was transformed from the .NET statement below:
                        -- int num301;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num301 = num230 << (int)num74;
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_223\;
                        -- Clock cycles needed to complete this state (approximation): 0.91
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_223\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.352\ := signed(SmartResize(shift_left(signed(SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num230\, 32)), to_integer(unsigned(SmartResize(signed(SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num74\, 32)), 5)))), 32));
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num301\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.352\;
                        -- The following section was transformed from the .NET statement below:
                        -- int num302;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num302 = num230 >> (int)num74;
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_224\;
                        -- Clock cycles needed to complete this state (approximation): 0.5244
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_224\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.353\ := signed(SmartResize(shift_right(signed(SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num230\, 32)), to_integer(unsigned(SmartResize(signed(SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num74\, 32)), 5) and "11111"))), 32));
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num302\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.353\;
                        -- The following section was transformed from the .NET statement below:
                        -- ulong num303;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num303 = (ulong)((ulong)(num230) + num74);
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_225\;
                        -- Clock cycles needed to complete this state (approximation): 0.6511
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_225\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.354\ := SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num230\), 64) + \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num74\;
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num303\ := (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.354\);
                        -- The following section was transformed from the .NET statement below:
                        -- ulong num304;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num304 = (ulong)((ulong)(num230) - num74);
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.355\ := SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num230\), 64) - \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num74\;
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num304\ := (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.355\);
                        -- The following section was transformed from the .NET statement below:
                        -- ulong num305;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num305 = (ulong)((ulong)(num230) * num74);
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_226\;
                        -- Clock cycles needed to complete this state (approximation): 0.7796
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_226\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.356\ := SmartResize(SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num230\), 64) * \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num74\, 64);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num305\ := (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.356\);
                        -- The following section was transformed from the .NET statement below:
                        -- ulong num306;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num306 = (ulong)((ulong)(num230) / num74);
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_227\;
                        -- Clock cycles needed to complete this state (approximation): 0.7638
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_227\ => 
                        -- Waiting for the result to appear in \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.357\ (have to wait 26 clock cycles in this state).
                        -- The assignment needs to be kept up for multi-cycle operations for the result to actually appear in the target.
                        if (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.58\ >= to_signed(26, 32)) then 
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_228\;
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.58\ := to_signed(0, 32);
                        else 
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.58\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.58\ + to_signed(1, 32);
                        end if;
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.357\ := SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num230\), 64) / \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num74\;
                        -- Clock cycles needed to complete this state (approximation): 26
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_228\ => 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num306\ := (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.357\);
                        -- The following section was transformed from the .NET statement below:
                        -- ulong num307;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- ulong remainderOperandbb992bb061bf48fb71682099b8954f325393ba29862bba027a3cc3dbece20233;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- remainderOperandbb992bb061bf48fb71682099b8954f325393ba29862bba027a3cc3dbece20233 = (ulong)(num230);
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperandbb992bb061bf48fb71682099b8954f325393ba29862bba027a3cc3dbece20233\ := SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num230\), 64);
                        -- The following section was transformed from the .NET statement below:
                        -- num307 = (ulong)(remainderOperandbb992bb061bf48fb71682099b8954f325393ba29862bba027a3cc3dbece20233 - remainderOperandbb992bb061bf48fb71682099b8954f325393ba29862bba027a3cc3dbece20233 / num74 * num74);
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_229\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_229\ => 
                        -- Waiting for the result to appear in \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.358\ (have to wait 26 clock cycles in this state).
                        -- The assignment needs to be kept up for multi-cycle operations for the result to actually appear in the target.
                        if (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.59\ >= to_signed(26, 32)) then 
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_230\;
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.59\ := to_signed(0, 32);
                        else 
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.59\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.59\ + to_signed(1, 32);
                        end if;
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.358\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperandbb992bb061bf48fb71682099b8954f325393ba29862bba027a3cc3dbece20233\ / \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num74\;
                        -- Clock cycles needed to complete this state (approximation): 26
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_230\ => 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.359\ := SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.358\ * \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num74\, 64);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_231\;
                        -- Clock cycles needed to complete this state (approximation): 0.7638
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_231\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.360\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperandbb992bb061bf48fb71682099b8954f325393ba29862bba027a3cc3dbece20233\ - \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.359\;
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num307\ := (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.360\);
                        -- The following section was transformed from the .NET statement below:
                        -- ulong num308;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num308 = ((ulong)((ulong)(num230) & num74));
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.361\ := SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num230\), 64) and \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num74\;
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num308\ := ((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.361\));
                        -- The following section was transformed from the .NET statement below:
                        -- ulong num309;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num309 = ((ulong)((ulong)(num230) | num74));
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.362\ := SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num230\), 64) or \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num74\;
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num309\ := ((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.362\));
                        -- The following section was transformed from the .NET statement below:
                        -- ulong num310;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num310 = ((ulong)((ulong)(num230) ^ num74));
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.363\ := SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num230\), 64) xor \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num74\;
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num310\ := ((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.363\));
                        -- The following section was transformed from the .NET statement below:
                        -- int num311;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num311 = input << (int)b2;
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_232\;
                        -- Clock cycles needed to complete this state (approximation): 0.91
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_232\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.364\ := shift_left(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\, to_integer(unsigned(SmartResize(signed(SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b2\, 32)), 5))));
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num311\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.364\;
                        -- The following section was transformed from the .NET statement below:
                        -- int num312;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num312 = input >> (int)b2;
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_233\;
                        -- Clock cycles needed to complete this state (approximation): 0.5244
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_233\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.365\ := shift_right(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\, to_integer(unsigned(SmartResize(signed(SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b2\, 32)), 5) and "11111")));
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num312\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.365\;
                        -- The following section was transformed from the .NET statement below:
                        -- int num313;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num313 = (int)((int)(input) + (int)(b2));
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.366\ := SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\) + signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b2\), 32)), 32);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num313\ := (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.366\);
                        -- The following section was transformed from the .NET statement below:
                        -- int num314;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num314 = (int)((int)(input) - (int)(b2));
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_234\;
                        -- Clock cycles needed to complete this state (approximation): 0.9742
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_234\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.367\ := (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\) - signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b2\), 32));
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num314\ := (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.367\);
                        -- The following section was transformed from the .NET statement below:
                        -- int num315;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num315 = (int)((int)(input) * (int)(b2));
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.368\ := SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\) * signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b2\), 32)), 32);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num315\ := (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.368\);
                        -- The following section was transformed from the .NET statement below:
                        -- int num316;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num316 = input / (int)b2;
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_235\;
                        -- Clock cycles needed to complete this state (approximation): 0.7471
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_235\ => 
                        -- Waiting for the result to appear in \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.369\ (have to wait 10 clock cycles in this state).
                        -- The assignment needs to be kept up for multi-cycle operations for the result to actually appear in the target.
                        if (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.60\ >= to_signed(10, 32)) then 
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_236\;
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.60\ := to_signed(0, 32);
                        else 
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.60\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.60\ + to_signed(1, 32);
                        end if;
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.369\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\ / signed(SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b2\, 32));
                        -- Clock cycles needed to complete this state (approximation): 10
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_236\ => 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num316\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.369\;
                        -- The following section was transformed from the .NET statement below:
                        -- int num317;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- int remainderOperandefb5053f4e77ffd15920919821d1b736d3db1e0fd89b385eef9b7790a8d5a8bd;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- remainderOperandefb5053f4e77ffd15920919821d1b736d3db1e0fd89b385eef9b7790a8d5a8bd = (int)b2;
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperandefb5053f4e77ffd15920919821d1b736d3db1e0fd89b385eef9b7790a8d5a8bd\ := signed(SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b2\, 32));
                        -- The following section was transformed from the .NET statement below:
                        -- num317 = input - input / remainderOperandefb5053f4e77ffd15920919821d1b736d3db1e0fd89b385eef9b7790a8d5a8bd * remainderOperandefb5053f4e77ffd15920919821d1b736d3db1e0fd89b385eef9b7790a8d5a8bd;
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_237\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_237\ => 
                        -- Waiting for the result to appear in \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.370\ (have to wait 10 clock cycles in this state).
                        -- The assignment needs to be kept up for multi-cycle operations for the result to actually appear in the target.
                        if (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.61\ >= to_signed(10, 32)) then 
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_238\;
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.61\ := to_signed(0, 32);
                        else 
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.61\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.61\ + to_signed(1, 32);
                        end if;
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.370\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\ / \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperandefb5053f4e77ffd15920919821d1b736d3db1e0fd89b385eef9b7790a8d5a8bd\;
                        -- Clock cycles needed to complete this state (approximation): 10
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_238\ => 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.371\ := SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.370\ * \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperandefb5053f4e77ffd15920919821d1b736d3db1e0fd89b385eef9b7790a8d5a8bd\, 32);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.372\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\ - \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.371\;
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num317\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.372\;
                        -- The following section was transformed from the .NET statement below:
                        -- int num318;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num318 = ((int)((int)(input) & (int)(b2)));
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.373\ := (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\) and signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b2\), 32));
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num318\ := ((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.373\));
                        -- The following section was transformed from the .NET statement below:
                        -- int num319;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num319 = ((int)((int)(input) | (int)(b2)));
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_239\;
                        -- Clock cycles needed to complete this state (approximation): 0.8857
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_239\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.374\ := (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\) or signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b2\), 32));
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num319\ := ((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.374\));
                        -- The following section was transformed from the .NET statement below:
                        -- int num320;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num320 = ((int)((int)(input) ^ (int)(b2)));
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.375\ := (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\) xor signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b2\), 32));
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num320\ := ((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.375\));
                        -- The following section was transformed from the .NET statement below:
                        -- int num321;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num321 = input << (int)b3;
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.376\ := shift_left(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\, to_integer(unsigned(SmartResize(SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b3\, 32), 5))));
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num321\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.376\;
                        -- The following section was transformed from the .NET statement below:
                        -- int num322;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num322 = input >> (int)b3;
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_240\;
                        -- Clock cycles needed to complete this state (approximation): 0.8016
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_240\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.377\ := shift_right(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\, to_integer(unsigned(SmartResize(SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b3\, 32), 5) and "11111")));
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num322\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.377\;
                        -- The following section was transformed from the .NET statement below:
                        -- int num323;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num323 = (int)((int)(input) + (int)(b3));
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.378\ := SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\) + SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b3\), 32), 32);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num323\ := (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.378\);
                        -- The following section was transformed from the .NET statement below:
                        -- int num324;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num324 = (int)((int)(input) - (int)(b3));
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_241\;
                        -- Clock cycles needed to complete this state (approximation): 0.9742
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_241\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.379\ := (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\) - SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b3\), 32);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num324\ := (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.379\);
                        -- The following section was transformed from the .NET statement below:
                        -- int num325;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num325 = (int)((int)(input) * (int)(b3));
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.380\ := SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\) * SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b3\), 32), 32);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num325\ := (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.380\);
                        -- The following section was transformed from the .NET statement below:
                        -- int num326;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num326 = (int)((int)(input) / (int)(b3));
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_242\;
                        -- Clock cycles needed to complete this state (approximation): 0.7471
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_242\ => 
                        -- Waiting for the result to appear in \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.381\ (have to wait 10 clock cycles in this state).
                        -- The assignment needs to be kept up for multi-cycle operations for the result to actually appear in the target.
                        if (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.62\ >= to_signed(10, 32)) then 
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_243\;
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.62\ := to_signed(0, 32);
                        else 
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.62\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.62\ + to_signed(1, 32);
                        end if;
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.381\ := (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\) / SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b3\), 32);
                        -- Clock cycles needed to complete this state (approximation): 10
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_243\ => 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num326\ := (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.381\);
                        -- The following section was transformed from the .NET statement below:
                        -- int num327;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- int remainderOperand55586d2b42b18b95e7ea5915e9a18ecf4963523e9143b4e67cef115719e52a29;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- remainderOperand55586d2b42b18b95e7ea5915e9a18ecf4963523e9143b4e67cef115719e52a29 = (int)(input);
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperand55586d2b42b18b95e7ea5915e9a18ecf4963523e9143b4e67cef115719e52a29\ := (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\);
                        -- The following section was transformed from the .NET statement below:
                        -- int remainderOperand68798c761018f1346ae01a4a965252f4d790df620e22a5fd736220a79a7f0b21;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- remainderOperand68798c761018f1346ae01a4a965252f4d790df620e22a5fd736220a79a7f0b21 = (int)(b3);
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperand68798c761018f1346ae01a4a965252f4d790df620e22a5fd736220a79a7f0b21\ := SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b3\), 32);
                        -- The following section was transformed from the .NET statement below:
                        -- num327 = (int)(remainderOperand55586d2b42b18b95e7ea5915e9a18ecf4963523e9143b4e67cef115719e52a29 - remainderOperand55586d2b42b18b95e7ea5915e9a18ecf4963523e9143b4e67cef115719e52a29 / remainderOperand68798c761018f1346ae01a4a965252f4d790df620e22a5fd736220a79a7f0b21 * remainderOperand68798c761018f1346ae01a4a965252f4d790df620e22a5fd736220a79a7f0b21);
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_244\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_244\ => 
                        -- Waiting for the result to appear in \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.382\ (have to wait 10 clock cycles in this state).
                        -- The assignment needs to be kept up for multi-cycle operations for the result to actually appear in the target.
                        if (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.63\ >= to_signed(10, 32)) then 
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_245\;
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.63\ := to_signed(0, 32);
                        else 
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.63\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.63\ + to_signed(1, 32);
                        end if;
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.382\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperand55586d2b42b18b95e7ea5915e9a18ecf4963523e9143b4e67cef115719e52a29\ / \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperand68798c761018f1346ae01a4a965252f4d790df620e22a5fd736220a79a7f0b21\;
                        -- Clock cycles needed to complete this state (approximation): 10
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_245\ => 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.383\ := SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.382\ * \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperand68798c761018f1346ae01a4a965252f4d790df620e22a5fd736220a79a7f0b21\, 32);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.384\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperand55586d2b42b18b95e7ea5915e9a18ecf4963523e9143b4e67cef115719e52a29\ - \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.383\;
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num327\ := (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.384\);
                        -- The following section was transformed from the .NET statement below:
                        -- int num328;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num328 = ((int)((int)(input) & (int)(b3)));
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.385\ := (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\) and SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b3\), 32);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num328\ := ((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.385\));
                        -- The following section was transformed from the .NET statement below:
                        -- int num329;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num329 = ((int)((int)(input) | (int)(b3)));
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_246\;
                        -- Clock cycles needed to complete this state (approximation): 0.8857
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_246\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.386\ := (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\) or SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b3\), 32);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num329\ := ((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.386\));
                        -- The following section was transformed from the .NET statement below:
                        -- int num330;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num330 = ((int)((int)(input) ^ (int)(b3)));
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.387\ := (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\) xor SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b3\), 32);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num330\ := ((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.387\));
                        -- The following section was transformed from the .NET statement below:
                        -- int num331;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num331 = input << (int)num21;
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.388\ := shift_left(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\, to_integer(unsigned(SmartResize(SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num21\, 32), 5))));
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num331\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.388\;
                        -- The following section was transformed from the .NET statement below:
                        -- int num332;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num332 = input >> (int)num21;
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_247\;
                        -- Clock cycles needed to complete this state (approximation): 0.8016
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_247\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.389\ := shift_right(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\, to_integer(unsigned(SmartResize(SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num21\, 32), 5) and "11111")));
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num332\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.389\;
                        -- The following section was transformed from the .NET statement below:
                        -- int num333;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num333 = (int)((int)(input) + (int)(num21));
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.390\ := SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\) + SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num21\), 32), 32);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num333\ := (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.390\);
                        -- The following section was transformed from the .NET statement below:
                        -- int num334;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num334 = (int)((int)(input) - (int)(num21));
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_248\;
                        -- Clock cycles needed to complete this state (approximation): 0.9742
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_248\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.391\ := (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\) - SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num21\), 32);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num334\ := (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.391\);
                        -- The following section was transformed from the .NET statement below:
                        -- int num335;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num335 = (int)((int)(input) * (int)(num21));
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.392\ := SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\) * SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num21\), 32), 32);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num335\ := (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.392\);
                        -- The following section was transformed from the .NET statement below:
                        -- int num336;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num336 = (int)((int)(input) / (int)(num21));
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_249\;
                        -- Clock cycles needed to complete this state (approximation): 0.7471
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_249\ => 
                        -- Waiting for the result to appear in \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.393\ (have to wait 10 clock cycles in this state).
                        -- The assignment needs to be kept up for multi-cycle operations for the result to actually appear in the target.
                        if (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.64\ >= to_signed(10, 32)) then 
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_250\;
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.64\ := to_signed(0, 32);
                        else 
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.64\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.64\ + to_signed(1, 32);
                        end if;
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.393\ := (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\) / SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num21\), 32);
                        -- Clock cycles needed to complete this state (approximation): 10
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_250\ => 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num336\ := (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.393\);
                        -- The following section was transformed from the .NET statement below:
                        -- int num337;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- int remainderOperand55586d2b42b18b95e7ea5915e9a18ecf4963523e9143b4e67cef115719e52a29;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- remainderOperand55586d2b42b18b95e7ea5915e9a18ecf4963523e9143b4e67cef115719e52a29 = (int)(input);
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperand55586d2b42b18b95e7ea5915e9a18ecf4963523e9143b4e67cef115719e52a29\ := (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\);
                        -- The following section was transformed from the .NET statement below:
                        -- int remainderOperandc5ee9b088dd78f02d0eea0801ee05c33005011bf73db14965ef1c5f8b39119ce;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- remainderOperandc5ee9b088dd78f02d0eea0801ee05c33005011bf73db14965ef1c5f8b39119ce = (int)(num21);
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperandc5ee9b088dd78f02d0eea0801ee05c33005011bf73db14965ef1c5f8b39119ce\ := SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num21\), 32);
                        -- The following section was transformed from the .NET statement below:
                        -- num337 = (int)(remainderOperand55586d2b42b18b95e7ea5915e9a18ecf4963523e9143b4e67cef115719e52a29 - remainderOperand55586d2b42b18b95e7ea5915e9a18ecf4963523e9143b4e67cef115719e52a29 / remainderOperandc5ee9b088dd78f02d0eea0801ee05c33005011bf73db14965ef1c5f8b39119ce * remainderOperandc5ee9b088dd78f02d0eea0801ee05c33005011bf73db14965ef1c5f8b39119ce);
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_251\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_251\ => 
                        -- Waiting for the result to appear in \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.394\ (have to wait 10 clock cycles in this state).
                        -- The assignment needs to be kept up for multi-cycle operations for the result to actually appear in the target.
                        if (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.65\ >= to_signed(10, 32)) then 
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_252\;
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.65\ := to_signed(0, 32);
                        else 
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.65\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.65\ + to_signed(1, 32);
                        end if;
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.394\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperand55586d2b42b18b95e7ea5915e9a18ecf4963523e9143b4e67cef115719e52a29\ / \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperandc5ee9b088dd78f02d0eea0801ee05c33005011bf73db14965ef1c5f8b39119ce\;
                        -- Clock cycles needed to complete this state (approximation): 10
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_252\ => 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.395\ := SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.394\ * \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperandc5ee9b088dd78f02d0eea0801ee05c33005011bf73db14965ef1c5f8b39119ce\, 32);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.396\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperand55586d2b42b18b95e7ea5915e9a18ecf4963523e9143b4e67cef115719e52a29\ - \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.395\;
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num337\ := (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.396\);
                        -- The following section was transformed from the .NET statement below:
                        -- int num338;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num338 = ((int)((int)(input) & (int)(num21)));
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.397\ := (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\) and SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num21\), 32);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num338\ := ((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.397\));
                        -- The following section was transformed from the .NET statement below:
                        -- int num339;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num339 = ((int)((int)(input) | (int)(num21)));
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_253\;
                        -- Clock cycles needed to complete this state (approximation): 0.8857
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_253\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.398\ := (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\) or SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num21\), 32);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num339\ := ((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.398\));
                        -- The following section was transformed from the .NET statement below:
                        -- int num340;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num340 = ((int)((int)(input) ^ (int)(num21)));
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.399\ := (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\) xor SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num21\), 32);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num340\ := ((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.399\));
                        -- The following section was transformed from the .NET statement below:
                        -- int num341;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num341 = input << (int)num32;
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.400\ := shift_left(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\, to_integer(unsigned(SmartResize(signed(SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num32\, 32)), 5))));
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num341\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.400\;
                        -- The following section was transformed from the .NET statement below:
                        -- int num342;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num342 = input >> (int)num32;
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_254\;
                        -- Clock cycles needed to complete this state (approximation): 0.8016
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_254\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.401\ := shift_right(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\, to_integer(unsigned(SmartResize(signed(SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num32\, 32)), 5) and "11111")));
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num342\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.401\;
                        -- The following section was transformed from the .NET statement below:
                        -- int num343;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num343 = (int)((int)(input) + (int)(num32));
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.402\ := SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\) + signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num32\), 32)), 32);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num343\ := (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.402\);
                        -- The following section was transformed from the .NET statement below:
                        -- int num344;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num344 = (int)((int)(input) - (int)(num32));
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_255\;
                        -- Clock cycles needed to complete this state (approximation): 0.9742
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_255\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.403\ := (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\) - signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num32\), 32));
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num344\ := (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.403\);
                        -- The following section was transformed from the .NET statement below:
                        -- int num345;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num345 = (int)((int)(input) * (int)(num32));
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.404\ := SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\) * signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num32\), 32)), 32);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num345\ := (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.404\);
                        -- The following section was transformed from the .NET statement below:
                        -- int num346;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num346 = input / (int)num32;
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_256\;
                        -- Clock cycles needed to complete this state (approximation): 0.7471
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_256\ => 
                        -- Waiting for the result to appear in \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.405\ (have to wait 10 clock cycles in this state).
                        -- The assignment needs to be kept up for multi-cycle operations for the result to actually appear in the target.
                        if (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.66\ >= to_signed(10, 32)) then 
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_257\;
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.66\ := to_signed(0, 32);
                        else 
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.66\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.66\ + to_signed(1, 32);
                        end if;
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.405\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\ / signed(SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num32\, 32));
                        -- Clock cycles needed to complete this state (approximation): 10
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_257\ => 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num346\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.405\;
                        -- The following section was transformed from the .NET statement below:
                        -- int num347;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- int remainderOperandac2d84469251a7f2b094378d1bb4e487b3a02527d578d9b4bf7f070b2adad76c;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- remainderOperandac2d84469251a7f2b094378d1bb4e487b3a02527d578d9b4bf7f070b2adad76c = (int)num32;
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperandac2d84469251a7f2b094378d1bb4e487b3a02527d578d9b4bf7f070b2adad76c\ := signed(SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num32\, 32));
                        -- The following section was transformed from the .NET statement below:
                        -- num347 = input - input / remainderOperandac2d84469251a7f2b094378d1bb4e487b3a02527d578d9b4bf7f070b2adad76c * remainderOperandac2d84469251a7f2b094378d1bb4e487b3a02527d578d9b4bf7f070b2adad76c;
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_258\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_258\ => 
                        -- Waiting for the result to appear in \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.406\ (have to wait 10 clock cycles in this state).
                        -- The assignment needs to be kept up for multi-cycle operations for the result to actually appear in the target.
                        if (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.67\ >= to_signed(10, 32)) then 
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_259\;
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.67\ := to_signed(0, 32);
                        else 
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.67\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.67\ + to_signed(1, 32);
                        end if;
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.406\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\ / \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperandac2d84469251a7f2b094378d1bb4e487b3a02527d578d9b4bf7f070b2adad76c\;
                        -- Clock cycles needed to complete this state (approximation): 10
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_259\ => 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.407\ := SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.406\ * \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperandac2d84469251a7f2b094378d1bb4e487b3a02527d578d9b4bf7f070b2adad76c\, 32);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.408\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\ - \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.407\;
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num347\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.408\;
                        -- The following section was transformed from the .NET statement below:
                        -- int num348;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num348 = ((int)((int)(input) & (int)(num32)));
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.409\ := (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\) and signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num32\), 32));
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num348\ := ((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.409\));
                        -- The following section was transformed from the .NET statement below:
                        -- int num349;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num349 = ((int)((int)(input) | (int)(num32)));
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_260\;
                        -- Clock cycles needed to complete this state (approximation): 0.8857
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_260\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.410\ := (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\) or signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num32\), 32));
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num349\ := ((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.410\));
                        -- The following section was transformed from the .NET statement below:
                        -- int num350;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num350 = ((int)((int)(input) ^ (int)(num32)));
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.411\ := (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\) xor signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num32\), 32));
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num350\ := ((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.411\));
                        -- The following section was transformed from the .NET statement below:
                        -- int num351;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num351 = input << input;
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.412\ := shift_left(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\, to_integer(unsigned(SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\, 5))));
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num351\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.412\;
                        -- The following section was transformed from the .NET statement below:
                        -- int num352;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num352 = input >> input;
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_261\;
                        -- Clock cycles needed to complete this state (approximation): 0.8016
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_261\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.413\ := shift_right(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\, to_integer(unsigned(SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\, 5) and "11111")));
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num352\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.413\;
                        -- The following section was transformed from the .NET statement below:
                        -- int num353;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num353 = input + input;
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.414\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\ + \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\;
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num353\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.414\;
                        -- The following section was transformed from the .NET statement below:
                        -- int num354;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num354 = input - input;
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_262\;
                        -- Clock cycles needed to complete this state (approximation): 0.9742
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_262\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.415\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\ - \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\;
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num354\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.415\;
                        -- The following section was transformed from the .NET statement below:
                        -- int num355;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num355 = input * input;
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.416\ := SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\ * \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\, 32);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num355\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.416\;
                        -- The following section was transformed from the .NET statement below:
                        -- int num356;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num356 = input / input;
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_263\;
                        -- Clock cycles needed to complete this state (approximation): 0.7471
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_263\ => 
                        -- Waiting for the result to appear in \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.417\ (have to wait 10 clock cycles in this state).
                        -- The assignment needs to be kept up for multi-cycle operations for the result to actually appear in the target.
                        if (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.68\ >= to_signed(10, 32)) then 
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_264\;
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.68\ := to_signed(0, 32);
                        else 
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.68\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.68\ + to_signed(1, 32);
                        end if;
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.417\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\ / \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\;
                        -- Clock cycles needed to complete this state (approximation): 10
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_264\ => 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num356\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.417\;
                        -- The following section was transformed from the .NET statement below:
                        -- int num357;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num357 = input - input / input * input;
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_265\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_265\ => 
                        -- Waiting for the result to appear in \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.418\ (have to wait 10 clock cycles in this state).
                        -- The assignment needs to be kept up for multi-cycle operations for the result to actually appear in the target.
                        if (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.69\ >= to_signed(10, 32)) then 
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_266\;
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.69\ := to_signed(0, 32);
                        else 
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.69\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.69\ + to_signed(1, 32);
                        end if;
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.418\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\ / \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\;
                        -- Clock cycles needed to complete this state (approximation): 10
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_266\ => 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.419\ := SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.418\ * \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\, 32);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.420\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\ - \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.419\;
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num357\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.420\;
                        -- The following section was transformed from the .NET statement below:
                        -- int num358;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num358 = (input & input);
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.421\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\ and \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\;
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num358\ := (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.421\);
                        -- The following section was transformed from the .NET statement below:
                        -- int num359;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num359 = (input | input);
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_267\;
                        -- Clock cycles needed to complete this state (approximation): 0.8857
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_267\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.422\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\ or \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\;
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num359\ := (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.422\);
                        -- The following section was transformed from the .NET statement below:
                        -- int num360;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num360 = (input ^ input);
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.423\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\ xor \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\;
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num360\ := (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.423\);
                        -- The following section was transformed from the .NET statement below:
                        -- int num361;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num361 = input << input;
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.424\ := shift_left(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\, to_integer(unsigned(SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\, 5))));
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num361\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.424\;
                        -- The following section was transformed from the .NET statement below:
                        -- int num362;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num362 = input >> input;
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_268\;
                        -- Clock cycles needed to complete this state (approximation): 0.8016
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_268\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.425\ := shift_right(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\, to_integer(unsigned(SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\, 5) and "11111")));
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num362\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.425\;
                        -- The following section was transformed from the .NET statement below:
                        -- long num363;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num363 = (long)((long)(input) + (long)((uint)input));
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_269\;
                        -- Clock cycles needed to complete this state (approximation): 0.6479
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_269\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.426\ := SmartResize(SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\), 64) + signed(SmartResize((unsigned(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\)), 64)), 64);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num363\ := (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.426\);
                        -- The following section was transformed from the .NET statement below:
                        -- long num364;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num364 = (long)((long)(input) - (long)((uint)input));
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.427\ := SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\), 64) - signed(SmartResize((unsigned(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\)), 64));
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num364\ := (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.427\);
                        -- The following section was transformed from the .NET statement below:
                        -- long num365;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num365 = (long)((long)(input) * (long)((uint)input));
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_270\;
                        -- Clock cycles needed to complete this state (approximation): 0.7796
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_270\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.428\ := SmartResize(SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\), 64) * signed(SmartResize((unsigned(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\)), 64)), 64);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num365\ := (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.428\);
                        -- The following section was transformed from the .NET statement below:
                        -- long num366;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num366 = (long)input / (long)(uint)input;
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_271\;
                        -- Clock cycles needed to complete this state (approximation): 0.7638
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_271\ => 
                        -- Waiting for the result to appear in \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.429\ (have to wait 27 clock cycles in this state).
                        -- The assignment needs to be kept up for multi-cycle operations for the result to actually appear in the target.
                        if (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.70\ >= to_signed(27, 32)) then 
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_272\;
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.70\ := to_signed(0, 32);
                        else 
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.70\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.70\ + to_signed(1, 32);
                        end if;
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.429\ := SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\, 64) / signed(SmartResize(unsigned(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\), 64));
                        -- Clock cycles needed to complete this state (approximation): 27
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_272\ => 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num366\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.429\;
                        -- The following section was transformed from the .NET statement below:
                        -- long num367;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- long remainderOperanddae5fcb165e7e861d625046bd776828c666cfb77620adc781e7130255f7b6e2f;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- remainderOperanddae5fcb165e7e861d625046bd776828c666cfb77620adc781e7130255f7b6e2f = (long)input;
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperanddae5fcb165e7e861d625046bd776828c666cfb77620adc781e7130255f7b6e2f\ := SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\, 64);
                        -- The following section was transformed from the .NET statement below:
                        -- long remainderOperand838dc20449138906a7f16bcd0cca3e401ab50dd9612c97ebb95583809f2e8b4d;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- remainderOperand838dc20449138906a7f16bcd0cca3e401ab50dd9612c97ebb95583809f2e8b4d = (long)(uint)input;
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperand838dc20449138906a7f16bcd0cca3e401ab50dd9612c97ebb95583809f2e8b4d\ := signed(SmartResize(unsigned(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\), 64));
                        -- The following section was transformed from the .NET statement below:
                        -- num367 = remainderOperanddae5fcb165e7e861d625046bd776828c666cfb77620adc781e7130255f7b6e2f - remainderOperanddae5fcb165e7e861d625046bd776828c666cfb77620adc781e7130255f7b6e2f / remainderOperand838dc20449138906a7f16bcd0cca3e401ab50dd9612c97ebb95583809f2e8b4d * remainderOperand838dc20449138906a7f16bcd0cca3e401ab50dd9612c97ebb95583809f2e8b4d;
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_273\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_273\ => 
                        -- Waiting for the result to appear in \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.430\ (have to wait 27 clock cycles in this state).
                        -- The assignment needs to be kept up for multi-cycle operations for the result to actually appear in the target.
                        if (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.71\ >= to_signed(27, 32)) then 
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_274\;
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.71\ := to_signed(0, 32);
                        else 
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.71\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.71\ + to_signed(1, 32);
                        end if;
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.430\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperanddae5fcb165e7e861d625046bd776828c666cfb77620adc781e7130255f7b6e2f\ / \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperand838dc20449138906a7f16bcd0cca3e401ab50dd9612c97ebb95583809f2e8b4d\;
                        -- Clock cycles needed to complete this state (approximation): 27
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_274\ => 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.431\ := SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.430\ * \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperand838dc20449138906a7f16bcd0cca3e401ab50dd9612c97ebb95583809f2e8b4d\, 64);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_275\;
                        -- Clock cycles needed to complete this state (approximation): 0.7638
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_275\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.432\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperanddae5fcb165e7e861d625046bd776828c666cfb77620adc781e7130255f7b6e2f\ - \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.431\;
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num367\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.432\;
                        -- The following section was transformed from the .NET statement below:
                        -- long num368;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num368 = ((long)((long)(input) & (long)((uint)input)));
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.433\ := SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\), 64) and signed(SmartResize((unsigned(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\)), 64));
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num368\ := ((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.433\));
                        -- The following section was transformed from the .NET statement below:
                        -- long num369;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num369 = ((long)((long)(input) | (long)((uint)input)));
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.434\ := SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\), 64) or signed(SmartResize((unsigned(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\)), 64));
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num369\ := ((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.434\));
                        -- The following section was transformed from the .NET statement below:
                        -- long num370;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num370 = ((long)((long)(input) ^ (long)((uint)input)));
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.435\ := SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\), 64) xor signed(SmartResize((unsigned(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\)), 64));
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num370\ := ((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.435\));
                        -- The following section was transformed from the .NET statement below:
                        -- int num371;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num371 = input << (int)num63;
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_276\;
                        -- Clock cycles needed to complete this state (approximation): 0.91
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_276\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.436\ := shift_left(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\, to_integer(unsigned(SmartResize(SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num63\, 32), 5))));
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num371\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.436\;
                        -- The following section was transformed from the .NET statement below:
                        -- int num372;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num372 = input >> (int)num63;
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_277\;
                        -- Clock cycles needed to complete this state (approximation): 0.5244
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_277\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.437\ := shift_right(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\, to_integer(unsigned(SmartResize(SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num63\, 32), 5) and "11111")));
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num372\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.437\;
                        -- The following section was transformed from the .NET statement below:
                        -- long num373;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num373 = (long)((long)(input) + num63);
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_278\;
                        -- Clock cycles needed to complete this state (approximation): 0.6479
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_278\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.438\ := SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\), 64) + \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num63\;
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num373\ := (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.438\);
                        -- The following section was transformed from the .NET statement below:
                        -- long num374;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num374 = (long)((long)(input) - num63);
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.439\ := SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\), 64) - \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num63\;
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num374\ := (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.439\);
                        -- The following section was transformed from the .NET statement below:
                        -- long num375;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num375 = (long)((long)(input) * num63);
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_279\;
                        -- Clock cycles needed to complete this state (approximation): 0.7796
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_279\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.440\ := SmartResize(SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\), 64) * \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num63\, 64);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num375\ := (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.440\);
                        -- The following section was transformed from the .NET statement below:
                        -- long num376;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num376 = (long)((long)(input) / num63);
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_280\;
                        -- Clock cycles needed to complete this state (approximation): 0.7638
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_280\ => 
                        -- Waiting for the result to appear in \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.441\ (have to wait 27 clock cycles in this state).
                        -- The assignment needs to be kept up for multi-cycle operations for the result to actually appear in the target.
                        if (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.72\ >= to_signed(27, 32)) then 
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_281\;
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.72\ := to_signed(0, 32);
                        else 
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.72\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.72\ + to_signed(1, 32);
                        end if;
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.441\ := SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\), 64) / \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num63\;
                        -- Clock cycles needed to complete this state (approximation): 27
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_281\ => 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num376\ := (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.441\);
                        -- The following section was transformed from the .NET statement below:
                        -- long num377;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- long remainderOperand4bc89824826eaf4fc488736139d661507595ff0e316afc22e8c21ebdfa9bf28e;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- remainderOperand4bc89824826eaf4fc488736139d661507595ff0e316afc22e8c21ebdfa9bf28e = (long)(input);
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperand4bc89824826eaf4fc488736139d661507595ff0e316afc22e8c21ebdfa9bf28e\ := SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\), 64);
                        -- The following section was transformed from the .NET statement below:
                        -- num377 = (long)(remainderOperand4bc89824826eaf4fc488736139d661507595ff0e316afc22e8c21ebdfa9bf28e - remainderOperand4bc89824826eaf4fc488736139d661507595ff0e316afc22e8c21ebdfa9bf28e / num63 * num63);
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_282\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_282\ => 
                        -- Waiting for the result to appear in \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.442\ (have to wait 27 clock cycles in this state).
                        -- The assignment needs to be kept up for multi-cycle operations for the result to actually appear in the target.
                        if (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.73\ >= to_signed(27, 32)) then 
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_283\;
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.73\ := to_signed(0, 32);
                        else 
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.73\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.73\ + to_signed(1, 32);
                        end if;
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.442\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperand4bc89824826eaf4fc488736139d661507595ff0e316afc22e8c21ebdfa9bf28e\ / \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num63\;
                        -- Clock cycles needed to complete this state (approximation): 27
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_283\ => 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.443\ := SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.442\ * \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num63\, 64);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_284\;
                        -- Clock cycles needed to complete this state (approximation): 0.7638
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_284\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.444\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperand4bc89824826eaf4fc488736139d661507595ff0e316afc22e8c21ebdfa9bf28e\ - \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.443\;
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num377\ := (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.444\);
                        -- The following section was transformed from the .NET statement below:
                        -- long num378;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num378 = ((long)((long)(input) & num63));
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.445\ := SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\), 64) and \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num63\;
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num378\ := ((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.445\));
                        -- The following section was transformed from the .NET statement below:
                        -- long num379;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num379 = ((long)((long)(input) | num63));
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.446\ := SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\), 64) or \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num63\;
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num379\ := ((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.446\));
                        -- The following section was transformed from the .NET statement below:
                        -- long num380;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num380 = ((long)((long)(input) ^ num63));
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.447\ := SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\), 64) xor \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num63\;
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num380\ := ((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.447\));
                        -- The following section was transformed from the .NET statement below:
                        -- int num381;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num381 = input << (int)num74;
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_285\;
                        -- Clock cycles needed to complete this state (approximation): 0.91
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_285\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.448\ := shift_left(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\, to_integer(unsigned(SmartResize(signed(SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num74\, 32)), 5))));
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num381\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.448\;
                        -- The following section was transformed from the .NET statement below:
                        -- int num382;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num382 = input >> (int)num74;
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_286\;
                        -- Clock cycles needed to complete this state (approximation): 0.5244
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_286\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.449\ := shift_right(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\, to_integer(unsigned(SmartResize(signed(SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num74\, 32)), 5) and "11111")));
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num382\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.449\;
                        -- The following section was transformed from the .NET statement below:
                        -- uint num383;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num383 = (uint)(input << (int)b2);
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_287\;
                        -- Clock cycles needed to complete this state (approximation): 0.6479
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_287\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.450\ := unsigned(shift_left(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\, to_integer(unsigned(SmartResize(signed(SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b2\, 32)), 5)))));
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num383\ := (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.450\);
                        -- The following section was transformed from the .NET statement below:
                        -- uint num384;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num384 = (uint)input >> (int)b2;
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_288\;
                        -- Clock cycles needed to complete this state (approximation): 0.5244
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_288\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.451\ := shift_right(unsigned(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\), to_integer(unsigned(SmartResize(signed(SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b2\, 32)), 5) and "11111")));
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num384\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.451\;
                        -- The following section was transformed from the .NET statement below:
                        -- uint num385;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num385 = (uint)((int)(input) + (int)(b2));
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.452\ := SmartResize(unsigned((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\) + signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b2\), 32))), 32);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num385\ := (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.452\);
                        -- The following section was transformed from the .NET statement below:
                        -- uint num386;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num386 = (uint)((int)(input) - (int)(b2));
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_289\;
                        -- Clock cycles needed to complete this state (approximation): 0.9774
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_289\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.453\ := unsigned((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\) - signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b2\), 32)));
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num386\ := (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.453\);
                        -- The following section was transformed from the .NET statement below:
                        -- uint num387;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num387 = (uint)((int)(input) * (int)(b2));
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.454\ := SmartResize(unsigned((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\) * signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b2\), 32))), 32);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num387\ := (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.454\);
                        -- The following section was transformed from the .NET statement below:
                        -- uint num388;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num388 = (uint)input / (uint)b2;
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_290\;
                        -- Clock cycles needed to complete this state (approximation): 0.7471
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_290\ => 
                        -- Waiting for the result to appear in \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.455\ (have to wait 9 clock cycles in this state).
                        -- The assignment needs to be kept up for multi-cycle operations for the result to actually appear in the target.
                        if (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.74\ >= to_signed(9, 32)) then 
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_291\;
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.74\ := to_signed(0, 32);
                        else 
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.74\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.74\ + to_signed(1, 32);
                        end if;
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.455\ := unsigned(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\) / SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b2\, 32);
                        -- Clock cycles needed to complete this state (approximation): 9
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_291\ => 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num388\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.455\;
                        -- The following section was transformed from the .NET statement below:
                        -- uint num389;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- uint remainderOperand53fc996822df2ca6c8221d7a30b00205ac201f3c5c0311b48f63e126ebd888da;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- remainderOperand53fc996822df2ca6c8221d7a30b00205ac201f3c5c0311b48f63e126ebd888da = (uint)input;
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperand53fc996822df2ca6c8221d7a30b00205ac201f3c5c0311b48f63e126ebd888da\ := unsigned(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\);
                        -- The following section was transformed from the .NET statement below:
                        -- uint remainderOperandf016d2c872a88a1d3b3a4dd56c5722e1ee378e8b0ec44f88bd08722d64a9331c;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- remainderOperandf016d2c872a88a1d3b3a4dd56c5722e1ee378e8b0ec44f88bd08722d64a9331c = (uint)b2;
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperandf016d2c872a88a1d3b3a4dd56c5722e1ee378e8b0ec44f88bd08722d64a9331c\ := SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b2\, 32);
                        -- The following section was transformed from the .NET statement below:
                        -- num389 = remainderOperand53fc996822df2ca6c8221d7a30b00205ac201f3c5c0311b48f63e126ebd888da - remainderOperand53fc996822df2ca6c8221d7a30b00205ac201f3c5c0311b48f63e126ebd888da / remainderOperandf016d2c872a88a1d3b3a4dd56c5722e1ee378e8b0ec44f88bd08722d64a9331c * remainderOperandf016d2c872a88a1d3b3a4dd56c5722e1ee378e8b0ec44f88bd08722d64a9331c;
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_292\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_292\ => 
                        -- Waiting for the result to appear in \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.456\ (have to wait 9 clock cycles in this state).
                        -- The assignment needs to be kept up for multi-cycle operations for the result to actually appear in the target.
                        if (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.75\ >= to_signed(9, 32)) then 
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_293\;
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.75\ := to_signed(0, 32);
                        else 
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.75\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.75\ + to_signed(1, 32);
                        end if;
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.456\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperand53fc996822df2ca6c8221d7a30b00205ac201f3c5c0311b48f63e126ebd888da\ / \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperandf016d2c872a88a1d3b3a4dd56c5722e1ee378e8b0ec44f88bd08722d64a9331c\;
                        -- Clock cycles needed to complete this state (approximation): 9
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_293\ => 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.457\ := SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.456\ * \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperandf016d2c872a88a1d3b3a4dd56c5722e1ee378e8b0ec44f88bd08722d64a9331c\, 32);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.458\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperand53fc996822df2ca6c8221d7a30b00205ac201f3c5c0311b48f63e126ebd888da\ - \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.457\;
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num389\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.458\;
                        -- The following section was transformed from the .NET statement below:
                        -- uint num390;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num390 = (uint)((int)(input) & (int)(b2));
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.459\ := unsigned((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\) and signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b2\), 32)));
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num390\ := (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.459\);
                        -- The following section was transformed from the .NET statement below:
                        -- uint num391;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num391 = (uint)((int)(input) | (int)(b2));
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_294\;
                        -- Clock cycles needed to complete this state (approximation): 0.8857
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_294\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.460\ := unsigned((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\) or signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b2\), 32)));
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num391\ := (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.460\);
                        -- The following section was transformed from the .NET statement below:
                        -- uint num392;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num392 = (uint)((int)(input) ^ (int)(b2));
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.461\ := unsigned((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\) xor signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b2\), 32)));
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num392\ := (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.461\);
                        -- The following section was transformed from the .NET statement below:
                        -- uint num393;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num393 = (uint)(input << (int)b3);
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.462\ := unsigned(shift_left(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\, to_integer(unsigned(SmartResize(SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b3\, 32), 5)))));
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num393\ := (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.462\);
                        -- The following section was transformed from the .NET statement below:
                        -- uint num394;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num394 = (uint)input >> (int)b3;
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_295\;
                        -- Clock cycles needed to complete this state (approximation): 0.8016
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_295\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.463\ := shift_right(unsigned(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\), to_integer(unsigned(SmartResize(SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b3\, 32), 5) and "11111")));
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num394\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.463\;
                        -- The following section was transformed from the .NET statement below:
                        -- long num395;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num395 = (long)((long)((uint)input) + (long)(b3));
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_296\;
                        -- Clock cycles needed to complete this state (approximation): 0.6511
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_296\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.464\ := SmartResize(signed(SmartResize((unsigned(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\)), 64)) + SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b3\), 64), 64);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num395\ := (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.464\);
                        -- The following section was transformed from the .NET statement below:
                        -- long num396;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num396 = (long)((long)((uint)input) - (long)(b3));
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.465\ := signed(SmartResize((unsigned(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\)), 64)) - SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b3\), 64);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num396\ := (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.465\);
                        -- The following section was transformed from the .NET statement below:
                        -- long num397;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num397 = (long)((long)((uint)input) * (long)(b3));
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_297\;
                        -- Clock cycles needed to complete this state (approximation): 0.7796
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_297\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.466\ := SmartResize(signed(SmartResize((unsigned(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\)), 64)) * SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b3\), 64), 64);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num397\ := (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.466\);
                        -- The following section was transformed from the .NET statement below:
                        -- long num398;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num398 = (long)(uint)input / (long)b3;
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_298\;
                        -- Clock cycles needed to complete this state (approximation): 0.7638
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_298\ => 
                        -- Waiting for the result to appear in \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.467\ (have to wait 27 clock cycles in this state).
                        -- The assignment needs to be kept up for multi-cycle operations for the result to actually appear in the target.
                        if (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.76\ >= to_signed(27, 32)) then 
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_299\;
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.76\ := to_signed(0, 32);
                        else 
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.76\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.76\ + to_signed(1, 32);
                        end if;
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.467\ := signed(SmartResize(unsigned(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\), 64)) / SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b3\, 64);
                        -- Clock cycles needed to complete this state (approximation): 27
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_299\ => 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num398\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.467\;
                        -- The following section was transformed from the .NET statement below:
                        -- long num399;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- long remainderOperand838dc20449138906a7f16bcd0cca3e401ab50dd9612c97ebb95583809f2e8b4d;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- remainderOperand838dc20449138906a7f16bcd0cca3e401ab50dd9612c97ebb95583809f2e8b4d = (long)(uint)input;
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperand838dc20449138906a7f16bcd0cca3e401ab50dd9612c97ebb95583809f2e8b4d\ := signed(SmartResize(unsigned(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\), 64));
                        -- The following section was transformed from the .NET statement below:
                        -- long remainderOperand6bf900f755d22c2c9b9316dbf2e413290b12bacf8bd77ca7f46fdf4612ed5a99;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- remainderOperand6bf900f755d22c2c9b9316dbf2e413290b12bacf8bd77ca7f46fdf4612ed5a99 = (long)b3;
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperand6bf900f755d22c2c9b9316dbf2e413290b12bacf8bd77ca7f46fdf4612ed5a99\ := SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b3\, 64);
                        -- The following section was transformed from the .NET statement below:
                        -- num399 = remainderOperand838dc20449138906a7f16bcd0cca3e401ab50dd9612c97ebb95583809f2e8b4d - remainderOperand838dc20449138906a7f16bcd0cca3e401ab50dd9612c97ebb95583809f2e8b4d / remainderOperand6bf900f755d22c2c9b9316dbf2e413290b12bacf8bd77ca7f46fdf4612ed5a99 * remainderOperand6bf900f755d22c2c9b9316dbf2e413290b12bacf8bd77ca7f46fdf4612ed5a99;
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_300\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_300\ => 
                        -- Waiting for the result to appear in \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.468\ (have to wait 27 clock cycles in this state).
                        -- The assignment needs to be kept up for multi-cycle operations for the result to actually appear in the target.
                        if (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.77\ >= to_signed(27, 32)) then 
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_301\;
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.77\ := to_signed(0, 32);
                        else 
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.77\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.77\ + to_signed(1, 32);
                        end if;
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.468\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperand838dc20449138906a7f16bcd0cca3e401ab50dd9612c97ebb95583809f2e8b4d\ / \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperand6bf900f755d22c2c9b9316dbf2e413290b12bacf8bd77ca7f46fdf4612ed5a99\;
                        -- Clock cycles needed to complete this state (approximation): 27
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_301\ => 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.469\ := SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.468\ * \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperand6bf900f755d22c2c9b9316dbf2e413290b12bacf8bd77ca7f46fdf4612ed5a99\, 64);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_302\;
                        -- Clock cycles needed to complete this state (approximation): 0.7638
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_302\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.470\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperand838dc20449138906a7f16bcd0cca3e401ab50dd9612c97ebb95583809f2e8b4d\ - \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.469\;
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num399\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.470\;
                        -- The following section was transformed from the .NET statement below:
                        -- long num400;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num400 = ((long)((long)((uint)input) & (long)(b3)));
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.471\ := signed(SmartResize((unsigned(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\)), 64)) and SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b3\), 64);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num400\ := ((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.471\));
                        -- The following section was transformed from the .NET statement below:
                        -- long num401;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num401 = ((long)((long)((uint)input) | (long)(b3)));
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.472\ := signed(SmartResize((unsigned(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\)), 64)) or SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b3\), 64);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num401\ := ((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.472\));
                        -- The following section was transformed from the .NET statement below:
                        -- long num402;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num402 = ((long)((long)((uint)input) ^ (long)(b3)));
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.473\ := signed(SmartResize((unsigned(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\)), 64)) xor SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b3\), 64);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num402\ := ((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.473\));
                        -- The following section was transformed from the .NET statement below:
                        -- uint num403;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num403 = (uint)(input << (int)num21);
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_303\;
                        -- Clock cycles needed to complete this state (approximation): 0.91
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_303\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.474\ := unsigned(shift_left(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\, to_integer(unsigned(SmartResize(SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num21\, 32), 5)))));
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num403\ := (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.474\);
                        -- The following section was transformed from the .NET statement below:
                        -- uint num404;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num404 = (uint)input >> (int)num21;
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_304\;
                        -- Clock cycles needed to complete this state (approximation): 0.5244
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_304\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.475\ := shift_right(unsigned(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\), to_integer(unsigned(SmartResize(SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num21\, 32), 5) and "11111")));
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num404\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.475\;
                        -- The following section was transformed from the .NET statement below:
                        -- long num405;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num405 = (long)((long)((uint)input) + (long)(num21));
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_305\;
                        -- Clock cycles needed to complete this state (approximation): 0.6511
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_305\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.476\ := SmartResize(signed(SmartResize((unsigned(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\)), 64)) + SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num21\), 64), 64);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num405\ := (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.476\);
                        -- The following section was transformed from the .NET statement below:
                        -- long num406;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num406 = (long)((long)((uint)input) - (long)(num21));
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.477\ := signed(SmartResize((unsigned(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\)), 64)) - SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num21\), 64);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num406\ := (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.477\);
                        -- The following section was transformed from the .NET statement below:
                        -- long num407;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num407 = (long)((long)((uint)input) * (long)(num21));
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_306\;
                        -- Clock cycles needed to complete this state (approximation): 0.7796
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_306\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.478\ := SmartResize(signed(SmartResize((unsigned(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\)), 64)) * SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num21\), 64), 64);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num407\ := (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.478\);
                        -- The following section was transformed from the .NET statement below:
                        -- long num408;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num408 = (long)(uint)input / (long)num21;
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_307\;
                        -- Clock cycles needed to complete this state (approximation): 0.7638
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_307\ => 
                        -- Waiting for the result to appear in \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.479\ (have to wait 27 clock cycles in this state).
                        -- The assignment needs to be kept up for multi-cycle operations for the result to actually appear in the target.
                        if (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.78\ >= to_signed(27, 32)) then 
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_308\;
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.78\ := to_signed(0, 32);
                        else 
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.78\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.78\ + to_signed(1, 32);
                        end if;
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.479\ := signed(SmartResize(unsigned(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\), 64)) / SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num21\, 64);
                        -- Clock cycles needed to complete this state (approximation): 27
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_308\ => 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num408\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.479\;
                        -- The following section was transformed from the .NET statement below:
                        -- long num409;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- long remainderOperand838dc20449138906a7f16bcd0cca3e401ab50dd9612c97ebb95583809f2e8b4d;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- remainderOperand838dc20449138906a7f16bcd0cca3e401ab50dd9612c97ebb95583809f2e8b4d = (long)(uint)input;
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperand838dc20449138906a7f16bcd0cca3e401ab50dd9612c97ebb95583809f2e8b4d\ := signed(SmartResize(unsigned(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\), 64));
                        -- The following section was transformed from the .NET statement below:
                        -- long remainderOperand1587b7d1f92df4bc6d9cc052aceb74de89ea81aae088961b0f5b83ac2344ccc3;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- remainderOperand1587b7d1f92df4bc6d9cc052aceb74de89ea81aae088961b0f5b83ac2344ccc3 = (long)num21;
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperand1587b7d1f92df4bc6d9cc052aceb74de89ea81aae088961b0f5b83ac2344ccc3\ := SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num21\, 64);
                        -- The following section was transformed from the .NET statement below:
                        -- num409 = remainderOperand838dc20449138906a7f16bcd0cca3e401ab50dd9612c97ebb95583809f2e8b4d - remainderOperand838dc20449138906a7f16bcd0cca3e401ab50dd9612c97ebb95583809f2e8b4d / remainderOperand1587b7d1f92df4bc6d9cc052aceb74de89ea81aae088961b0f5b83ac2344ccc3 * remainderOperand1587b7d1f92df4bc6d9cc052aceb74de89ea81aae088961b0f5b83ac2344ccc3;
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_309\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_309\ => 
                        -- Waiting for the result to appear in \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.480\ (have to wait 27 clock cycles in this state).
                        -- The assignment needs to be kept up for multi-cycle operations for the result to actually appear in the target.
                        if (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.79\ >= to_signed(27, 32)) then 
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_310\;
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.79\ := to_signed(0, 32);
                        else 
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.79\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.79\ + to_signed(1, 32);
                        end if;
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.480\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperand838dc20449138906a7f16bcd0cca3e401ab50dd9612c97ebb95583809f2e8b4d\ / \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperand1587b7d1f92df4bc6d9cc052aceb74de89ea81aae088961b0f5b83ac2344ccc3\;
                        -- Clock cycles needed to complete this state (approximation): 27
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_310\ => 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.481\ := SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.480\ * \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperand1587b7d1f92df4bc6d9cc052aceb74de89ea81aae088961b0f5b83ac2344ccc3\, 64);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_311\;
                        -- Clock cycles needed to complete this state (approximation): 0.7638
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_311\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.482\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperand838dc20449138906a7f16bcd0cca3e401ab50dd9612c97ebb95583809f2e8b4d\ - \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.481\;
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num409\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.482\;
                        -- The following section was transformed from the .NET statement below:
                        -- long num410;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num410 = ((long)((long)((uint)input) & (long)(num21)));
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.483\ := signed(SmartResize((unsigned(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\)), 64)) and SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num21\), 64);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num410\ := ((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.483\));
                        -- The following section was transformed from the .NET statement below:
                        -- long num411;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num411 = ((long)((long)((uint)input) | (long)(num21)));
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.484\ := signed(SmartResize((unsigned(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\)), 64)) or SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num21\), 64);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num411\ := ((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.484\));
                        -- The following section was transformed from the .NET statement below:
                        -- long num412;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num412 = ((long)((long)((uint)input) ^ (long)(num21)));
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.485\ := signed(SmartResize((unsigned(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\)), 64)) xor SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num21\), 64);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num412\ := ((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.485\));
                        -- The following section was transformed from the .NET statement below:
                        -- uint num413;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num413 = (uint)(input << (int)num32);
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_312\;
                        -- Clock cycles needed to complete this state (approximation): 0.91
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_312\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.486\ := unsigned(shift_left(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\, to_integer(unsigned(SmartResize(signed(SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num32\, 32)), 5)))));
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num413\ := (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.486\);
                        -- The following section was transformed from the .NET statement below:
                        -- uint num414;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num414 = (uint)input >> (int)num32;
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_313\;
                        -- Clock cycles needed to complete this state (approximation): 0.5244
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_313\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.487\ := shift_right(unsigned(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\), to_integer(unsigned(SmartResize(signed(SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num32\, 32)), 5) and "11111")));
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num414\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.487\;
                        -- The following section was transformed from the .NET statement below:
                        -- uint num415;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num415 = (uint)((int)(input) + (int)(num32));
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.488\ := SmartResize(unsigned((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\) + signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num32\), 32))), 32);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num415\ := (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.488\);
                        -- The following section was transformed from the .NET statement below:
                        -- uint num416;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num416 = (uint)((int)(input) - (int)(num32));
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_314\;
                        -- Clock cycles needed to complete this state (approximation): 0.9774
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_314\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.489\ := unsigned((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\) - signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num32\), 32)));
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num416\ := (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.489\);
                        -- The following section was transformed from the .NET statement below:
                        -- uint num417;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num417 = (uint)((int)(input) * (int)(num32));
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.490\ := SmartResize(unsigned((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\) * signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num32\), 32))), 32);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num417\ := (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.490\);
                        -- The following section was transformed from the .NET statement below:
                        -- uint num418;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num418 = (uint)input / (uint)num32;
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_315\;
                        -- Clock cycles needed to complete this state (approximation): 0.7471
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_315\ => 
                        -- Waiting for the result to appear in \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.491\ (have to wait 9 clock cycles in this state).
                        -- The assignment needs to be kept up for multi-cycle operations for the result to actually appear in the target.
                        if (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.80\ >= to_signed(9, 32)) then 
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_316\;
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.80\ := to_signed(0, 32);
                        else 
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.80\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.80\ + to_signed(1, 32);
                        end if;
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.491\ := unsigned(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\) / SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num32\, 32);
                        -- Clock cycles needed to complete this state (approximation): 9
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_316\ => 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num418\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.491\;
                        -- The following section was transformed from the .NET statement below:
                        -- uint num419;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- uint remainderOperand53fc996822df2ca6c8221d7a30b00205ac201f3c5c0311b48f63e126ebd888da;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- remainderOperand53fc996822df2ca6c8221d7a30b00205ac201f3c5c0311b48f63e126ebd888da = (uint)input;
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperand53fc996822df2ca6c8221d7a30b00205ac201f3c5c0311b48f63e126ebd888da\ := unsigned(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\);
                        -- The following section was transformed from the .NET statement below:
                        -- uint remainderOperand232b174c22f225c10c6d077d3b9dc1cc6e686b5fcae8f20b6e2d621a016f82a4;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- remainderOperand232b174c22f225c10c6d077d3b9dc1cc6e686b5fcae8f20b6e2d621a016f82a4 = (uint)num32;
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperand232b174c22f225c10c6d077d3b9dc1cc6e686b5fcae8f20b6e2d621a016f82a4\ := SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num32\, 32);
                        -- The following section was transformed from the .NET statement below:
                        -- num419 = remainderOperand53fc996822df2ca6c8221d7a30b00205ac201f3c5c0311b48f63e126ebd888da - remainderOperand53fc996822df2ca6c8221d7a30b00205ac201f3c5c0311b48f63e126ebd888da / remainderOperand232b174c22f225c10c6d077d3b9dc1cc6e686b5fcae8f20b6e2d621a016f82a4 * remainderOperand232b174c22f225c10c6d077d3b9dc1cc6e686b5fcae8f20b6e2d621a016f82a4;
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_317\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_317\ => 
                        -- Waiting for the result to appear in \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.492\ (have to wait 9 clock cycles in this state).
                        -- The assignment needs to be kept up for multi-cycle operations for the result to actually appear in the target.
                        if (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.81\ >= to_signed(9, 32)) then 
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_318\;
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.81\ := to_signed(0, 32);
                        else 
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.81\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.81\ + to_signed(1, 32);
                        end if;
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.492\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperand53fc996822df2ca6c8221d7a30b00205ac201f3c5c0311b48f63e126ebd888da\ / \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperand232b174c22f225c10c6d077d3b9dc1cc6e686b5fcae8f20b6e2d621a016f82a4\;
                        -- Clock cycles needed to complete this state (approximation): 9
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_318\ => 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.493\ := SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.492\ * \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperand232b174c22f225c10c6d077d3b9dc1cc6e686b5fcae8f20b6e2d621a016f82a4\, 32);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.494\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperand53fc996822df2ca6c8221d7a30b00205ac201f3c5c0311b48f63e126ebd888da\ - \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.493\;
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num419\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.494\;
                        -- The following section was transformed from the .NET statement below:
                        -- uint num420;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num420 = (uint)((int)(input) & (int)(num32));
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.495\ := unsigned((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\) and signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num32\), 32)));
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num420\ := (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.495\);
                        -- The following section was transformed from the .NET statement below:
                        -- uint num421;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num421 = (uint)((int)(input) | (int)(num32));
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_319\;
                        -- Clock cycles needed to complete this state (approximation): 0.8857
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_319\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.496\ := unsigned((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\) or signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num32\), 32)));
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num421\ := (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.496\);
                        -- The following section was transformed from the .NET statement below:
                        -- uint num422;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num422 = (uint)((int)(input) ^ (int)(num32));
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.497\ := unsigned((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\) xor signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num32\), 32)));
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num422\ := (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.497\);
                        -- The following section was transformed from the .NET statement below:
                        -- uint num423;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num423 = (uint)(input << input);
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.498\ := unsigned(shift_left(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\, to_integer(unsigned(SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\, 5)))));
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num423\ := (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.498\);
                        -- The following section was transformed from the .NET statement below:
                        -- uint num424;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num424 = (uint)input >> input;
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_320\;
                        -- Clock cycles needed to complete this state (approximation): 0.8016
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_320\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.499\ := shift_right(unsigned(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\), to_integer(unsigned(SmartResize(unsigned(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\), 5) and "11111")));
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num424\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.499\;
                        -- The following section was transformed from the .NET statement below:
                        -- long num425;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num425 = (long)((long)((uint)input) + (long)(input));
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_321\;
                        -- Clock cycles needed to complete this state (approximation): 0.6511
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_321\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.500\ := SmartResize(signed(SmartResize((unsigned(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\)), 64)) + SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\), 64), 64);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num425\ := (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.500\);
                        -- The following section was transformed from the .NET statement below:
                        -- long num426;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num426 = (long)((long)((uint)input) - (long)(input));
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.501\ := signed(SmartResize((unsigned(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\)), 64)) - SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\), 64);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num426\ := (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.501\);
                        -- The following section was transformed from the .NET statement below:
                        -- long num427;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num427 = (long)((long)((uint)input) * (long)(input));
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_322\;
                        -- Clock cycles needed to complete this state (approximation): 0.7796
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_322\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.502\ := SmartResize(signed(SmartResize((unsigned(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\)), 64)) * SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\), 64), 64);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num427\ := (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.502\);
                        -- The following section was transformed from the .NET statement below:
                        -- long num428;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num428 = (long)(uint)input / (long)input;
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_323\;
                        -- Clock cycles needed to complete this state (approximation): 0.7638
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_323\ => 
                        -- Waiting for the result to appear in \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.503\ (have to wait 27 clock cycles in this state).
                        -- The assignment needs to be kept up for multi-cycle operations for the result to actually appear in the target.
                        if (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.82\ >= to_signed(27, 32)) then 
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_324\;
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.82\ := to_signed(0, 32);
                        else 
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.82\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.82\ + to_signed(1, 32);
                        end if;
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.503\ := signed(SmartResize(unsigned(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\), 64)) / SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\, 64);
                        -- Clock cycles needed to complete this state (approximation): 27
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_324\ => 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num428\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.503\;
                        -- The following section was transformed from the .NET statement below:
                        -- long num429;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- long remainderOperand838dc20449138906a7f16bcd0cca3e401ab50dd9612c97ebb95583809f2e8b4d;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- remainderOperand838dc20449138906a7f16bcd0cca3e401ab50dd9612c97ebb95583809f2e8b4d = (long)(uint)input;
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperand838dc20449138906a7f16bcd0cca3e401ab50dd9612c97ebb95583809f2e8b4d\ := signed(SmartResize(unsigned(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\), 64));
                        -- The following section was transformed from the .NET statement below:
                        -- long remainderOperanddae5fcb165e7e861d625046bd776828c666cfb77620adc781e7130255f7b6e2f;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- remainderOperanddae5fcb165e7e861d625046bd776828c666cfb77620adc781e7130255f7b6e2f = (long)input;
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperanddae5fcb165e7e861d625046bd776828c666cfb77620adc781e7130255f7b6e2f\ := SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\, 64);
                        -- The following section was transformed from the .NET statement below:
                        -- num429 = remainderOperand838dc20449138906a7f16bcd0cca3e401ab50dd9612c97ebb95583809f2e8b4d - remainderOperand838dc20449138906a7f16bcd0cca3e401ab50dd9612c97ebb95583809f2e8b4d / remainderOperanddae5fcb165e7e861d625046bd776828c666cfb77620adc781e7130255f7b6e2f * remainderOperanddae5fcb165e7e861d625046bd776828c666cfb77620adc781e7130255f7b6e2f;
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_325\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_325\ => 
                        -- Waiting for the result to appear in \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.504\ (have to wait 27 clock cycles in this state).
                        -- The assignment needs to be kept up for multi-cycle operations for the result to actually appear in the target.
                        if (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.83\ >= to_signed(27, 32)) then 
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_326\;
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.83\ := to_signed(0, 32);
                        else 
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.83\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.83\ + to_signed(1, 32);
                        end if;
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.504\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperand838dc20449138906a7f16bcd0cca3e401ab50dd9612c97ebb95583809f2e8b4d\ / \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperanddae5fcb165e7e861d625046bd776828c666cfb77620adc781e7130255f7b6e2f\;
                        -- Clock cycles needed to complete this state (approximation): 27
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_326\ => 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.505\ := SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.504\ * \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperanddae5fcb165e7e861d625046bd776828c666cfb77620adc781e7130255f7b6e2f\, 64);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_327\;
                        -- Clock cycles needed to complete this state (approximation): 0.7638
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_327\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.506\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperand838dc20449138906a7f16bcd0cca3e401ab50dd9612c97ebb95583809f2e8b4d\ - \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.505\;
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num429\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.506\;
                        -- The following section was transformed from the .NET statement below:
                        -- long num430;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num430 = ((long)((long)((uint)input) & (long)(input)));
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.507\ := signed(SmartResize((unsigned(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\)), 64)) and SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\), 64);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num430\ := ((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.507\));
                        -- The following section was transformed from the .NET statement below:
                        -- long num431;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num431 = ((long)((long)((uint)input) | (long)(input)));
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.508\ := signed(SmartResize((unsigned(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\)), 64)) or SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\), 64);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num431\ := ((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.508\));
                        -- The following section was transformed from the .NET statement below:
                        -- long num432;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num432 = ((long)((long)((uint)input) ^ (long)(input)));
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.509\ := signed(SmartResize((unsigned(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\)), 64)) xor SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\), 64);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num432\ := ((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.509\));
                        -- The following section was transformed from the .NET statement below:
                        -- uint num433;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num433 = (uint)(input << input);
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_328\;
                        -- Clock cycles needed to complete this state (approximation): 0.91
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_328\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.510\ := unsigned(shift_left(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\, to_integer(unsigned(SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\, 5)))));
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num433\ := (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.510\);
                        -- The following section was transformed from the .NET statement below:
                        -- uint num434;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num434 = (uint)input >> input;
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_329\;
                        -- Clock cycles needed to complete this state (approximation): 0.5244
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_329\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.511\ := shift_right(unsigned(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\), to_integer(unsigned(SmartResize(unsigned(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\), 5) and "11111")));
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num434\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.511\;
                        -- The following section was transformed from the .NET statement below:
                        -- uint num435;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num435 = (uint)(input + input);
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.512\ := SmartResize(unsigned(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\ + \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\), 32);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num435\ := (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.512\);
                        -- The following section was transformed from the .NET statement below:
                        -- uint num436;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num436 = (uint)(input - input);
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_330\;
                        -- Clock cycles needed to complete this state (approximation): 0.9774
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_330\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.513\ := unsigned(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\ - \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num436\ := (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.513\);
                        -- The following section was transformed from the .NET statement below:
                        -- uint num437;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num437 = (uint)(input * input);
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.514\ := SmartResize(unsigned(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\ * \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\), 32);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num437\ := (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.514\);
                        -- The following section was transformed from the .NET statement below:
                        -- uint num438;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num438 = (uint)input / (uint)input;
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_331\;
                        -- Clock cycles needed to complete this state (approximation): 0.7471
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_331\ => 
                        -- Waiting for the result to appear in \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.515\ (have to wait 9 clock cycles in this state).
                        -- The assignment needs to be kept up for multi-cycle operations for the result to actually appear in the target.
                        if (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.84\ >= to_signed(9, 32)) then 
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_332\;
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.84\ := to_signed(0, 32);
                        else 
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.84\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.84\ + to_signed(1, 32);
                        end if;
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.515\ := unsigned(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\) / unsigned(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\);
                        -- Clock cycles needed to complete this state (approximation): 9
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_332\ => 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num438\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.515\;
                        -- The following section was transformed from the .NET statement below:
                        -- uint num439;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- uint remainderOperand53fc996822df2ca6c8221d7a30b00205ac201f3c5c0311b48f63e126ebd888da;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- remainderOperand53fc996822df2ca6c8221d7a30b00205ac201f3c5c0311b48f63e126ebd888da = (uint)input;
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperand53fc996822df2ca6c8221d7a30b00205ac201f3c5c0311b48f63e126ebd888da\ := unsigned(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\);
                        -- The following section was transformed from the .NET statement below:
                        -- uint remainderOperand53fc996822df2ca6c8221d7a30b00205ac201f3c5c0311b48f63e126ebd888da;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- remainderOperand53fc996822df2ca6c8221d7a30b00205ac201f3c5c0311b48f63e126ebd888da = (uint)input;
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperand53fc996822df2ca6c8221d7a30b00205ac201f3c5c0311b48f63e126ebd888da\ := unsigned(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\);
                        -- The following section was transformed from the .NET statement below:
                        -- num439 = remainderOperand53fc996822df2ca6c8221d7a30b00205ac201f3c5c0311b48f63e126ebd888da - remainderOperand53fc996822df2ca6c8221d7a30b00205ac201f3c5c0311b48f63e126ebd888da / remainderOperand53fc996822df2ca6c8221d7a30b00205ac201f3c5c0311b48f63e126ebd888da * remainderOperand53fc996822df2ca6c8221d7a30b00205ac201f3c5c0311b48f63e126ebd888da;
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_333\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_333\ => 
                        -- Waiting for the result to appear in \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.516\ (have to wait 9 clock cycles in this state).
                        -- The assignment needs to be kept up for multi-cycle operations for the result to actually appear in the target.
                        if (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.85\ >= to_signed(9, 32)) then 
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_334\;
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.85\ := to_signed(0, 32);
                        else 
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.85\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.85\ + to_signed(1, 32);
                        end if;
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.516\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperand53fc996822df2ca6c8221d7a30b00205ac201f3c5c0311b48f63e126ebd888da\ / \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperand53fc996822df2ca6c8221d7a30b00205ac201f3c5c0311b48f63e126ebd888da\;
                        -- Clock cycles needed to complete this state (approximation): 9
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_334\ => 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.517\ := SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.516\ * \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperand53fc996822df2ca6c8221d7a30b00205ac201f3c5c0311b48f63e126ebd888da\, 32);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.518\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperand53fc996822df2ca6c8221d7a30b00205ac201f3c5c0311b48f63e126ebd888da\ - \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.517\;
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num439\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.518\;
                        -- The following section was transformed from the .NET statement below:
                        -- uint num440;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num440 = (uint)(input & input);
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.519\ := unsigned(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\ and \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num440\ := (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.519\);
                        -- The following section was transformed from the .NET statement below:
                        -- uint num441;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num441 = (uint)(input | input);
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_335\;
                        -- Clock cycles needed to complete this state (approximation): 0.8857
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_335\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.520\ := unsigned(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\ or \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num441\ := (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.520\);
                        -- The following section was transformed from the .NET statement below:
                        -- uint num442;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num442 = (uint)(input ^ input);
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.521\ := unsigned(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\ xor \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num442\ := (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.521\);
                        -- The following section was transformed from the .NET statement below:
                        -- uint num443;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num443 = (uint)(input << (int)num63);
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.522\ := unsigned(shift_left(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\, to_integer(unsigned(SmartResize(SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num63\, 32), 5)))));
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num443\ := (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.522\);
                        -- The following section was transformed from the .NET statement below:
                        -- uint num444;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num444 = (uint)input >> (int)num63;
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_336\;
                        -- Clock cycles needed to complete this state (approximation): 0.8016
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_336\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.523\ := shift_right(unsigned(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\), to_integer(unsigned(SmartResize(SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num63\, 32), 5) and "11111")));
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num444\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.523\;
                        -- The following section was transformed from the .NET statement below:
                        -- long num445;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num445 = (long)((long)((uint)input) + num63);
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_337\;
                        -- Clock cycles needed to complete this state (approximation): 0.6511
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_337\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.524\ := signed(SmartResize((unsigned(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\)), 64)) + \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num63\;
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num445\ := (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.524\);
                        -- The following section was transformed from the .NET statement below:
                        -- long num446;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num446 = (long)((long)((uint)input) - num63);
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.525\ := signed(SmartResize((unsigned(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\)), 64)) - \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num63\;
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num446\ := (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.525\);
                        -- The following section was transformed from the .NET statement below:
                        -- long num447;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num447 = (long)((long)((uint)input) * num63);
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_338\;
                        -- Clock cycles needed to complete this state (approximation): 0.7796
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_338\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.526\ := SmartResize(signed(SmartResize((unsigned(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\)), 64)) * \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num63\, 64);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num447\ := (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.526\);
                        -- The following section was transformed from the .NET statement below:
                        -- long num448;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num448 = (long)(uint)input / num63;
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_339\;
                        -- Clock cycles needed to complete this state (approximation): 0.7638
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_339\ => 
                        -- Waiting for the result to appear in \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.527\ (have to wait 27 clock cycles in this state).
                        -- The assignment needs to be kept up for multi-cycle operations for the result to actually appear in the target.
                        if (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.86\ >= to_signed(27, 32)) then 
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_340\;
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.86\ := to_signed(0, 32);
                        else 
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.86\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.86\ + to_signed(1, 32);
                        end if;
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.527\ := signed(SmartResize(unsigned(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\), 64)) / \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num63\;
                        -- Clock cycles needed to complete this state (approximation): 27
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_340\ => 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num448\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.527\;
                        -- The following section was transformed from the .NET statement below:
                        -- long num449;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- long remainderOperand838dc20449138906a7f16bcd0cca3e401ab50dd9612c97ebb95583809f2e8b4d;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- remainderOperand838dc20449138906a7f16bcd0cca3e401ab50dd9612c97ebb95583809f2e8b4d = (long)(uint)input;
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperand838dc20449138906a7f16bcd0cca3e401ab50dd9612c97ebb95583809f2e8b4d\ := signed(SmartResize(unsigned(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\), 64));
                        -- The following section was transformed from the .NET statement below:
                        -- num449 = remainderOperand838dc20449138906a7f16bcd0cca3e401ab50dd9612c97ebb95583809f2e8b4d - remainderOperand838dc20449138906a7f16bcd0cca3e401ab50dd9612c97ebb95583809f2e8b4d / num63 * num63;
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_341\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_341\ => 
                        -- Waiting for the result to appear in \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.528\ (have to wait 27 clock cycles in this state).
                        -- The assignment needs to be kept up for multi-cycle operations for the result to actually appear in the target.
                        if (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.87\ >= to_signed(27, 32)) then 
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_342\;
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.87\ := to_signed(0, 32);
                        else 
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.87\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.87\ + to_signed(1, 32);
                        end if;
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.528\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperand838dc20449138906a7f16bcd0cca3e401ab50dd9612c97ebb95583809f2e8b4d\ / \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num63\;
                        -- Clock cycles needed to complete this state (approximation): 27
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_342\ => 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.529\ := SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.528\ * \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num63\, 64);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_343\;
                        -- Clock cycles needed to complete this state (approximation): 0.7638
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_343\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.530\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperand838dc20449138906a7f16bcd0cca3e401ab50dd9612c97ebb95583809f2e8b4d\ - \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.529\;
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num449\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.530\;
                        -- The following section was transformed from the .NET statement below:
                        -- long num450;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num450 = ((long)((long)((uint)input) & num63));
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.531\ := signed(SmartResize((unsigned(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\)), 64)) and \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num63\;
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num450\ := ((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.531\));
                        -- The following section was transformed from the .NET statement below:
                        -- long num451;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num451 = ((long)((long)((uint)input) | num63));
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.532\ := signed(SmartResize((unsigned(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\)), 64)) or \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num63\;
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num451\ := ((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.532\));
                        -- The following section was transformed from the .NET statement below:
                        -- long num452;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num452 = ((long)((long)((uint)input) ^ num63));
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.533\ := signed(SmartResize((unsigned(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\)), 64)) xor \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num63\;
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num452\ := ((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.533\));
                        -- The following section was transformed from the .NET statement below:
                        -- uint num453;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num453 = (uint)(input << (int)num74);
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_344\;
                        -- Clock cycles needed to complete this state (approximation): 0.91
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_344\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.534\ := unsigned(shift_left(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\, to_integer(unsigned(SmartResize(signed(SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num74\, 32)), 5)))));
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num453\ := (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.534\);
                        -- The following section was transformed from the .NET statement below:
                        -- uint num454;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num454 = (uint)input >> (int)num74;
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_345\;
                        -- Clock cycles needed to complete this state (approximation): 0.5244
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_345\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.535\ := shift_right(unsigned(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\), to_integer(unsigned(SmartResize(signed(SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num74\, 32)), 5) and "11111")));
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num454\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.535\;
                        -- The following section was transformed from the .NET statement below:
                        -- ulong num455;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num455 = (ulong)((ulong)((uint)input) + num74);
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_346\;
                        -- Clock cycles needed to complete this state (approximation): 0.6511
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_346\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.536\ := SmartResize((unsigned(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\)), 64) + \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num74\;
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num455\ := (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.536\);
                        -- The following section was transformed from the .NET statement below:
                        -- ulong num456;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num456 = (ulong)((ulong)((uint)input) - num74);
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.537\ := SmartResize((unsigned(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\)), 64) - \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num74\;
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num456\ := (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.537\);
                        -- The following section was transformed from the .NET statement below:
                        -- ulong num457;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num457 = (ulong)((ulong)((uint)input) * num74);
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_347\;
                        -- Clock cycles needed to complete this state (approximation): 0.7796
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_347\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.538\ := SmartResize(SmartResize((unsigned(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\)), 64) * \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num74\, 64);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num457\ := (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.538\);
                        -- The following section was transformed from the .NET statement below:
                        -- ulong num458;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num458 = (ulong)((ulong)((uint)input) / num74);
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_348\;
                        -- Clock cycles needed to complete this state (approximation): 0.7638
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_348\ => 
                        -- Waiting for the result to appear in \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.539\ (have to wait 26 clock cycles in this state).
                        -- The assignment needs to be kept up for multi-cycle operations for the result to actually appear in the target.
                        if (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.88\ >= to_signed(26, 32)) then 
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_349\;
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.88\ := to_signed(0, 32);
                        else 
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.88\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.88\ + to_signed(1, 32);
                        end if;
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.539\ := SmartResize((unsigned(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\)), 64) / \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num74\;
                        -- Clock cycles needed to complete this state (approximation): 26
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_349\ => 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num458\ := (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.539\);
                        -- The following section was transformed from the .NET statement below:
                        -- ulong num459;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- ulong remainderOperande025c253aa170f0ff3164efe3aeca6fef8214365534775fffe1d555e2bcc3eb9;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- remainderOperande025c253aa170f0ff3164efe3aeca6fef8214365534775fffe1d555e2bcc3eb9 = (ulong)((uint)input);
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperande025c253aa170f0ff3164efe3aeca6fef8214365534775fffe1d555e2bcc3eb9\ := SmartResize((unsigned(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\)), 64);
                        -- The following section was transformed from the .NET statement below:
                        -- num459 = (ulong)(remainderOperande025c253aa170f0ff3164efe3aeca6fef8214365534775fffe1d555e2bcc3eb9 - remainderOperande025c253aa170f0ff3164efe3aeca6fef8214365534775fffe1d555e2bcc3eb9 / num74 * num74);
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_350\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_350\ => 
                        -- Waiting for the result to appear in \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.540\ (have to wait 26 clock cycles in this state).
                        -- The assignment needs to be kept up for multi-cycle operations for the result to actually appear in the target.
                        if (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.89\ >= to_signed(26, 32)) then 
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_351\;
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.89\ := to_signed(0, 32);
                        else 
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.89\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.89\ + to_signed(1, 32);
                        end if;
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.540\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperande025c253aa170f0ff3164efe3aeca6fef8214365534775fffe1d555e2bcc3eb9\ / \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num74\;
                        -- Clock cycles needed to complete this state (approximation): 26
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_351\ => 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.541\ := SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.540\ * \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num74\, 64);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_352\;
                        -- Clock cycles needed to complete this state (approximation): 0.7638
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_352\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.542\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperande025c253aa170f0ff3164efe3aeca6fef8214365534775fffe1d555e2bcc3eb9\ - \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.541\;
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num459\ := (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.542\);
                        -- The following section was transformed from the .NET statement below:
                        -- ulong num460;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num460 = ((ulong)((ulong)((uint)input) & num74));
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.543\ := SmartResize((unsigned(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\)), 64) and \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num74\;
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num460\ := ((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.543\));
                        -- The following section was transformed from the .NET statement below:
                        -- ulong num461;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num461 = ((ulong)((ulong)((uint)input) | num74));
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.544\ := SmartResize((unsigned(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\)), 64) or \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num74\;
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num461\ := ((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.544\));
                        -- The following section was transformed from the .NET statement below:
                        -- ulong num462;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num462 = ((ulong)((ulong)((uint)input) ^ num74));
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.545\ := SmartResize((unsigned(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\)), 64) xor \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num74\;
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num462\ := ((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.545\));
                        -- The following section was transformed from the .NET statement below:
                        -- long num463;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num463 = input;
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num463\ := SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\, 64);
                        -- The following section was transformed from the .NET statement below:
                        -- long num464;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num464 = num463 << (int)b2;
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_353\;
                        -- Clock cycles needed to complete this state (approximation): 0.91
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_353\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.546\ := SmartResize(shift_left(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num463\, to_integer(unsigned(SmartResize(signed(SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b2\, 32)), 6)))), 64);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num464\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.546\;
                        -- The following section was transformed from the .NET statement below:
                        -- long num465;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num465 = num463 >> (int)b2;
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_354\;
                        -- Clock cycles needed to complete this state (approximation): 0.56
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_354\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.547\ := SmartResize(shift_right(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num463\, to_integer(unsigned(SmartResize(signed(SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b2\, 32)), 6) and "111111"))), 64);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num465\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.547\;
                        -- The following section was transformed from the .NET statement below:
                        -- long num466;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num466 = (long)(num463 + (long)(b2));
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_355\;
                        -- Clock cycles needed to complete this state (approximation): 0.7411
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_355\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.548\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num463\ + signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b2\), 64));
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num466\ := (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.548\);
                        -- The following section was transformed from the .NET statement below:
                        -- long num467;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num467 = (long)(num463 - (long)(b2));
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.549\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num463\ - signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b2\), 64));
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num467\ := (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.549\);
                        -- The following section was transformed from the .NET statement below:
                        -- long num468;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num468 = (long)(num463 * (long)(b2));
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_356\;
                        -- Clock cycles needed to complete this state (approximation): 0.7796
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_356\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.550\ := SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num463\ * signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b2\), 64)), 64);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num468\ := (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.550\);
                        -- The following section was transformed from the .NET statement below:
                        -- long num469;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num469 = num463 / (long)b2;
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_357\;
                        -- Clock cycles needed to complete this state (approximation): 0.7638
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_357\ => 
                        -- Waiting for the result to appear in \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.551\ (have to wait 27 clock cycles in this state).
                        -- The assignment needs to be kept up for multi-cycle operations for the result to actually appear in the target.
                        if (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.90\ >= to_signed(27, 32)) then 
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_358\;
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.90\ := to_signed(0, 32);
                        else 
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.90\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.90\ + to_signed(1, 32);
                        end if;
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.551\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num463\ / signed(SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b2\, 64));
                        -- Clock cycles needed to complete this state (approximation): 27
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_358\ => 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num469\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.551\;
                        -- The following section was transformed from the .NET statement below:
                        -- long num470;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- long remainderOperandb6423718107955c2ecf45b7e5d988ed436e150a113e441457863975c450572ce;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- remainderOperandb6423718107955c2ecf45b7e5d988ed436e150a113e441457863975c450572ce = (long)b2;
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperandb6423718107955c2ecf45b7e5d988ed436e150a113e441457863975c450572ce\ := signed(SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b2\, 64));
                        -- The following section was transformed from the .NET statement below:
                        -- num470 = num463 - num463 / remainderOperandb6423718107955c2ecf45b7e5d988ed436e150a113e441457863975c450572ce * remainderOperandb6423718107955c2ecf45b7e5d988ed436e150a113e441457863975c450572ce;
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_359\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_359\ => 
                        -- Waiting for the result to appear in \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.552\ (have to wait 27 clock cycles in this state).
                        -- The assignment needs to be kept up for multi-cycle operations for the result to actually appear in the target.
                        if (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.91\ >= to_signed(27, 32)) then 
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_360\;
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.91\ := to_signed(0, 32);
                        else 
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.91\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.91\ + to_signed(1, 32);
                        end if;
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.552\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num463\ / \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperandb6423718107955c2ecf45b7e5d988ed436e150a113e441457863975c450572ce\;
                        -- Clock cycles needed to complete this state (approximation): 27
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_360\ => 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.553\ := SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.552\ * \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperandb6423718107955c2ecf45b7e5d988ed436e150a113e441457863975c450572ce\, 64);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_361\;
                        -- Clock cycles needed to complete this state (approximation): 0.7638
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_361\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.554\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num463\ - \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.553\;
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num470\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.554\;
                        -- The following section was transformed from the .NET statement below:
                        -- long num471;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num471 = ((long)(num463 & (long)(b2)));
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.555\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num463\ and signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b2\), 64));
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num471\ := ((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.555\));
                        -- The following section was transformed from the .NET statement below:
                        -- long num472;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num472 = ((long)(num463 | (long)(b2)));
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.556\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num463\ or signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b2\), 64));
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num472\ := ((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.556\));
                        -- The following section was transformed from the .NET statement below:
                        -- long num473;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num473 = ((long)(num463 ^ (long)(b2)));
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.557\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num463\ xor signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b2\), 64));
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num473\ := ((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.557\));
                        -- The following section was transformed from the .NET statement below:
                        -- long num474;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num474 = num463 << (int)b3;
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_362\;
                        -- Clock cycles needed to complete this state (approximation): 0.91
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_362\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.558\ := SmartResize(shift_left(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num463\, to_integer(unsigned(SmartResize(SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b3\, 32), 6)))), 64);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num474\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.558\;
                        -- The following section was transformed from the .NET statement below:
                        -- long num475;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num475 = num463 >> (int)b3;
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_363\;
                        -- Clock cycles needed to complete this state (approximation): 0.56
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_363\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.559\ := SmartResize(shift_right(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num463\, to_integer(unsigned(SmartResize(SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b3\, 32), 6) and "111111"))), 64);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num475\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.559\;
                        -- The following section was transformed from the .NET statement below:
                        -- long num476;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num476 = (long)(num463 + (long)(b3));
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_364\;
                        -- Clock cycles needed to complete this state (approximation): 0.7411
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_364\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.560\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num463\ + SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b3\), 64);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num476\ := (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.560\);
                        -- The following section was transformed from the .NET statement below:
                        -- long num477;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num477 = (long)(num463 - (long)(b3));
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.561\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num463\ - SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b3\), 64);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num477\ := (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.561\);
                        -- The following section was transformed from the .NET statement below:
                        -- long num478;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num478 = (long)(num463 * (long)(b3));
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_365\;
                        -- Clock cycles needed to complete this state (approximation): 0.7796
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_365\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.562\ := SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num463\ * SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b3\), 64), 64);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num478\ := (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.562\);
                        -- The following section was transformed from the .NET statement below:
                        -- long num479;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num479 = (long)(num463 / (long)(b3));
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_366\;
                        -- Clock cycles needed to complete this state (approximation): 0.7638
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_366\ => 
                        -- Waiting for the result to appear in \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.563\ (have to wait 27 clock cycles in this state).
                        -- The assignment needs to be kept up for multi-cycle operations for the result to actually appear in the target.
                        if (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.92\ >= to_signed(27, 32)) then 
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_367\;
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.92\ := to_signed(0, 32);
                        else 
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.92\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.92\ + to_signed(1, 32);
                        end if;
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.563\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num463\ / SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b3\), 64);
                        -- Clock cycles needed to complete this state (approximation): 27
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_367\ => 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num479\ := (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.563\);
                        -- The following section was transformed from the .NET statement below:
                        -- long num480;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- long remainderOperand1346e3fa7e3fef52080fc3f08a5ff36da6ab3a15eadde4d8269b43c5e4ddcb1c;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- remainderOperand1346e3fa7e3fef52080fc3f08a5ff36da6ab3a15eadde4d8269b43c5e4ddcb1c = (long)(b3);
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperand1346e3fa7e3fef52080fc3f08a5ff36da6ab3a15eadde4d8269b43c5e4ddcb1c\ := SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b3\), 64);
                        -- The following section was transformed from the .NET statement below:
                        -- num480 = (long)(num463 - num463 / remainderOperand1346e3fa7e3fef52080fc3f08a5ff36da6ab3a15eadde4d8269b43c5e4ddcb1c * remainderOperand1346e3fa7e3fef52080fc3f08a5ff36da6ab3a15eadde4d8269b43c5e4ddcb1c);
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_368\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_368\ => 
                        -- Waiting for the result to appear in \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.564\ (have to wait 27 clock cycles in this state).
                        -- The assignment needs to be kept up for multi-cycle operations for the result to actually appear in the target.
                        if (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.93\ >= to_signed(27, 32)) then 
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_369\;
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.93\ := to_signed(0, 32);
                        else 
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.93\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.93\ + to_signed(1, 32);
                        end if;
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.564\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num463\ / \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperand1346e3fa7e3fef52080fc3f08a5ff36da6ab3a15eadde4d8269b43c5e4ddcb1c\;
                        -- Clock cycles needed to complete this state (approximation): 27
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_369\ => 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.565\ := SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.564\ * \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperand1346e3fa7e3fef52080fc3f08a5ff36da6ab3a15eadde4d8269b43c5e4ddcb1c\, 64);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_370\;
                        -- Clock cycles needed to complete this state (approximation): 0.7638
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_370\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.566\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num463\ - \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.565\;
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num480\ := (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.566\);
                        -- The following section was transformed from the .NET statement below:
                        -- long num481;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num481 = ((long)(num463 & (long)(b3)));
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.567\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num463\ and SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b3\), 64);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num481\ := ((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.567\));
                        -- The following section was transformed from the .NET statement below:
                        -- long num482;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num482 = ((long)(num463 | (long)(b3)));
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.568\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num463\ or SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b3\), 64);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num482\ := ((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.568\));
                        -- The following section was transformed from the .NET statement below:
                        -- long num483;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num483 = ((long)(num463 ^ (long)(b3)));
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.569\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num463\ xor SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b3\), 64);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num483\ := ((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.569\));
                        -- The following section was transformed from the .NET statement below:
                        -- long num484;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num484 = num463 << (int)num21;
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_371\;
                        -- Clock cycles needed to complete this state (approximation): 0.91
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_371\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.570\ := SmartResize(shift_left(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num463\, to_integer(unsigned(SmartResize(SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num21\, 32), 6)))), 64);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num484\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.570\;
                        -- The following section was transformed from the .NET statement below:
                        -- long num485;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num485 = num463 >> (int)num21;
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_372\;
                        -- Clock cycles needed to complete this state (approximation): 0.56
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_372\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.571\ := SmartResize(shift_right(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num463\, to_integer(unsigned(SmartResize(SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num21\, 32), 6) and "111111"))), 64);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num485\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.571\;
                        -- The following section was transformed from the .NET statement below:
                        -- long num486;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num486 = (long)(num463 + (long)(num21));
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_373\;
                        -- Clock cycles needed to complete this state (approximation): 0.7411
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_373\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.572\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num463\ + SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num21\), 64);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num486\ := (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.572\);
                        -- The following section was transformed from the .NET statement below:
                        -- long num487;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num487 = (long)(num463 - (long)(num21));
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.573\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num463\ - SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num21\), 64);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num487\ := (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.573\);
                        -- The following section was transformed from the .NET statement below:
                        -- long num488;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num488 = (long)(num463 * (long)(num21));
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_374\;
                        -- Clock cycles needed to complete this state (approximation): 0.7796
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_374\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.574\ := SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num463\ * SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num21\), 64), 64);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num488\ := (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.574\);
                        -- The following section was transformed from the .NET statement below:
                        -- long num489;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num489 = (long)(num463 / (long)(num21));
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_375\;
                        -- Clock cycles needed to complete this state (approximation): 0.7638
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_375\ => 
                        -- Waiting for the result to appear in \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.575\ (have to wait 27 clock cycles in this state).
                        -- The assignment needs to be kept up for multi-cycle operations for the result to actually appear in the target.
                        if (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.94\ >= to_signed(27, 32)) then 
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_376\;
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.94\ := to_signed(0, 32);
                        else 
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.94\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.94\ + to_signed(1, 32);
                        end if;
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.575\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num463\ / SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num21\), 64);
                        -- Clock cycles needed to complete this state (approximation): 27
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_376\ => 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num489\ := (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.575\);
                        -- The following section was transformed from the .NET statement below:
                        -- long num490;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- long remainderOperand39f189a5a6fd49d5a3f6bd80d1ceee60bf027f1d81c8a0b1eafffc7901b654ad;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- remainderOperand39f189a5a6fd49d5a3f6bd80d1ceee60bf027f1d81c8a0b1eafffc7901b654ad = (long)(num21);
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperand39f189a5a6fd49d5a3f6bd80d1ceee60bf027f1d81c8a0b1eafffc7901b654ad\ := SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num21\), 64);
                        -- The following section was transformed from the .NET statement below:
                        -- num490 = (long)(num463 - num463 / remainderOperand39f189a5a6fd49d5a3f6bd80d1ceee60bf027f1d81c8a0b1eafffc7901b654ad * remainderOperand39f189a5a6fd49d5a3f6bd80d1ceee60bf027f1d81c8a0b1eafffc7901b654ad);
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_377\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_377\ => 
                        -- Waiting for the result to appear in \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.576\ (have to wait 27 clock cycles in this state).
                        -- The assignment needs to be kept up for multi-cycle operations for the result to actually appear in the target.
                        if (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.95\ >= to_signed(27, 32)) then 
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_378\;
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.95\ := to_signed(0, 32);
                        else 
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.95\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.95\ + to_signed(1, 32);
                        end if;
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.576\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num463\ / \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperand39f189a5a6fd49d5a3f6bd80d1ceee60bf027f1d81c8a0b1eafffc7901b654ad\;
                        -- Clock cycles needed to complete this state (approximation): 27
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_378\ => 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.577\ := SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.576\ * \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperand39f189a5a6fd49d5a3f6bd80d1ceee60bf027f1d81c8a0b1eafffc7901b654ad\, 64);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_379\;
                        -- Clock cycles needed to complete this state (approximation): 0.7638
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_379\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.578\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num463\ - \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.577\;
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num490\ := (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.578\);
                        -- The following section was transformed from the .NET statement below:
                        -- long num491;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num491 = ((long)(num463 & (long)(num21)));
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.579\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num463\ and SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num21\), 64);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num491\ := ((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.579\));
                        -- The following section was transformed from the .NET statement below:
                        -- long num492;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num492 = ((long)(num463 | (long)(num21)));
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.580\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num463\ or SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num21\), 64);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num492\ := ((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.580\));
                        -- The following section was transformed from the .NET statement below:
                        -- long num493;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num493 = ((long)(num463 ^ (long)(num21)));
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.581\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num463\ xor SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num21\), 64);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num493\ := ((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.581\));
                        -- The following section was transformed from the .NET statement below:
                        -- long num494;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num494 = num463 << (int)num32;
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_380\;
                        -- Clock cycles needed to complete this state (approximation): 0.91
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_380\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.582\ := SmartResize(shift_left(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num463\, to_integer(unsigned(SmartResize(signed(SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num32\, 32)), 6)))), 64);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num494\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.582\;
                        -- The following section was transformed from the .NET statement below:
                        -- long num495;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num495 = num463 >> (int)num32;
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_381\;
                        -- Clock cycles needed to complete this state (approximation): 0.56
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_381\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.583\ := SmartResize(shift_right(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num463\, to_integer(unsigned(SmartResize(signed(SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num32\, 32)), 6) and "111111"))), 64);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num495\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.583\;
                        -- The following section was transformed from the .NET statement below:
                        -- long num496;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num496 = (long)(num463 + (long)(num32));
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_382\;
                        -- Clock cycles needed to complete this state (approximation): 0.7411
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_382\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.584\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num463\ + signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num32\), 64));
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num496\ := (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.584\);
                        -- The following section was transformed from the .NET statement below:
                        -- long num497;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num497 = (long)(num463 - (long)(num32));
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.585\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num463\ - signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num32\), 64));
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num497\ := (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.585\);
                        -- The following section was transformed from the .NET statement below:
                        -- long num498;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num498 = (long)(num463 * (long)(num32));
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_383\;
                        -- Clock cycles needed to complete this state (approximation): 0.7796
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_383\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.586\ := SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num463\ * signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num32\), 64)), 64);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num498\ := (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.586\);
                        -- The following section was transformed from the .NET statement below:
                        -- long num499;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num499 = num463 / (long)num32;
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_384\;
                        -- Clock cycles needed to complete this state (approximation): 0.7638
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_384\ => 
                        -- Waiting for the result to appear in \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.587\ (have to wait 27 clock cycles in this state).
                        -- The assignment needs to be kept up for multi-cycle operations for the result to actually appear in the target.
                        if (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.96\ >= to_signed(27, 32)) then 
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_385\;
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.96\ := to_signed(0, 32);
                        else 
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.96\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.96\ + to_signed(1, 32);
                        end if;
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.587\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num463\ / signed(SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num32\, 64));
                        -- Clock cycles needed to complete this state (approximation): 27
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_385\ => 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num499\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.587\;
                        -- The following section was transformed from the .NET statement below:
                        -- long num500;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- long remainderOperande75b4bacd4211a21f9776359dfc373b08cfbd7b6164b8b1e2d68af31c1f9117d;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- remainderOperande75b4bacd4211a21f9776359dfc373b08cfbd7b6164b8b1e2d68af31c1f9117d = (long)num32;
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperande75b4bacd4211a21f9776359dfc373b08cfbd7b6164b8b1e2d68af31c1f9117d\ := signed(SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num32\, 64));
                        -- The following section was transformed from the .NET statement below:
                        -- num500 = num463 - num463 / remainderOperande75b4bacd4211a21f9776359dfc373b08cfbd7b6164b8b1e2d68af31c1f9117d * remainderOperande75b4bacd4211a21f9776359dfc373b08cfbd7b6164b8b1e2d68af31c1f9117d;
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_386\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_386\ => 
                        -- Waiting for the result to appear in \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.588\ (have to wait 27 clock cycles in this state).
                        -- The assignment needs to be kept up for multi-cycle operations for the result to actually appear in the target.
                        if (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.97\ >= to_signed(27, 32)) then 
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_387\;
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.97\ := to_signed(0, 32);
                        else 
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.97\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.97\ + to_signed(1, 32);
                        end if;
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.588\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num463\ / \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperande75b4bacd4211a21f9776359dfc373b08cfbd7b6164b8b1e2d68af31c1f9117d\;
                        -- Clock cycles needed to complete this state (approximation): 27
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_387\ => 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.589\ := SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.588\ * \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperande75b4bacd4211a21f9776359dfc373b08cfbd7b6164b8b1e2d68af31c1f9117d\, 64);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_388\;
                        -- Clock cycles needed to complete this state (approximation): 0.7638
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_388\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.590\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num463\ - \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.589\;
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num500\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.590\;
                        -- The following section was transformed from the .NET statement below:
                        -- long num501;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num501 = ((long)(num463 & (long)(num32)));
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.591\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num463\ and signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num32\), 64));
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num501\ := ((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.591\));
                        -- The following section was transformed from the .NET statement below:
                        -- long num502;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num502 = ((long)(num463 | (long)(num32)));
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.592\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num463\ or signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num32\), 64));
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num502\ := ((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.592\));
                        -- The following section was transformed from the .NET statement below:
                        -- long num503;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num503 = ((long)(num463 ^ (long)(num32)));
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.593\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num463\ xor signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num32\), 64));
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num503\ := ((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.593\));
                        -- The following section was transformed from the .NET statement below:
                        -- long num504;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num504 = num463 << input;
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_389\;
                        -- Clock cycles needed to complete this state (approximation): 0.91
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_389\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.594\ := SmartResize(shift_left(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num463\, to_integer(unsigned(SmartResize(SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\, 64), 6)))), 64);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num504\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.594\;
                        -- The following section was transformed from the .NET statement below:
                        -- long num505;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num505 = num463 >> input;
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_390\;
                        -- Clock cycles needed to complete this state (approximation): 0.56
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_390\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.595\ := SmartResize(shift_right(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num463\, to_integer(unsigned(SmartResize(SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\, 64), 6) and "111111"))), 64);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num505\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.595\;
                        -- The following section was transformed from the .NET statement below:
                        -- long num506;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num506 = (long)(num463 + (long)(input));
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_391\;
                        -- Clock cycles needed to complete this state (approximation): 0.7411
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_391\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.596\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num463\ + SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\), 64);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num506\ := (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.596\);
                        -- The following section was transformed from the .NET statement below:
                        -- long num507;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num507 = (long)(num463 - (long)(input));
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.597\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num463\ - SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\), 64);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num507\ := (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.597\);
                        -- The following section was transformed from the .NET statement below:
                        -- long num508;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num508 = (long)(num463 * (long)(input));
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_392\;
                        -- Clock cycles needed to complete this state (approximation): 0.7796
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_392\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.598\ := SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num463\ * SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\), 64), 64);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num508\ := (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.598\);
                        -- The following section was transformed from the .NET statement below:
                        -- long num509;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num509 = (long)(num463 / (long)(input));
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_393\;
                        -- Clock cycles needed to complete this state (approximation): 0.7638
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_393\ => 
                        -- Waiting for the result to appear in \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.599\ (have to wait 27 clock cycles in this state).
                        -- The assignment needs to be kept up for multi-cycle operations for the result to actually appear in the target.
                        if (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.98\ >= to_signed(27, 32)) then 
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_394\;
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.98\ := to_signed(0, 32);
                        else 
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.98\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.98\ + to_signed(1, 32);
                        end if;
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.599\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num463\ / SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\), 64);
                        -- Clock cycles needed to complete this state (approximation): 27
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_394\ => 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num509\ := (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.599\);
                        -- The following section was transformed from the .NET statement below:
                        -- long num510;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- long remainderOperand4bc89824826eaf4fc488736139d661507595ff0e316afc22e8c21ebdfa9bf28e;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- remainderOperand4bc89824826eaf4fc488736139d661507595ff0e316afc22e8c21ebdfa9bf28e = (long)(input);
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperand4bc89824826eaf4fc488736139d661507595ff0e316afc22e8c21ebdfa9bf28e\ := SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\), 64);
                        -- The following section was transformed from the .NET statement below:
                        -- num510 = (long)(num463 - num463 / remainderOperand4bc89824826eaf4fc488736139d661507595ff0e316afc22e8c21ebdfa9bf28e * remainderOperand4bc89824826eaf4fc488736139d661507595ff0e316afc22e8c21ebdfa9bf28e);
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_395\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_395\ => 
                        -- Waiting for the result to appear in \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.600\ (have to wait 27 clock cycles in this state).
                        -- The assignment needs to be kept up for multi-cycle operations for the result to actually appear in the target.
                        if (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.99\ >= to_signed(27, 32)) then 
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_396\;
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.99\ := to_signed(0, 32);
                        else 
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.99\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.99\ + to_signed(1, 32);
                        end if;
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.600\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num463\ / \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperand4bc89824826eaf4fc488736139d661507595ff0e316afc22e8c21ebdfa9bf28e\;
                        -- Clock cycles needed to complete this state (approximation): 27
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_396\ => 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.601\ := SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.600\ * \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperand4bc89824826eaf4fc488736139d661507595ff0e316afc22e8c21ebdfa9bf28e\, 64);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_397\;
                        -- Clock cycles needed to complete this state (approximation): 0.7638
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_397\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.602\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num463\ - \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.601\;
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num510\ := (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.602\);
                        -- The following section was transformed from the .NET statement below:
                        -- long num511;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num511 = ((long)(num463 & (long)(input)));
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.603\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num463\ and SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\), 64);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num511\ := ((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.603\));
                        -- The following section was transformed from the .NET statement below:
                        -- long num512;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num512 = ((long)(num463 | (long)(input)));
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.604\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num463\ or SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\), 64);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num512\ := ((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.604\));
                        -- The following section was transformed from the .NET statement below:
                        -- long num513;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num513 = ((long)(num463 ^ (long)(input)));
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.605\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num463\ xor SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\), 64);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num513\ := ((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.605\));
                        -- The following section was transformed from the .NET statement below:
                        -- long num514;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num514 = num463 << input;
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_398\;
                        -- Clock cycles needed to complete this state (approximation): 0.91
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_398\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.606\ := SmartResize(shift_left(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num463\, to_integer(unsigned(SmartResize(SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\, 64), 6)))), 64);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num514\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.606\;
                        -- The following section was transformed from the .NET statement below:
                        -- long num515;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num515 = num463 >> input;
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_399\;
                        -- Clock cycles needed to complete this state (approximation): 0.56
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_399\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.607\ := SmartResize(shift_right(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num463\, to_integer(unsigned(SmartResize(SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\, 64), 6) and "111111"))), 64);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num515\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.607\;
                        -- The following section was transformed from the .NET statement below:
                        -- long num516;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num516 = (long)(num463 + (long)((uint)input));
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_400\;
                        -- Clock cycles needed to complete this state (approximation): 0.7411
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_400\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.608\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num463\ + signed(SmartResize((unsigned(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\)), 64));
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num516\ := (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.608\);
                        -- The following section was transformed from the .NET statement below:
                        -- long num517;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num517 = (long)(num463 - (long)((uint)input));
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.609\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num463\ - signed(SmartResize((unsigned(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\)), 64));
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num517\ := (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.609\);
                        -- The following section was transformed from the .NET statement below:
                        -- long num518;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num518 = (long)(num463 * (long)((uint)input));
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_401\;
                        -- Clock cycles needed to complete this state (approximation): 0.7796
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_401\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.610\ := SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num463\ * signed(SmartResize((unsigned(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\)), 64)), 64);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num518\ := (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.610\);
                        -- The following section was transformed from the .NET statement below:
                        -- long num519;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num519 = num463 / (long)(uint)input;
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_402\;
                        -- Clock cycles needed to complete this state (approximation): 0.7638
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_402\ => 
                        -- Waiting for the result to appear in \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.611\ (have to wait 27 clock cycles in this state).
                        -- The assignment needs to be kept up for multi-cycle operations for the result to actually appear in the target.
                        if (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.100\ >= to_signed(27, 32)) then 
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_403\;
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.100\ := to_signed(0, 32);
                        else 
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.100\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.100\ + to_signed(1, 32);
                        end if;
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.611\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num463\ / signed(SmartResize(unsigned(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\), 64));
                        -- Clock cycles needed to complete this state (approximation): 27
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_403\ => 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num519\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.611\;
                        -- The following section was transformed from the .NET statement below:
                        -- long num520;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- long remainderOperand838dc20449138906a7f16bcd0cca3e401ab50dd9612c97ebb95583809f2e8b4d;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- remainderOperand838dc20449138906a7f16bcd0cca3e401ab50dd9612c97ebb95583809f2e8b4d = (long)(uint)input;
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperand838dc20449138906a7f16bcd0cca3e401ab50dd9612c97ebb95583809f2e8b4d\ := signed(SmartResize(unsigned(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\), 64));
                        -- The following section was transformed from the .NET statement below:
                        -- num520 = num463 - num463 / remainderOperand838dc20449138906a7f16bcd0cca3e401ab50dd9612c97ebb95583809f2e8b4d * remainderOperand838dc20449138906a7f16bcd0cca3e401ab50dd9612c97ebb95583809f2e8b4d;
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_404\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_404\ => 
                        -- Waiting for the result to appear in \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.612\ (have to wait 27 clock cycles in this state).
                        -- The assignment needs to be kept up for multi-cycle operations for the result to actually appear in the target.
                        if (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.101\ >= to_signed(27, 32)) then 
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_405\;
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.101\ := to_signed(0, 32);
                        else 
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.101\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.101\ + to_signed(1, 32);
                        end if;
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.612\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num463\ / \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperand838dc20449138906a7f16bcd0cca3e401ab50dd9612c97ebb95583809f2e8b4d\;
                        -- Clock cycles needed to complete this state (approximation): 27
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_405\ => 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.613\ := SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.612\ * \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperand838dc20449138906a7f16bcd0cca3e401ab50dd9612c97ebb95583809f2e8b4d\, 64);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_406\;
                        -- Clock cycles needed to complete this state (approximation): 0.7638
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_406\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.614\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num463\ - \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.613\;
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num520\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.614\;
                        -- The following section was transformed from the .NET statement below:
                        -- long num521;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num521 = ((long)(num463 & (long)((uint)input)));
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.615\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num463\ and signed(SmartResize((unsigned(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\)), 64));
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num521\ := ((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.615\));
                        -- The following section was transformed from the .NET statement below:
                        -- long num522;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num522 = ((long)(num463 | (long)((uint)input)));
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.616\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num463\ or signed(SmartResize((unsigned(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\)), 64));
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num522\ := ((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.616\));
                        -- The following section was transformed from the .NET statement below:
                        -- long num523;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num523 = ((long)(num463 ^ (long)((uint)input)));
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.617\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num463\ xor signed(SmartResize((unsigned(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\)), 64));
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num523\ := ((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.617\));
                        -- The following section was transformed from the .NET statement below:
                        -- long num524;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num524 = num463 << (int)num63;
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_407\;
                        -- Clock cycles needed to complete this state (approximation): 0.91
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_407\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.618\ := SmartResize(shift_left(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num463\, to_integer(unsigned(SmartResize(SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num63\, 32), 6)))), 64);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num524\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.618\;
                        -- The following section was transformed from the .NET statement below:
                        -- long num525;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num525 = num463 >> (int)num63;
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_408\;
                        -- Clock cycles needed to complete this state (approximation): 0.56
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_408\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.619\ := SmartResize(shift_right(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num463\, to_integer(unsigned(SmartResize(SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num63\, 32), 6) and "111111"))), 64);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num525\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.619\;
                        -- The following section was transformed from the .NET statement below:
                        -- long num526;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num526 = num463 + num63;
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_409\;
                        -- Clock cycles needed to complete this state (approximation): 0.7411
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_409\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.620\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num463\ + \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num63\;
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num526\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.620\;
                        -- The following section was transformed from the .NET statement below:
                        -- long num527;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num527 = num463 - num63;
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.621\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num463\ - \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num63\;
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num527\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.621\;
                        -- The following section was transformed from the .NET statement below:
                        -- long num528;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num528 = num463 * num63;
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_410\;
                        -- Clock cycles needed to complete this state (approximation): 0.7796
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_410\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.622\ := SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num463\ * \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num63\, 64);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num528\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.622\;
                        -- The following section was transformed from the .NET statement below:
                        -- long num529;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num529 = num463 / num63;
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_411\;
                        -- Clock cycles needed to complete this state (approximation): 0.7638
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_411\ => 
                        -- Waiting for the result to appear in \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.623\ (have to wait 27 clock cycles in this state).
                        -- The assignment needs to be kept up for multi-cycle operations for the result to actually appear in the target.
                        if (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.102\ >= to_signed(27, 32)) then 
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_412\;
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.102\ := to_signed(0, 32);
                        else 
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.102\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.102\ + to_signed(1, 32);
                        end if;
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.623\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num463\ / \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num63\;
                        -- Clock cycles needed to complete this state (approximation): 27
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_412\ => 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num529\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.623\;
                        -- The following section was transformed from the .NET statement below:
                        -- long num530;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num530 = num463 - num463 / num63 * num63;
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_413\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_413\ => 
                        -- Waiting for the result to appear in \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.624\ (have to wait 27 clock cycles in this state).
                        -- The assignment needs to be kept up for multi-cycle operations for the result to actually appear in the target.
                        if (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.103\ >= to_signed(27, 32)) then 
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_414\;
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.103\ := to_signed(0, 32);
                        else 
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.103\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.103\ + to_signed(1, 32);
                        end if;
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.624\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num463\ / \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num63\;
                        -- Clock cycles needed to complete this state (approximation): 27
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_414\ => 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.625\ := SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.624\ * \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num63\, 64);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_415\;
                        -- Clock cycles needed to complete this state (approximation): 0.7638
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_415\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.626\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num463\ - \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.625\;
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num530\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.626\;
                        -- The following section was transformed from the .NET statement below:
                        -- long num531;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num531 = (num463 & num63);
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.627\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num463\ and \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num63\;
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num531\ := (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.627\);
                        -- The following section was transformed from the .NET statement below:
                        -- long num532;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num532 = (num463 | num63);
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.628\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num463\ or \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num63\;
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num532\ := (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.628\);
                        -- The following section was transformed from the .NET statement below:
                        -- long num533;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num533 = (num463 ^ num63);
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.629\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num463\ xor \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num63\;
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num533\ := (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.629\);
                        -- The following section was transformed from the .NET statement below:
                        -- long num534;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num534 = num463 << (int)num74;
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_416\;
                        -- Clock cycles needed to complete this state (approximation): 0.91
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_416\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.630\ := SmartResize(shift_left(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num463\, to_integer(unsigned(SmartResize(signed(SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num74\, 32)), 6)))), 64);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num534\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.630\;
                        -- The following section was transformed from the .NET statement below:
                        -- long num535;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num535 = num463 >> (int)num74;
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_417\;
                        -- Clock cycles needed to complete this state (approximation): 0.56
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_417\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.631\ := SmartResize(shift_right(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num463\, to_integer(unsigned(SmartResize(signed(SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num74\, 32)), 6) and "111111"))), 64);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num535\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.631\;
                        -- The following section was transformed from the .NET statement below:
                        -- ulong num536;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num536 = (ulong)input;
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num536\ := ToUnsignedAndExpand(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\, 64);
                        -- The following section was transformed from the .NET statement below:
                        -- ulong num537;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num537 = num536 << (int)b2;
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_418\;
                        -- Clock cycles needed to complete this state (approximation): 0.7411
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_418\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.632\ := SmartResize(shift_left(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num536\, to_integer(unsigned(SmartResize(signed(SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b2\, 32)), 6)))), 64);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num537\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.632\;
                        -- The following section was transformed from the .NET statement below:
                        -- ulong num538;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num538 = num536 >> (int)b2;
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_419\;
                        -- Clock cycles needed to complete this state (approximation): 0.56
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_419\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.633\ := SmartResize(shift_right(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num536\, to_integer(unsigned(SmartResize(signed(SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b2\, 32)), 6) and "111111"))), 64);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num538\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.633\;
                        -- The following section was transformed from the .NET statement below:
                        -- ulong num539;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num539 = (ulong)(num536 + (ulong)(b2));
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_420\;
                        -- Clock cycles needed to complete this state (approximation): 0.7411
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_420\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.634\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num536\ + SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b2\), 64);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num539\ := (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.634\);
                        -- The following section was transformed from the .NET statement below:
                        -- ulong num540;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num540 = (ulong)(num536 - (ulong)(b2));
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.635\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num536\ - SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b2\), 64);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num540\ := (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.635\);
                        -- The following section was transformed from the .NET statement below:
                        -- ulong num541;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num541 = (ulong)(num536 * (ulong)(b2));
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_421\;
                        -- Clock cycles needed to complete this state (approximation): 0.7796
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_421\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.636\ := SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num536\ * SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b2\), 64), 64);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num541\ := (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.636\);
                        -- The following section was transformed from the .NET statement below:
                        -- ulong num542;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num542 = (ulong)(num536 / (ulong)(b2));
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_422\;
                        -- Clock cycles needed to complete this state (approximation): 0.7638
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_422\ => 
                        -- Waiting for the result to appear in \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.637\ (have to wait 26 clock cycles in this state).
                        -- The assignment needs to be kept up for multi-cycle operations for the result to actually appear in the target.
                        if (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.104\ >= to_signed(26, 32)) then 
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_423\;
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.104\ := to_signed(0, 32);
                        else 
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.104\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.104\ + to_signed(1, 32);
                        end if;
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.637\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num536\ / SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b2\), 64);
                        -- Clock cycles needed to complete this state (approximation): 26
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_423\ => 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num542\ := (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.637\);
                        -- The following section was transformed from the .NET statement below:
                        -- ulong num543;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- ulong remainderOperandd41a858f0a0da47bf5fee838effa2f00316370d206099aadf1a55a416664eab9;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- remainderOperandd41a858f0a0da47bf5fee838effa2f00316370d206099aadf1a55a416664eab9 = (ulong)(b2);
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperandd41a858f0a0da47bf5fee838effa2f00316370d206099aadf1a55a416664eab9\ := SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b2\), 64);
                        -- The following section was transformed from the .NET statement below:
                        -- num543 = (ulong)(num536 - num536 / remainderOperandd41a858f0a0da47bf5fee838effa2f00316370d206099aadf1a55a416664eab9 * remainderOperandd41a858f0a0da47bf5fee838effa2f00316370d206099aadf1a55a416664eab9);
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_424\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_424\ => 
                        -- Waiting for the result to appear in \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.638\ (have to wait 26 clock cycles in this state).
                        -- The assignment needs to be kept up for multi-cycle operations for the result to actually appear in the target.
                        if (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.105\ >= to_signed(26, 32)) then 
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_425\;
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.105\ := to_signed(0, 32);
                        else 
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.105\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.105\ + to_signed(1, 32);
                        end if;
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.638\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num536\ / \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperandd41a858f0a0da47bf5fee838effa2f00316370d206099aadf1a55a416664eab9\;
                        -- Clock cycles needed to complete this state (approximation): 26
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_425\ => 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.639\ := SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.638\ * \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperandd41a858f0a0da47bf5fee838effa2f00316370d206099aadf1a55a416664eab9\, 64);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_426\;
                        -- Clock cycles needed to complete this state (approximation): 0.7638
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_426\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.640\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num536\ - \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.639\;
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num543\ := (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.640\);
                        -- The following section was transformed from the .NET statement below:
                        -- ulong num544;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num544 = ((ulong)(num536 & (ulong)(b2)));
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.641\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num536\ and SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b2\), 64);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num544\ := ((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.641\));
                        -- The following section was transformed from the .NET statement below:
                        -- ulong num545;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num545 = ((ulong)(num536 | (ulong)(b2)));
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.642\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num536\ or SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b2\), 64);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num545\ := ((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.642\));
                        -- The following section was transformed from the .NET statement below:
                        -- ulong num546;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num546 = ((ulong)(num536 ^ (ulong)(b2)));
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.643\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num536\ xor SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b2\), 64);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num546\ := ((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.643\));
                        -- The following section was transformed from the .NET statement below:
                        -- ulong num547;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num547 = num536 << (int)b3;
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_427\;
                        -- Clock cycles needed to complete this state (approximation): 0.91
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_427\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.644\ := SmartResize(shift_left(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num536\, to_integer(unsigned(SmartResize(SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b3\, 32), 6)))), 64);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num547\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.644\;
                        -- The following section was transformed from the .NET statement below:
                        -- ulong num548;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num548 = num536 >> (int)b3;
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_428\;
                        -- Clock cycles needed to complete this state (approximation): 0.56
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_428\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.645\ := SmartResize(shift_right(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num536\, to_integer(unsigned(SmartResize(SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.b3\, 32), 6) and "111111"))), 64);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num548\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.645\;
                        -- The following section was transformed from the .NET statement below:
                        -- ulong num549;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num549 = num536 << (int)num21;
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_429\;
                        -- Clock cycles needed to complete this state (approximation): 0.7411
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_429\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.646\ := SmartResize(shift_left(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num536\, to_integer(unsigned(SmartResize(SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num21\, 32), 6)))), 64);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num549\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.646\;
                        -- The following section was transformed from the .NET statement below:
                        -- ulong num550;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num550 = num536 >> (int)num21;
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_430\;
                        -- Clock cycles needed to complete this state (approximation): 0.56
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_430\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.647\ := SmartResize(shift_right(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num536\, to_integer(unsigned(SmartResize(SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num21\, 32), 6) and "111111"))), 64);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num550\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.647\;
                        -- The following section was transformed from the .NET statement below:
                        -- ulong num551;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num551 = num536 << (int)num32;
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_431\;
                        -- Clock cycles needed to complete this state (approximation): 0.7411
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_431\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.648\ := SmartResize(shift_left(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num536\, to_integer(unsigned(SmartResize(signed(SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num32\, 32)), 6)))), 64);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num551\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.648\;
                        -- The following section was transformed from the .NET statement below:
                        -- ulong num552;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num552 = num536 >> (int)num32;
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_432\;
                        -- Clock cycles needed to complete this state (approximation): 0.56
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_432\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.649\ := SmartResize(shift_right(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num536\, to_integer(unsigned(SmartResize(signed(SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num32\, 32)), 6) and "111111"))), 64);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num552\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.649\;
                        -- The following section was transformed from the .NET statement below:
                        -- ulong num553;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num553 = (ulong)(num536 + (ulong)(num32));
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_433\;
                        -- Clock cycles needed to complete this state (approximation): 0.7411
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_433\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.650\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num536\ + SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num32\), 64);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num553\ := (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.650\);
                        -- The following section was transformed from the .NET statement below:
                        -- ulong num554;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num554 = (ulong)(num536 - (ulong)(num32));
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.651\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num536\ - SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num32\), 64);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num554\ := (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.651\);
                        -- The following section was transformed from the .NET statement below:
                        -- ulong num555;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num555 = (ulong)(num536 * (ulong)(num32));
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_434\;
                        -- Clock cycles needed to complete this state (approximation): 0.7796
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_434\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.652\ := SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num536\ * SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num32\), 64), 64);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num555\ := (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.652\);
                        -- The following section was transformed from the .NET statement below:
                        -- ulong num556;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num556 = (ulong)(num536 / (ulong)(num32));
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_435\;
                        -- Clock cycles needed to complete this state (approximation): 0.7638
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_435\ => 
                        -- Waiting for the result to appear in \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.653\ (have to wait 26 clock cycles in this state).
                        -- The assignment needs to be kept up for multi-cycle operations for the result to actually appear in the target.
                        if (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.106\ >= to_signed(26, 32)) then 
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_436\;
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.106\ := to_signed(0, 32);
                        else 
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.106\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.106\ + to_signed(1, 32);
                        end if;
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.653\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num536\ / SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num32\), 64);
                        -- Clock cycles needed to complete this state (approximation): 26
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_436\ => 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num556\ := (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.653\);
                        -- The following section was transformed from the .NET statement below:
                        -- ulong num557;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- ulong remainderOperand0cef0b10925aa267884ea977d8f49c176c5a99f0b399413db8459d9d88797467;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- remainderOperand0cef0b10925aa267884ea977d8f49c176c5a99f0b399413db8459d9d88797467 = (ulong)(num32);
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperand0cef0b10925aa267884ea977d8f49c176c5a99f0b399413db8459d9d88797467\ := SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num32\), 64);
                        -- The following section was transformed from the .NET statement below:
                        -- num557 = (ulong)(num536 - num536 / remainderOperand0cef0b10925aa267884ea977d8f49c176c5a99f0b399413db8459d9d88797467 * remainderOperand0cef0b10925aa267884ea977d8f49c176c5a99f0b399413db8459d9d88797467);
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_437\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_437\ => 
                        -- Waiting for the result to appear in \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.654\ (have to wait 26 clock cycles in this state).
                        -- The assignment needs to be kept up for multi-cycle operations for the result to actually appear in the target.
                        if (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.107\ >= to_signed(26, 32)) then 
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_438\;
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.107\ := to_signed(0, 32);
                        else 
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.107\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.107\ + to_signed(1, 32);
                        end if;
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.654\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num536\ / \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperand0cef0b10925aa267884ea977d8f49c176c5a99f0b399413db8459d9d88797467\;
                        -- Clock cycles needed to complete this state (approximation): 26
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_438\ => 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.655\ := SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.654\ * \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperand0cef0b10925aa267884ea977d8f49c176c5a99f0b399413db8459d9d88797467\, 64);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_439\;
                        -- Clock cycles needed to complete this state (approximation): 0.7638
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_439\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.656\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num536\ - \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.655\;
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num557\ := (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.656\);
                        -- The following section was transformed from the .NET statement below:
                        -- ulong num558;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num558 = ((ulong)(num536 & (ulong)(num32)));
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.657\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num536\ and SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num32\), 64);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num558\ := ((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.657\));
                        -- The following section was transformed from the .NET statement below:
                        -- ulong num559;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num559 = ((ulong)(num536 | (ulong)(num32)));
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.658\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num536\ or SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num32\), 64);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num559\ := ((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.658\));
                        -- The following section was transformed from the .NET statement below:
                        -- ulong num560;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num560 = ((ulong)(num536 ^ (ulong)(num32)));
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.659\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num536\ xor SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num32\), 64);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num560\ := ((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.659\));
                        -- The following section was transformed from the .NET statement below:
                        -- ulong num561;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num561 = num536 << input;
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_440\;
                        -- Clock cycles needed to complete this state (approximation): 0.91
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_440\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.660\ := SmartResize(shift_left(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num536\, to_integer(unsigned(SmartResize(ToUnsignedAndExpand(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\, 64), 6)))), 64);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num561\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.660\;
                        -- The following section was transformed from the .NET statement below:
                        -- ulong num562;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num562 = num536 >> input;
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_441\;
                        -- Clock cycles needed to complete this state (approximation): 0.56
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_441\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.661\ := SmartResize(shift_right(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num536\, to_integer(unsigned(SmartResize(ToUnsignedAndExpand(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\, 64), 6) and "111111"))), 64);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num562\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.661\;
                        -- The following section was transformed from the .NET statement below:
                        -- ulong num563;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num563 = num536 << input;
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_442\;
                        -- Clock cycles needed to complete this state (approximation): 0.7411
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_442\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.662\ := SmartResize(shift_left(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num536\, to_integer(unsigned(SmartResize(ToUnsignedAndExpand(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\, 64), 6)))), 64);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num563\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.662\;
                        -- The following section was transformed from the .NET statement below:
                        -- ulong num564;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num564 = num536 >> input;
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_443\;
                        -- Clock cycles needed to complete this state (approximation): 0.56
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_443\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.663\ := SmartResize(shift_right(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num536\, to_integer(unsigned(SmartResize(ToUnsignedAndExpand(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\, 64), 6) and "111111"))), 64);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num564\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.663\;
                        -- The following section was transformed from the .NET statement below:
                        -- ulong num565;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num565 = (ulong)(num536 + (ulong)((uint)input));
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_444\;
                        -- Clock cycles needed to complete this state (approximation): 0.7411
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_444\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.664\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num536\ + SmartResize((unsigned(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\)), 64);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num565\ := (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.664\);
                        -- The following section was transformed from the .NET statement below:
                        -- ulong num566;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num566 = (ulong)(num536 - (ulong)((uint)input));
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.665\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num536\ - SmartResize((unsigned(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\)), 64);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num566\ := (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.665\);
                        -- The following section was transformed from the .NET statement below:
                        -- ulong num567;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num567 = (ulong)(num536 * (ulong)((uint)input));
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_445\;
                        -- Clock cycles needed to complete this state (approximation): 0.7796
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_445\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.666\ := SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num536\ * SmartResize((unsigned(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\)), 64), 64);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num567\ := (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.666\);
                        -- The following section was transformed from the .NET statement below:
                        -- ulong num568;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num568 = (ulong)(num536 / (ulong)((uint)input));
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_446\;
                        -- Clock cycles needed to complete this state (approximation): 0.7638
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_446\ => 
                        -- Waiting for the result to appear in \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.667\ (have to wait 26 clock cycles in this state).
                        -- The assignment needs to be kept up for multi-cycle operations for the result to actually appear in the target.
                        if (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.108\ >= to_signed(26, 32)) then 
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_447\;
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.108\ := to_signed(0, 32);
                        else 
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.108\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.108\ + to_signed(1, 32);
                        end if;
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.667\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num536\ / SmartResize((unsigned(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\)), 64);
                        -- Clock cycles needed to complete this state (approximation): 26
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_447\ => 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num568\ := (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.667\);
                        -- The following section was transformed from the .NET statement below:
                        -- ulong num569;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- ulong remainderOperande025c253aa170f0ff3164efe3aeca6fef8214365534775fffe1d555e2bcc3eb9;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- remainderOperande025c253aa170f0ff3164efe3aeca6fef8214365534775fffe1d555e2bcc3eb9 = (ulong)((uint)input);
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperande025c253aa170f0ff3164efe3aeca6fef8214365534775fffe1d555e2bcc3eb9\ := SmartResize((unsigned(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\)), 64);
                        -- The following section was transformed from the .NET statement below:
                        -- num569 = (ulong)(num536 - num536 / remainderOperande025c253aa170f0ff3164efe3aeca6fef8214365534775fffe1d555e2bcc3eb9 * remainderOperande025c253aa170f0ff3164efe3aeca6fef8214365534775fffe1d555e2bcc3eb9);
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_448\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_448\ => 
                        -- Waiting for the result to appear in \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.668\ (have to wait 26 clock cycles in this state).
                        -- The assignment needs to be kept up for multi-cycle operations for the result to actually appear in the target.
                        if (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.109\ >= to_signed(26, 32)) then 
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_449\;
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.109\ := to_signed(0, 32);
                        else 
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.109\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.109\ + to_signed(1, 32);
                        end if;
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.668\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num536\ / \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperande025c253aa170f0ff3164efe3aeca6fef8214365534775fffe1d555e2bcc3eb9\;
                        -- Clock cycles needed to complete this state (approximation): 26
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_449\ => 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.669\ := SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.668\ * \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.remainderOperande025c253aa170f0ff3164efe3aeca6fef8214365534775fffe1d555e2bcc3eb9\, 64);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_450\;
                        -- Clock cycles needed to complete this state (approximation): 0.7638
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_450\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.670\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num536\ - \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.669\;
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num569\ := (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.670\);
                        -- The following section was transformed from the .NET statement below:
                        -- ulong num570;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num570 = ((ulong)(num536 & (ulong)((uint)input)));
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.671\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num536\ and SmartResize((unsigned(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\)), 64);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num570\ := ((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.671\));
                        -- The following section was transformed from the .NET statement below:
                        -- ulong num571;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num571 = ((ulong)(num536 | (ulong)((uint)input)));
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.672\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num536\ or SmartResize((unsigned(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\)), 64);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num571\ := ((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.672\));
                        -- The following section was transformed from the .NET statement below:
                        -- ulong num572;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num572 = ((ulong)(num536 ^ (ulong)((uint)input)));
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.673\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num536\ xor SmartResize((unsigned(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.input\)), 64);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num572\ := ((\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.673\));
                        -- The following section was transformed from the .NET statement below:
                        -- ulong num573;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num573 = num536 << (int)num63;
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_451\;
                        -- Clock cycles needed to complete this state (approximation): 0.91
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_451\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.674\ := SmartResize(shift_left(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num536\, to_integer(unsigned(SmartResize(SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num63\, 32), 6)))), 64);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num573\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.674\;
                        -- The following section was transformed from the .NET statement below:
                        -- ulong num574;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num574 = num536 >> (int)num63;
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_452\;
                        -- Clock cycles needed to complete this state (approximation): 0.56
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_452\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.675\ := SmartResize(shift_right(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num536\, to_integer(unsigned(SmartResize(SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num63\, 32), 6) and "111111"))), 64);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num574\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.675\;
                        -- The following section was transformed from the .NET statement below:
                        -- ulong num575;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num575 = num536 << (int)num74;
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_453\;
                        -- Clock cycles needed to complete this state (approximation): 0.7411
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_453\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.676\ := SmartResize(shift_left(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num536\, to_integer(unsigned(SmartResize(signed(SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num74\, 32)), 6)))), 64);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num575\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.676\;
                        -- The following section was transformed from the .NET statement below:
                        -- ulong num576;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num576 = num536 >> (int)num74;
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_454\;
                        -- Clock cycles needed to complete this state (approximation): 0.56
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_454\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.677\ := SmartResize(shift_right(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num536\, to_integer(unsigned(SmartResize(signed(SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num74\, 32)), 6) and "111111"))), 64);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num576\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.677\;
                        -- The following section was transformed from the .NET statement below:
                        -- ulong num577;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num577 = num536 + num74;
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_455\;
                        -- Clock cycles needed to complete this state (approximation): 0.7411
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_455\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.678\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num536\ + \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num74\;
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num577\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.678\;
                        -- The following section was transformed from the .NET statement below:
                        -- ulong num578;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num578 = num536 - num74;
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.679\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num536\ - \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num74\;
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num578\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.679\;
                        -- The following section was transformed from the .NET statement below:
                        -- ulong num579;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num579 = num536 * num74;
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_456\;
                        -- Clock cycles needed to complete this state (approximation): 0.7796
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_456\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.680\ := SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num536\ * \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num74\, 64);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num579\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.680\;
                        -- The following section was transformed from the .NET statement below:
                        -- ulong num580;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num580 = num536 / num74;
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_457\;
                        -- Clock cycles needed to complete this state (approximation): 0.7638
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_457\ => 
                        -- Waiting for the result to appear in \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.681\ (have to wait 26 clock cycles in this state).
                        -- The assignment needs to be kept up for multi-cycle operations for the result to actually appear in the target.
                        if (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.110\ >= to_signed(26, 32)) then 
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_458\;
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.110\ := to_signed(0, 32);
                        else 
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.110\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.110\ + to_signed(1, 32);
                        end if;
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.681\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num536\ / \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num74\;
                        -- Clock cycles needed to complete this state (approximation): 26
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_458\ => 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num580\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.681\;
                        -- The following section was transformed from the .NET statement below:
                        -- ulong num581;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num581 = num536 - num536 / num74 * num74;
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_459\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_459\ => 
                        -- Waiting for the result to appear in \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.682\ (have to wait 26 clock cycles in this state).
                        -- The assignment needs to be kept up for multi-cycle operations for the result to actually appear in the target.
                        if (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.111\ >= to_signed(26, 32)) then 
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_460\;
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.111\ := to_signed(0, 32);
                        else 
                            \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.111\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.clockCyclesWaitedForBinaryOperationResult.111\ + to_signed(1, 32);
                        end if;
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.682\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num536\ / \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num74\;
                        -- Clock cycles needed to complete this state (approximation): 26
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_460\ => 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.683\ := SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.682\ * \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num74\, 64);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_461\;
                        -- Clock cycles needed to complete this state (approximation): 0.7638
                    when \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_461\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.684\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num536\ - \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.683\;
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num581\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.684\;
                        -- The following section was transformed from the .NET statement below:
                        -- ulong num582;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num582 = (num536 & num74);
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.685\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num536\ and \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num74\;
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num582\ := (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.685\);
                        -- The following section was transformed from the .NET statement below:
                        -- ulong num583;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num583 = (num536 | num74);
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.686\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num536\ or \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num74\;
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num583\ := (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.686\);
                        -- The following section was transformed from the .NET statement below:
                        -- ulong num584;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num584 = (num536 ^ num74);
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.687\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num536\ xor \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num74\;
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.num584\ := (\BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0.binaryOperationResult.687\);
                        \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._State_1\;
                        -- Clock cycles needed to complete this state (approximation): 0.91
                end case;
            end if;
        end if;
    end process;
    -- System.Void Hast.TestInputs.Various.BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(System.Int32).0 state machine end


    -- System.Void Hast.TestInputs.Various.BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(System.Int32).0 state machine start
    \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(Int32).0._StateMachine\: process (\Clock\) 
        Variable \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(Int32).0._State\: \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(Int32).0._States\ := \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(Int32).0._State_0\;
        Variable \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(Int32).0.input\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(Int32).0.b\: unsigned(7 downto 0) := to_unsigned(0, 8);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(Int32).0.num\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(Int32).0.num2\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(Int32).0.unaryOperationResult.0\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(Int32).0.num3\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(Int32).0.unaryOperationResult.1\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(Int32).0.b2\: signed(7 downto 0) := to_signed(0, 8);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(Int32).0.num4\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(Int32).0.num5\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(Int32).0.unaryOperationResult.2\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(Int32).0.num6\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(Int32).0.unaryOperationResult.3\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(Int32).0.num7\: signed(15 downto 0) := to_signed(0, 16);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(Int32).0.num8\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(Int32).0.num9\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(Int32).0.unaryOperationResult.4\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(Int32).0.num10\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(Int32).0.unaryOperationResult.5\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(Int32).0.num11\: unsigned(15 downto 0) := to_unsigned(0, 16);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(Int32).0.num12\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(Int32).0.num13\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(Int32).0.unaryOperationResult.6\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(Int32).0.num14\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(Int32).0.unaryOperationResult.7\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(Int32).0.num15\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(Int32).0.unaryOperationResult.8\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(Int32).0.num16\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(Int32).0.unaryOperationResult.9\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(Int32).0.num17\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(Int32).0.binaryOperationResult.0\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(Int32).0.num18\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(Int32).0.unaryOperationResult.10\: signed(31 downto 0) := to_signed(0, 32);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(Int32).0.num19\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(Int32).0.num20\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(Int32).0.num21\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(Int32).0.unaryOperationResult.11\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(Int32).0.num22\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(Int32).0.unaryOperationResult.12\: signed(63 downto 0) := to_signed(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(Int32).0.num23\: unsigned(63 downto 0) := to_unsigned(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(Int32).0.num24\: unsigned(63 downto 0) := to_unsigned(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(Int32).0.num25\: unsigned(63 downto 0) := to_unsigned(0, 64);
        Variable \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(Int32).0.unaryOperationResult.13\: unsigned(63 downto 0) := to_unsigned(0, 64);
    begin 
        if (rising_edge(\Clock\)) then 
            if (\Reset\ = '1') then 
                -- Synchronous reset
                \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(Int32).0._Finished\ <= false;
                \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(Int32).0._State_0\;
                \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(Int32).0.input\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(Int32).0.b\ := to_unsigned(0, 8);
                \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(Int32).0.num\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(Int32).0.num2\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(Int32).0.unaryOperationResult.0\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(Int32).0.num3\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(Int32).0.unaryOperationResult.1\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(Int32).0.b2\ := to_signed(0, 8);
                \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(Int32).0.num4\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(Int32).0.num5\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(Int32).0.unaryOperationResult.2\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(Int32).0.num6\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(Int32).0.unaryOperationResult.3\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(Int32).0.num7\ := to_signed(0, 16);
                \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(Int32).0.num8\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(Int32).0.num9\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(Int32).0.unaryOperationResult.4\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(Int32).0.num10\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(Int32).0.unaryOperationResult.5\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(Int32).0.num11\ := to_unsigned(0, 16);
                \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(Int32).0.num12\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(Int32).0.num13\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(Int32).0.unaryOperationResult.6\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(Int32).0.num14\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(Int32).0.unaryOperationResult.7\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(Int32).0.num15\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(Int32).0.unaryOperationResult.8\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(Int32).0.num16\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(Int32).0.unaryOperationResult.9\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(Int32).0.num17\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(Int32).0.binaryOperationResult.0\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(Int32).0.num18\ := to_unsigned(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(Int32).0.unaryOperationResult.10\ := to_signed(0, 32);
                \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(Int32).0.num19\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(Int32).0.num20\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(Int32).0.num21\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(Int32).0.unaryOperationResult.11\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(Int32).0.num22\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(Int32).0.unaryOperationResult.12\ := to_signed(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(Int32).0.num23\ := to_unsigned(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(Int32).0.num24\ := to_unsigned(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(Int32).0.num25\ := to_unsigned(0, 64);
                \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(Int32).0.unaryOperationResult.13\ := to_unsigned(0, 64);
            else 
                case \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(Int32).0._State\ is 
                    when \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(Int32).0._State_0\ => 
                        -- Start state
                        -- Waiting for the start signal.
                        if (\BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(Int32).0._Started\ = true) then 
                            \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(Int32).0._State_2\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(Int32).0._State_1\ => 
                        -- Final state
                        -- Signaling finished until Started is pulled back to false, then returning to the start state.
                        if (\BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(Int32).0._Started\ = true) then 
                            \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(Int32).0._Finished\ <= true;
                        else 
                            \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(Int32).0._Finished\ <= false;
                            \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(Int32).0._State_0\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(Int32).0._State_2\ => 
                        \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(Int32).0.input\ := \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(Int32).0.input.parameter.In\;
                        -- The following section was transformed from the .NET statement below:
                        -- byte b;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- b = (byte)input;
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(Int32).0.b\ := SmartResize(unsigned(\BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(Int32).0.input\), 8);
                        -- The following section was transformed from the .NET statement below:
                        -- int num;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num = b;
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(Int32).0.num\ := signed(SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(Int32).0.b\, 32));
                        -- The following section was transformed from the .NET statement below:
                        -- int num2;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num2 = (byte)(-(int)(b));
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(Int32).0.unaryOperationResult.0\ := -signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(Int32).0.b\), 32));
                        \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(Int32).0.num2\ := signed(SmartResize(SmartResize(unsigned((\BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(Int32).0.unaryOperationResult.0\)), 8), 32));
                        -- The following section was transformed from the .NET statement below:
                        -- int num3;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num3 = (byte)(~(int)(b));
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(Int32).0.unaryOperationResult.1\ := not(signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(Int32).0.b\), 32)));
                        \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(Int32).0.num3\ := signed(SmartResize(SmartResize(unsigned((\BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(Int32).0.unaryOperationResult.1\)), 8), 32));
                        -- The following section was transformed from the .NET statement below:
                        -- sbyte b2;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- b2 = (sbyte)input;
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(Int32).0.b2\ := SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(Int32).0.input\, 8);
                        -- The following section was transformed from the .NET statement below:
                        -- int num4;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num4 = b2;
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(Int32).0.num4\ := SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(Int32).0.b2\, 32);
                        -- The following section was transformed from the .NET statement below:
                        -- int num5;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num5 = (sbyte)(-(int)(b2));
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(Int32).0.unaryOperationResult.2\ := -SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(Int32).0.b2\), 32);
                        \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(Int32).0.num5\ := SmartResize(SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(Int32).0.unaryOperationResult.2\), 8), 32);
                        -- The following section was transformed from the .NET statement below:
                        -- int num6;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num6 = (sbyte)(~(int)(b2));
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(Int32).0.unaryOperationResult.3\ := not(SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(Int32).0.b2\), 32));
                        \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(Int32).0.num6\ := SmartResize(SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(Int32).0.unaryOperationResult.3\), 8), 32);
                        -- The following section was transformed from the .NET statement below:
                        -- short num7;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num7 = (short)input;
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(Int32).0.num7\ := SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(Int32).0.input\, 16);
                        -- The following section was transformed from the .NET statement below:
                        -- int num8;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num8 = num7;
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(Int32).0.num8\ := SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(Int32).0.num7\, 32);
                        -- The following section was transformed from the .NET statement below:
                        -- int num9;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num9 = (short)(-(int)(num7));
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(Int32).0._State_3\;
                        -- Clock cycles needed to complete this state (approximation): 0.9134
                    when \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(Int32).0._State_3\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(Int32).0.unaryOperationResult.4\ := -SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(Int32).0.num7\), 32);
                        \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(Int32).0.num9\ := SmartResize(SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(Int32).0.unaryOperationResult.4\), 16), 32);
                        -- The following section was transformed from the .NET statement below:
                        -- int num10;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num10 = (short)(~(int)(num7));
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(Int32).0.unaryOperationResult.5\ := not(SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(Int32).0.num7\), 32));
                        \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(Int32).0.num10\ := SmartResize(SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(Int32).0.unaryOperationResult.5\), 16), 32);
                        -- The following section was transformed from the .NET statement below:
                        -- ushort num11;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num11 = (ushort)input;
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(Int32).0.num11\ := SmartResize(unsigned(\BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(Int32).0.input\), 16);
                        -- The following section was transformed from the .NET statement below:
                        -- int num12;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num12 = num11;
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(Int32).0.num12\ := signed(SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(Int32).0.num11\, 32));
                        -- The following section was transformed from the .NET statement below:
                        -- int num13;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num13 = (ushort)(-(int)(num11));
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(Int32).0.unaryOperationResult.6\ := -signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(Int32).0.num11\), 32));
                        \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(Int32).0.num13\ := signed(SmartResize(SmartResize(unsigned((\BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(Int32).0.unaryOperationResult.6\)), 16), 32));
                        -- The following section was transformed from the .NET statement below:
                        -- int num14;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num14 = (ushort)(~(int)(num11));
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(Int32).0.unaryOperationResult.7\ := not(signed(SmartResize((\BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(Int32).0.num11\), 32)));
                        \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(Int32).0.num14\ := signed(SmartResize(SmartResize(unsigned((\BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(Int32).0.unaryOperationResult.7\)), 16), 32));
                        -- The following section was transformed from the .NET statement below:
                        -- int num15;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num15 = -input;
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(Int32).0._State_4\;
                        -- Clock cycles needed to complete this state (approximation): 0.9134
                    when \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(Int32).0._State_4\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(Int32).0.unaryOperationResult.8\ := -\BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(Int32).0.input\;
                        \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(Int32).0.num15\ := \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(Int32).0.unaryOperationResult.8\;
                        -- The following section was transformed from the .NET statement below:
                        -- int num16;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num16 = ~input;
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(Int32).0.unaryOperationResult.9\ := not(\BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(Int32).0.input\);
                        \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(Int32).0.num16\ := \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(Int32).0.unaryOperationResult.9\;
                        -- The following section was transformed from the .NET statement below:
                        -- long num17;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num17 = (long)(0L - (long)((uint)input));
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(Int32).0.binaryOperationResult.0\ := to_signed(0, 64) - signed(SmartResize((unsigned(\BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(Int32).0.input\)), 64));
                        \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(Int32).0.num17\ := (\BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(Int32).0.binaryOperationResult.0\);
                        -- The following section was transformed from the .NET statement below:
                        -- uint num18;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num18 = (uint)(~input);
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(Int32).0.unaryOperationResult.10\ := not(\BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(Int32).0.input\);
                        \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(Int32).0.num18\ := unsigned((\BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(Int32).0.unaryOperationResult.10\));
                        -- The following section was transformed from the .NET statement below:
                        -- long num19;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num19 = input;
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(Int32).0.num19\ := SmartResize(\BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(Int32).0.input\, 64);
                        -- The following section was transformed from the .NET statement below:
                        -- long num20;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num20 = num19;
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(Int32).0.num20\ := \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(Int32).0.num19\;
                        -- The following section was transformed from the .NET statement below:
                        -- long num21;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num21 = -num19;
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(Int32).0._State_5\;
                        -- Clock cycles needed to complete this state (approximation): 0.9913
                    when \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(Int32).0._State_5\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(Int32).0.unaryOperationResult.11\ := -\BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(Int32).0.num19\;
                        \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(Int32).0.num21\ := \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(Int32).0.unaryOperationResult.11\;
                        -- The following section was transformed from the .NET statement below:
                        -- long num22;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num22 = ~num19;
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(Int32).0.unaryOperationResult.12\ := not(\BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(Int32).0.num19\);
                        \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(Int32).0.num22\ := \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(Int32).0.unaryOperationResult.12\;
                        -- The following section was transformed from the .NET statement below:
                        -- ulong num23;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num23 = (ulong)input;
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(Int32).0.num23\ := ToUnsignedAndExpand(\BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(Int32).0.input\, 64);
                        -- The following section was transformed from the .NET statement below:
                        -- ulong num24;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num24 = num23;
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(Int32).0.num24\ := \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(Int32).0.num23\;
                        -- The following section was transformed from the .NET statement below:
                        -- ulong num25;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num25 = ~num23;
                        -- 
                        \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(Int32).0.unaryOperationResult.13\ := not(\BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(Int32).0.num23\);
                        \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(Int32).0.num25\ := \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(Int32).0.unaryOperationResult.13\;
                        \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(Int32).0._State\ := \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(Int32).0._State_1\;
                        -- Clock cycles needed to complete this state (approximation): 0.6485
                end case;
            end if;
        end if;
    end process;
    -- System.Void Hast.TestInputs.Various.BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(System.Int32).0 state machine end


    -- System.Void Hast.TestInputs.Various.CastingCases::NumberCasting(System.Int16,System.Int16).0 state machine start
    \CastingCases::NumberCasting(Int16,Int16).0._StateMachine\: process (\Clock\) 
        Variable \CastingCases::NumberCasting(Int16,Int16).0._State\: \CastingCases::NumberCasting(Int16,Int16).0._States\ := \CastingCases::NumberCasting(Int16,Int16).0._State_0\;
        Variable \CastingCases::NumberCasting(Int16,Int16).0.a\: signed(15 downto 0) := to_signed(0, 16);
        Variable \CastingCases::NumberCasting(Int16,Int16).0.b\: signed(15 downto 0) := to_signed(0, 16);
        Variable \CastingCases::NumberCasting(Int16,Int16).0.num\: signed(15 downto 0) := to_signed(0, 16);
        Variable \CastingCases::NumberCasting(Int16,Int16).0.binaryOperationResult.0\: signed(15 downto 0) := to_signed(0, 16);
        Variable \CastingCases::NumberCasting(Int16,Int16).0.num2\: signed(31 downto 0) := to_signed(0, 32);
        Variable \CastingCases::NumberCasting(Int16,Int16).0.binaryOperationResult.1\: signed(31 downto 0) := to_signed(0, 32);
        Variable \CastingCases::NumberCasting(Int16,Int16).0.b2\: unsigned(7 downto 0) := to_unsigned(0, 8);
        Variable \CastingCases::NumberCasting(Int16,Int16).0.b3\: signed(7 downto 0) := to_signed(0, 8);
        Variable \CastingCases::NumberCasting(Int16,Int16).0.num3\: unsigned(15 downto 0) := to_unsigned(0, 16);
        Variable \CastingCases::NumberCasting(Int16,Int16).0.num4\: signed(63 downto 0) := to_signed(0, 64);
        Variable \CastingCases::NumberCasting(Int16,Int16).0.binaryOperationResult.2\: signed(63 downto 0) := to_signed(0, 64);
    begin 
        if (rising_edge(\Clock\)) then 
            if (\Reset\ = '1') then 
                -- Synchronous reset
                \CastingCases::NumberCasting(Int16,Int16).0._Finished\ <= false;
                \CastingCases::NumberCasting(Int16,Int16).0._State\ := \CastingCases::NumberCasting(Int16,Int16).0._State_0\;
                \CastingCases::NumberCasting(Int16,Int16).0.a\ := to_signed(0, 16);
                \CastingCases::NumberCasting(Int16,Int16).0.b\ := to_signed(0, 16);
                \CastingCases::NumberCasting(Int16,Int16).0.num\ := to_signed(0, 16);
                \CastingCases::NumberCasting(Int16,Int16).0.binaryOperationResult.0\ := to_signed(0, 16);
                \CastingCases::NumberCasting(Int16,Int16).0.num2\ := to_signed(0, 32);
                \CastingCases::NumberCasting(Int16,Int16).0.binaryOperationResult.1\ := to_signed(0, 32);
                \CastingCases::NumberCasting(Int16,Int16).0.b2\ := to_unsigned(0, 8);
                \CastingCases::NumberCasting(Int16,Int16).0.b3\ := to_signed(0, 8);
                \CastingCases::NumberCasting(Int16,Int16).0.num3\ := to_unsigned(0, 16);
                \CastingCases::NumberCasting(Int16,Int16).0.num4\ := to_signed(0, 64);
                \CastingCases::NumberCasting(Int16,Int16).0.binaryOperationResult.2\ := to_signed(0, 64);
            else 
                case \CastingCases::NumberCasting(Int16,Int16).0._State\ is 
                    when \CastingCases::NumberCasting(Int16,Int16).0._State_0\ => 
                        -- Start state
                        -- Waiting for the start signal.
                        if (\CastingCases::NumberCasting(Int16,Int16).0._Started\ = true) then 
                            \CastingCases::NumberCasting(Int16,Int16).0._State\ := \CastingCases::NumberCasting(Int16,Int16).0._State_2\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \CastingCases::NumberCasting(Int16,Int16).0._State_1\ => 
                        -- Final state
                        -- Signaling finished until Started is pulled back to false, then returning to the start state.
                        if (\CastingCases::NumberCasting(Int16,Int16).0._Started\ = true) then 
                            \CastingCases::NumberCasting(Int16,Int16).0._Finished\ <= true;
                        else 
                            \CastingCases::NumberCasting(Int16,Int16).0._Finished\ <= false;
                            \CastingCases::NumberCasting(Int16,Int16).0._State\ := \CastingCases::NumberCasting(Int16,Int16).0._State_0\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \CastingCases::NumberCasting(Int16,Int16).0._State_2\ => 
                        \CastingCases::NumberCasting(Int16,Int16).0.a\ := \CastingCases::NumberCasting(Int16,Int16).0.a.parameter.In\;
                        \CastingCases::NumberCasting(Int16,Int16).0.b\ := \CastingCases::NumberCasting(Int16,Int16).0.b.parameter.In\;
                        -- The following section was transformed from the .NET statement below:
                        -- short num;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num = (short)((int)(a) * (int)(b));
                        -- 
                        \CastingCases::NumberCasting(Int16,Int16).0.binaryOperationResult.0\ := SmartResize(SmartResize((\CastingCases::NumberCasting(Int16,Int16).0.a\), 32) * SmartResize((\CastingCases::NumberCasting(Int16,Int16).0.b\), 32), 16);
                        \CastingCases::NumberCasting(Int16,Int16).0.num\ := (\CastingCases::NumberCasting(Int16,Int16).0.binaryOperationResult.0\);
                        -- The following section was transformed from the .NET statement below:
                        -- int num2;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num2 = (int)((int)(a) * (int)(b));
                        -- 
                        \CastingCases::NumberCasting(Int16,Int16).0.binaryOperationResult.1\ := SmartResize(SmartResize((\CastingCases::NumberCasting(Int16,Int16).0.a\), 32) * SmartResize((\CastingCases::NumberCasting(Int16,Int16).0.b\), 32), 32);
                        \CastingCases::NumberCasting(Int16,Int16).0.num2\ := (\CastingCases::NumberCasting(Int16,Int16).0.binaryOperationResult.1\);
                        -- The following section was transformed from the .NET statement below:
                        -- byte b2;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- b2 = (byte)a;
                        -- 
                        \CastingCases::NumberCasting(Int16,Int16).0.b2\ := SmartResize(unsigned(\CastingCases::NumberCasting(Int16,Int16).0.a\), 8);
                        -- The following section was transformed from the .NET statement below:
                        -- sbyte b3;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- b3 = (sbyte)a;
                        -- 
                        \CastingCases::NumberCasting(Int16,Int16).0.b3\ := SmartResize(\CastingCases::NumberCasting(Int16,Int16).0.a\, 8);
                        -- The following section was transformed from the .NET statement below:
                        -- ushort num3;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num3 = (ushort)a;
                        -- 
                        \CastingCases::NumberCasting(Int16,Int16).0.num3\ := unsigned(\CastingCases::NumberCasting(Int16,Int16).0.a\);
                        -- The following section was transformed from the .NET statement below:
                        -- long num4;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num4 = (long)((long)((uint)a) * (long)(a));
                        -- 
                        \CastingCases::NumberCasting(Int16,Int16).0._State\ := \CastingCases::NumberCasting(Int16,Int16).0._State_3\;
                        -- Clock cycles needed to complete this state (approximation): 0.8416
                    when \CastingCases::NumberCasting(Int16,Int16).0._State_3\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \CastingCases::NumberCasting(Int16,Int16).0.binaryOperationResult.2\ := SmartResize(signed(SmartResize((ToUnsignedAndExpand(\CastingCases::NumberCasting(Int16,Int16).0.a\, 32)), 64)) * SmartResize((\CastingCases::NumberCasting(Int16,Int16).0.a\), 64), 64);
                        \CastingCases::NumberCasting(Int16,Int16).0.num4\ := (\CastingCases::NumberCasting(Int16,Int16).0.binaryOperationResult.2\);
                        \CastingCases::NumberCasting(Int16,Int16).0._State\ := \CastingCases::NumberCasting(Int16,Int16).0._State_1\;
                        -- Clock cycles needed to complete this state (approximation): 0.7638
                end case;
            end if;
        end if;
    end process;
    -- System.Void Hast.TestInputs.Various.CastingCases::NumberCasting(System.Int16,System.Int16).0 state machine end


    -- System.Void Hast.TestInputs.Various.ConstantsUsingCases+ArrayHolder1::.ctor(System.UInt32[]).0 state machine start
    \ConstantsUsingCases+ArrayHolder1::.ctor(UInt32[]).0._StateMachine\: process (\Clock\) 
        Variable \ConstantsUsingCases+ArrayHolder1::.ctor(UInt32[]).0._State\: \ConstantsUsingCases+ArrayHolder1::.ctor(UInt32[]).0._States\ := \ConstantsUsingCases+ArrayHolder1::.ctor(UInt32[]).0._State_0\;
        Variable \ConstantsUsingCases+ArrayHolder1::.ctor(UInt32[]).0.this\: \Hast.TestInputs.Various.ConstantsUsingCases+ArrayHolder1\;
        Variable \ConstantsUsingCases+ArrayHolder1::.ctor(UInt32[]).0.array\: \unsigned32_Array\(0 to 4) := (others => to_unsigned(0, 32));
    begin 
        if (rising_edge(\Clock\)) then 
            if (\Reset\ = '1') then 
                -- Synchronous reset
                \ConstantsUsingCases+ArrayHolder1::.ctor(UInt32[]).0._Finished\ <= false;
                \ConstantsUsingCases+ArrayHolder1::.ctor(UInt32[]).0.array.parameter.Out\ <= (others => to_unsigned(0, 32));
                \ConstantsUsingCases+ArrayHolder1::.ctor(UInt32[]).0._State\ := \ConstantsUsingCases+ArrayHolder1::.ctor(UInt32[]).0._State_0\;
                \ConstantsUsingCases+ArrayHolder1::.ctor(UInt32[]).0.array\ := (others => to_unsigned(0, 32));
            else 
                case \ConstantsUsingCases+ArrayHolder1::.ctor(UInt32[]).0._State\ is 
                    when \ConstantsUsingCases+ArrayHolder1::.ctor(UInt32[]).0._State_0\ => 
                        -- Start state
                        -- Waiting for the start signal.
                        if (\ConstantsUsingCases+ArrayHolder1::.ctor(UInt32[]).0._Started\ = true) then 
                            \ConstantsUsingCases+ArrayHolder1::.ctor(UInt32[]).0._State\ := \ConstantsUsingCases+ArrayHolder1::.ctor(UInt32[]).0._State_2\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \ConstantsUsingCases+ArrayHolder1::.ctor(UInt32[]).0._State_1\ => 
                        -- Final state
                        -- Signaling finished until Started is pulled back to false, then returning to the start state.
                        if (\ConstantsUsingCases+ArrayHolder1::.ctor(UInt32[]).0._Started\ = true) then 
                            \ConstantsUsingCases+ArrayHolder1::.ctor(UInt32[]).0._Finished\ <= true;
                        else 
                            \ConstantsUsingCases+ArrayHolder1::.ctor(UInt32[]).0._Finished\ <= false;
                            \ConstantsUsingCases+ArrayHolder1::.ctor(UInt32[]).0._State\ := \ConstantsUsingCases+ArrayHolder1::.ctor(UInt32[]).0._State_0\;
                        end if;
                        -- Writing back out-flowing parameters so any changes made in this state machine will be reflected in the invoking one too.
                        \ConstantsUsingCases+ArrayHolder1::.ctor(UInt32[]).0.this.parameter.Out\ <= \ConstantsUsingCases+ArrayHolder1::.ctor(UInt32[]).0.this\;
                        \ConstantsUsingCases+ArrayHolder1::.ctor(UInt32[]).0.array.parameter.Out\ <= \ConstantsUsingCases+ArrayHolder1::.ctor(UInt32[]).0.array\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \ConstantsUsingCases+ArrayHolder1::.ctor(UInt32[]).0._State_2\ => 
                        \ConstantsUsingCases+ArrayHolder1::.ctor(UInt32[]).0.this\ := \ConstantsUsingCases+ArrayHolder1::.ctor(UInt32[]).0.this.parameter.In\;
                        \ConstantsUsingCases+ArrayHolder1::.ctor(UInt32[]).0.array\ := \ConstantsUsingCases+ArrayHolder1::.ctor(UInt32[]).0.array.parameter.In\;
                        -- The following section was transformed from the .NET statement below:
                        -- @this.ArrayLength = 5u;
                        -- 
                        \ConstantsUsingCases+ArrayHolder1::.ctor(UInt32[]).0.this\.\ArrayLength\ := to_unsigned(5, 32);
                        -- The following section was transformed from the .NET statement below:
                        -- @this.ArrayLengthCopy = 160u;
                        -- 
                        \ConstantsUsingCases+ArrayHolder1::.ctor(UInt32[]).0.this\.\ArrayLengthCopy\ := to_unsigned(160, 32);
                        -- The following section was transformed from the .NET statement below:
                        -- @this.NonSubstitutableArrayLengthCopy = 160u;
                        -- 
                        \ConstantsUsingCases+ArrayHolder1::.ctor(UInt32[]).0.this\.\NonSubstitutableArrayLengthCopy\ := to_unsigned(160, 32);
                        -- The following section was transformed from the .NET statement below:
                        -- @this.Array = new uint[5u];
                        -- 
                        \ConstantsUsingCases+ArrayHolder1::.ctor(UInt32[]).0.this\.\Array\ := (others => to_unsigned(0, 32));
                        \ConstantsUsingCases+ArrayHolder1::.ctor(UInt32[]).0._State\ := \ConstantsUsingCases+ArrayHolder1::.ctor(UInt32[]).0._State_1\;
                        -- Clock cycles needed to complete this state (approximation): 0
                end case;
            end if;
        end if;
    end process;
    -- System.Void Hast.TestInputs.Various.ConstantsUsingCases+ArrayHolder1::.ctor(System.UInt32[]).0 state machine end


    -- System.Void Hast.TestInputs.Various.ConstantsUsingCases+ArrayHolder1::.ctor(System.UInt32).0 state machine start
    \ConstantsUsingCases+ArrayHolder1::.ctor(UInt32).0._StateMachine\: process (\Clock\) 
        Variable \ConstantsUsingCases+ArrayHolder1::.ctor(UInt32).0._State\: \ConstantsUsingCases+ArrayHolder1::.ctor(UInt32).0._States\ := \ConstantsUsingCases+ArrayHolder1::.ctor(UInt32).0._State_0\;
        Variable \ConstantsUsingCases+ArrayHolder1::.ctor(UInt32).0.this\: \Hast.TestInputs.Various.ConstantsUsingCases+ArrayHolder1\;
        Variable \ConstantsUsingCases+ArrayHolder1::.ctor(UInt32).0.size\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \ConstantsUsingCases+ArrayHolder1::.ctor(UInt32).0.conditional70170e241f5510ef4ed8a9bf0fb77c5768935a514441e2b925ceace0f704a562\: signed(31 downto 0) := to_signed(0, 32);
    begin 
        if (rising_edge(\Clock\)) then 
            if (\Reset\ = '1') then 
                -- Synchronous reset
                \ConstantsUsingCases+ArrayHolder1::.ctor(UInt32).0._Finished\ <= false;
                \ConstantsUsingCases+ArrayHolder1::.ctor(UInt32).0._State\ := \ConstantsUsingCases+ArrayHolder1::.ctor(UInt32).0._State_0\;
                \ConstantsUsingCases+ArrayHolder1::.ctor(UInt32).0.size\ := to_unsigned(0, 32);
                \ConstantsUsingCases+ArrayHolder1::.ctor(UInt32).0.conditional70170e241f5510ef4ed8a9bf0fb77c5768935a514441e2b925ceace0f704a562\ := to_signed(0, 32);
            else 
                case \ConstantsUsingCases+ArrayHolder1::.ctor(UInt32).0._State\ is 
                    when \ConstantsUsingCases+ArrayHolder1::.ctor(UInt32).0._State_0\ => 
                        -- Start state
                        -- Waiting for the start signal.
                        if (\ConstantsUsingCases+ArrayHolder1::.ctor(UInt32).0._Started\ = true) then 
                            \ConstantsUsingCases+ArrayHolder1::.ctor(UInt32).0._State\ := \ConstantsUsingCases+ArrayHolder1::.ctor(UInt32).0._State_2\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \ConstantsUsingCases+ArrayHolder1::.ctor(UInt32).0._State_1\ => 
                        -- Final state
                        -- Signaling finished until Started is pulled back to false, then returning to the start state.
                        if (\ConstantsUsingCases+ArrayHolder1::.ctor(UInt32).0._Started\ = true) then 
                            \ConstantsUsingCases+ArrayHolder1::.ctor(UInt32).0._Finished\ <= true;
                        else 
                            \ConstantsUsingCases+ArrayHolder1::.ctor(UInt32).0._Finished\ <= false;
                            \ConstantsUsingCases+ArrayHolder1::.ctor(UInt32).0._State\ := \ConstantsUsingCases+ArrayHolder1::.ctor(UInt32).0._State_0\;
                        end if;
                        -- Writing back out-flowing parameters so any changes made in this state machine will be reflected in the invoking one too.
                        \ConstantsUsingCases+ArrayHolder1::.ctor(UInt32).0.this.parameter.Out\ <= \ConstantsUsingCases+ArrayHolder1::.ctor(UInt32).0.this\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \ConstantsUsingCases+ArrayHolder1::.ctor(UInt32).0._State_2\ => 
                        \ConstantsUsingCases+ArrayHolder1::.ctor(UInt32).0.this\ := \ConstantsUsingCases+ArrayHolder1::.ctor(UInt32).0.this.parameter.In\;
                        \ConstantsUsingCases+ArrayHolder1::.ctor(UInt32).0.size\ := \ConstantsUsingCases+ArrayHolder1::.ctor(UInt32).0.size.parameter.In\;
                        -- The following section was transformed from the .NET statement below:
                        -- int conditional70170e241f5510ef4ed8a9bf0fb77c5768935a514441e2b925ceace0f704a562;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- conditional70170e241f5510ef4ed8a9bf0fb77c5768935a514441e2b925ceace0f704a562 = 5;
                        -- 
                        \ConstantsUsingCases+ArrayHolder1::.ctor(UInt32).0.conditional70170e241f5510ef4ed8a9bf0fb77c5768935a514441e2b925ceace0f704a562\ := to_signed(5, 32);
                        -- The following section was transformed from the .NET statement below:
                        -- @this.ArrayLength = 5u;
                        -- 
                        \ConstantsUsingCases+ArrayHolder1::.ctor(UInt32).0.this\.\ArrayLength\ := to_unsigned(5, 32);
                        -- The following section was transformed from the .NET statement below:
                        -- @this.ArrayLengthCopy = 160u;
                        -- 
                        \ConstantsUsingCases+ArrayHolder1::.ctor(UInt32).0.this\.\ArrayLengthCopy\ := to_unsigned(160, 32);
                        -- The following section was transformed from the .NET statement below:
                        -- @this.NonSubstitutableArrayLengthCopy = 160u;
                        -- 
                        \ConstantsUsingCases+ArrayHolder1::.ctor(UInt32).0.this\.\NonSubstitutableArrayLengthCopy\ := to_unsigned(160, 32);
                        -- The following section was transformed from the .NET statement below:
                        -- @this.Array = new uint[5u];
                        -- 
                        \ConstantsUsingCases+ArrayHolder1::.ctor(UInt32).0.this\.\Array\ := (others => to_unsigned(0, 32));
                        \ConstantsUsingCases+ArrayHolder1::.ctor(UInt32).0._State\ := \ConstantsUsingCases+ArrayHolder1::.ctor(UInt32).0._State_1\;
                        -- Clock cycles needed to complete this state (approximation): 0
                end case;
            end if;
        end if;
    end process;
    -- System.Void Hast.TestInputs.Various.ConstantsUsingCases+ArrayHolder1::.ctor(System.UInt32).0 state machine end


    -- System.Void Hast.TestInputs.Various.ConstantsUsingCases+ArrayHolder1::.ctor(Hast.TestInputs.Various.ConstantsUsingCases+ArrayHolder1).0 state machine start
    \ConstantsUsingCases+ArrayHolder1::.ctor(ConstantsUsingCases+ArrayHolder1).0._StateMachine\: process (\Clock\) 
        Variable \ConstantsUsingCases+ArrayHolder1::.ctor(ConstantsUsingCases+ArrayHolder1).0._State\: \ConstantsUsingCases+ArrayHolder1::.ctor(ConstantsUsingCases+ArrayHolder1).0._States\ := \ConstantsUsingCases+ArrayHolder1::.ctor(ConstantsUsingCases+ArrayHolder1).0._State_0\;
        Variable \ConstantsUsingCases+ArrayHolder1::.ctor(ConstantsUsingCases+ArrayHolder1).0.this\: \Hast.TestInputs.Various.ConstantsUsingCases+ArrayHolder1\;
        Variable \ConstantsUsingCases+ArrayHolder1::.ctor(ConstantsUsingCases+ArrayHolder1).0.previous\: \Hast.TestInputs.Various.ConstantsUsingCases+ArrayHolder1\;
    begin 
        if (rising_edge(\Clock\)) then 
            if (\Reset\ = '1') then 
                -- Synchronous reset
                \ConstantsUsingCases+ArrayHolder1::.ctor(ConstantsUsingCases+ArrayHolder1).0._Finished\ <= false;
                \ConstantsUsingCases+ArrayHolder1::.ctor(ConstantsUsingCases+ArrayHolder1).0.ConstantsUsingCases+ArrayHolder1::.ctor(UInt32[]).array.parameter.Out.0\ <= (others => to_unsigned(0, 32));
                \ConstantsUsingCases+ArrayHolder1::.ctor(ConstantsUsingCases+ArrayHolder1).0.ConstantsUsingCases+ArrayHolder1::.ctor(UInt32[])._Started.0\ <= false;
                \ConstantsUsingCases+ArrayHolder1::.ctor(ConstantsUsingCases+ArrayHolder1).0._State\ := \ConstantsUsingCases+ArrayHolder1::.ctor(ConstantsUsingCases+ArrayHolder1).0._State_0\;
            else 
                case \ConstantsUsingCases+ArrayHolder1::.ctor(ConstantsUsingCases+ArrayHolder1).0._State\ is 
                    when \ConstantsUsingCases+ArrayHolder1::.ctor(ConstantsUsingCases+ArrayHolder1).0._State_0\ => 
                        -- Start state
                        -- Waiting for the start signal.
                        if (\ConstantsUsingCases+ArrayHolder1::.ctor(ConstantsUsingCases+ArrayHolder1).0._Started\ = true) then 
                            \ConstantsUsingCases+ArrayHolder1::.ctor(ConstantsUsingCases+ArrayHolder1).0._State\ := \ConstantsUsingCases+ArrayHolder1::.ctor(ConstantsUsingCases+ArrayHolder1).0._State_2\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \ConstantsUsingCases+ArrayHolder1::.ctor(ConstantsUsingCases+ArrayHolder1).0._State_1\ => 
                        -- Final state
                        -- Signaling finished until Started is pulled back to false, then returning to the start state.
                        if (\ConstantsUsingCases+ArrayHolder1::.ctor(ConstantsUsingCases+ArrayHolder1).0._Started\ = true) then 
                            \ConstantsUsingCases+ArrayHolder1::.ctor(ConstantsUsingCases+ArrayHolder1).0._Finished\ <= true;
                        else 
                            \ConstantsUsingCases+ArrayHolder1::.ctor(ConstantsUsingCases+ArrayHolder1).0._Finished\ <= false;
                            \ConstantsUsingCases+ArrayHolder1::.ctor(ConstantsUsingCases+ArrayHolder1).0._State\ := \ConstantsUsingCases+ArrayHolder1::.ctor(ConstantsUsingCases+ArrayHolder1).0._State_0\;
                        end if;
                        -- Writing back out-flowing parameters so any changes made in this state machine will be reflected in the invoking one too.
                        \ConstantsUsingCases+ArrayHolder1::.ctor(ConstantsUsingCases+ArrayHolder1).0.this.parameter.Out\ <= \ConstantsUsingCases+ArrayHolder1::.ctor(ConstantsUsingCases+ArrayHolder1).0.this\;
                        \ConstantsUsingCases+ArrayHolder1::.ctor(ConstantsUsingCases+ArrayHolder1).0.previous.parameter.Out\ <= \ConstantsUsingCases+ArrayHolder1::.ctor(ConstantsUsingCases+ArrayHolder1).0.previous\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \ConstantsUsingCases+ArrayHolder1::.ctor(ConstantsUsingCases+ArrayHolder1).0._State_2\ => 
                        \ConstantsUsingCases+ArrayHolder1::.ctor(ConstantsUsingCases+ArrayHolder1).0.this\ := \ConstantsUsingCases+ArrayHolder1::.ctor(ConstantsUsingCases+ArrayHolder1).0.this.parameter.In\;
                        \ConstantsUsingCases+ArrayHolder1::.ctor(ConstantsUsingCases+ArrayHolder1).0.previous\ := \ConstantsUsingCases+ArrayHolder1::.ctor(ConstantsUsingCases+ArrayHolder1).0.previous.parameter.In\;
                        -- The following section was transformed from the .NET statement below:
                        -- Hast.TestInputs.Various.ConstantsUsingCases+ArrayHolder1.ArrayHolder1 (@this, previous.Array);
                        -- 
                        -- Starting state machine invocation for the following method: System.Void Hast.TestInputs.Various.ConstantsUsingCases+ArrayHolder1::.ctor(System.UInt32[])
                        \ConstantsUsingCases+ArrayHolder1::.ctor(ConstantsUsingCases+ArrayHolder1).0.ConstantsUsingCases+ArrayHolder1::.ctor(UInt32[]).this.parameter.Out.0\ <= \ConstantsUsingCases+ArrayHolder1::.ctor(ConstantsUsingCases+ArrayHolder1).0.this\;
                        \ConstantsUsingCases+ArrayHolder1::.ctor(ConstantsUsingCases+ArrayHolder1).0.ConstantsUsingCases+ArrayHolder1::.ctor(UInt32[]).array.parameter.Out.0\ <= \ConstantsUsingCases+ArrayHolder1::.ctor(ConstantsUsingCases+ArrayHolder1).0.previous\.\Array\;
                        \ConstantsUsingCases+ArrayHolder1::.ctor(ConstantsUsingCases+ArrayHolder1).0.ConstantsUsingCases+ArrayHolder1::.ctor(UInt32[])._Started.0\ <= true;
                        \ConstantsUsingCases+ArrayHolder1::.ctor(ConstantsUsingCases+ArrayHolder1).0._State\ := \ConstantsUsingCases+ArrayHolder1::.ctor(ConstantsUsingCases+ArrayHolder1).0._State_3\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \ConstantsUsingCases+ArrayHolder1::.ctor(ConstantsUsingCases+ArrayHolder1).0._State_3\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Void Hast.TestInputs.Various.ConstantsUsingCases+ArrayHolder1::.ctor(System.UInt32[])
                        if (\ConstantsUsingCases+ArrayHolder1::.ctor(ConstantsUsingCases+ArrayHolder1).0.ConstantsUsingCases+ArrayHolder1::.ctor(UInt32[])._Started.0\ = \ConstantsUsingCases+ArrayHolder1::.ctor(ConstantsUsingCases+ArrayHolder1).0.ConstantsUsingCases+ArrayHolder1::.ctor(UInt32[])._Finished.0\) then 
                            \ConstantsUsingCases+ArrayHolder1::.ctor(ConstantsUsingCases+ArrayHolder1).0.ConstantsUsingCases+ArrayHolder1::.ctor(UInt32[])._Started.0\ <= false;
                            \ConstantsUsingCases+ArrayHolder1::.ctor(ConstantsUsingCases+ArrayHolder1).0.this\ := \ConstantsUsingCases+ArrayHolder1::.ctor(ConstantsUsingCases+ArrayHolder1).0.ConstantsUsingCases+ArrayHolder1::.ctor(UInt32[]).this.parameter.In.0\;
                            \ConstantsUsingCases+ArrayHolder1::.ctor(ConstantsUsingCases+ArrayHolder1).0.previous\.\Array\ := \ConstantsUsingCases+ArrayHolder1::.ctor(ConstantsUsingCases+ArrayHolder1).0.ConstantsUsingCases+ArrayHolder1::.ctor(UInt32[]).array.parameter.In.0\;
                            \ConstantsUsingCases+ArrayHolder1::.ctor(ConstantsUsingCases+ArrayHolder1).0._State\ := \ConstantsUsingCases+ArrayHolder1::.ctor(ConstantsUsingCases+ArrayHolder1).0._State_1\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                end case;
            end if;
        end if;
    end process;
    -- System.Void Hast.TestInputs.Various.ConstantsUsingCases+ArrayHolder1::.ctor(Hast.TestInputs.Various.ConstantsUsingCases+ArrayHolder1).0 state machine end


    -- System.Void Hast.TestInputs.Various.ConstantsUsingCases+ArrayHolder2::.ctor(System.UInt32).0 state machine start
    \ConstantsUsingCases+ArrayHolder2::.ctor(UInt32).0._StateMachine\: process (\Clock\) 
        Variable \ConstantsUsingCases+ArrayHolder2::.ctor(UInt32).0._State\: \ConstantsUsingCases+ArrayHolder2::.ctor(UInt32).0._States\ := \ConstantsUsingCases+ArrayHolder2::.ctor(UInt32).0._State_0\;
        Variable \ConstantsUsingCases+ArrayHolder2::.ctor(UInt32).0.this\: \Hast.TestInputs.Various.ConstantsUsingCases+ArrayHolder2\;
        Variable \ConstantsUsingCases+ArrayHolder2::.ctor(UInt32).0.size\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \ConstantsUsingCases+ArrayHolder2::.ctor(UInt32).0.conditional48525df7142971ee66803742ddbd3e65fa3d8a14a7114ccf45d294f61ab372c3\: signed(31 downto 0) := to_signed(0, 32);
        Variable \ConstantsUsingCases+ArrayHolder2::.ctor(UInt32).0.binaryOperationResult.0\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \ConstantsUsingCases+ArrayHolder2::.ctor(UInt32).0.binaryOperationResult.1\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \ConstantsUsingCases+ArrayHolder2::.ctor(UInt32).0.binaryOperationResult.2\: signed(63 downto 0) := to_signed(0, 64);
        Variable \ConstantsUsingCases+ArrayHolder2::.ctor(UInt32).0.binaryOperationResult.3\: boolean := false;
        Variable \ConstantsUsingCases+ArrayHolder2::.ctor(UInt32).0.binaryOperationResult.4\: signed(31 downto 0) := to_signed(0, 32);
        Variable \ConstantsUsingCases+ArrayHolder2::.ctor(UInt32).0.binaryOperationResult.5\: unsigned(31 downto 0) := to_unsigned(0, 32);
    begin 
        if (rising_edge(\Clock\)) then 
            if (\Reset\ = '1') then 
                -- Synchronous reset
                \ConstantsUsingCases+ArrayHolder2::.ctor(UInt32).0._Finished\ <= false;
                \ConstantsUsingCases+ArrayHolder2::.ctor(UInt32).0._State\ := \ConstantsUsingCases+ArrayHolder2::.ctor(UInt32).0._State_0\;
                \ConstantsUsingCases+ArrayHolder2::.ctor(UInt32).0.size\ := to_unsigned(0, 32);
                \ConstantsUsingCases+ArrayHolder2::.ctor(UInt32).0.conditional48525df7142971ee66803742ddbd3e65fa3d8a14a7114ccf45d294f61ab372c3\ := to_signed(0, 32);
                \ConstantsUsingCases+ArrayHolder2::.ctor(UInt32).0.binaryOperationResult.0\ := to_unsigned(0, 32);
                \ConstantsUsingCases+ArrayHolder2::.ctor(UInt32).0.binaryOperationResult.1\ := to_unsigned(0, 32);
                \ConstantsUsingCases+ArrayHolder2::.ctor(UInt32).0.binaryOperationResult.2\ := to_signed(0, 64);
                \ConstantsUsingCases+ArrayHolder2::.ctor(UInt32).0.binaryOperationResult.3\ := false;
                \ConstantsUsingCases+ArrayHolder2::.ctor(UInt32).0.binaryOperationResult.4\ := to_signed(0, 32);
                \ConstantsUsingCases+ArrayHolder2::.ctor(UInt32).0.binaryOperationResult.5\ := to_unsigned(0, 32);
            else 
                case \ConstantsUsingCases+ArrayHolder2::.ctor(UInt32).0._State\ is 
                    when \ConstantsUsingCases+ArrayHolder2::.ctor(UInt32).0._State_0\ => 
                        -- Start state
                        -- Waiting for the start signal.
                        if (\ConstantsUsingCases+ArrayHolder2::.ctor(UInt32).0._Started\ = true) then 
                            \ConstantsUsingCases+ArrayHolder2::.ctor(UInt32).0._State\ := \ConstantsUsingCases+ArrayHolder2::.ctor(UInt32).0._State_2\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \ConstantsUsingCases+ArrayHolder2::.ctor(UInt32).0._State_1\ => 
                        -- Final state
                        -- Signaling finished until Started is pulled back to false, then returning to the start state.
                        if (\ConstantsUsingCases+ArrayHolder2::.ctor(UInt32).0._Started\ = true) then 
                            \ConstantsUsingCases+ArrayHolder2::.ctor(UInt32).0._Finished\ <= true;
                        else 
                            \ConstantsUsingCases+ArrayHolder2::.ctor(UInt32).0._Finished\ <= false;
                            \ConstantsUsingCases+ArrayHolder2::.ctor(UInt32).0._State\ := \ConstantsUsingCases+ArrayHolder2::.ctor(UInt32).0._State_0\;
                        end if;
                        -- Writing back out-flowing parameters so any changes made in this state machine will be reflected in the invoking one too.
                        \ConstantsUsingCases+ArrayHolder2::.ctor(UInt32).0.this.parameter.Out\ <= \ConstantsUsingCases+ArrayHolder2::.ctor(UInt32).0.this\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \ConstantsUsingCases+ArrayHolder2::.ctor(UInt32).0._State_2\ => 
                        \ConstantsUsingCases+ArrayHolder2::.ctor(UInt32).0.this\ := \ConstantsUsingCases+ArrayHolder2::.ctor(UInt32).0.this.parameter.In\;
                        \ConstantsUsingCases+ArrayHolder2::.ctor(UInt32).0.size\ := \ConstantsUsingCases+ArrayHolder2::.ctor(UInt32).0.size.parameter.In\;
                        -- The following section was transformed from the .NET statement below:
                        -- int conditional48525df7142971ee66803742ddbd3e65fa3d8a14a7114ccf45d294f61ab372c3;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- if (((long)(size - size / 32u * 32u) != 0L)) {
                        -- 	conditional48525df7142971ee66803742ddbd3e65fa3d8a14a7114ccf45d294f61ab372c3 = 5;
                        -- } else {
                        -- 	conditional48525df7142971ee66803742ddbd3e65fa3d8a14a7114ccf45d294f61ab372c3 = 0;
                        -- }
                        -- 
                        \ConstantsUsingCases+ArrayHolder2::.ctor(UInt32).0.binaryOperationResult.0\ := \ConstantsUsingCases+ArrayHolder2::.ctor(UInt32).0.size\ / to_unsigned(32, 32);
                        \ConstantsUsingCases+ArrayHolder2::.ctor(UInt32).0.binaryOperationResult.1\ := SmartResize(\ConstantsUsingCases+ArrayHolder2::.ctor(UInt32).0.binaryOperationResult.0\ * to_unsigned(32, 32), 32);
                        \ConstantsUsingCases+ArrayHolder2::.ctor(UInt32).0.binaryOperationResult.2\ := signed(SmartResize(\ConstantsUsingCases+ArrayHolder2::.ctor(UInt32).0.size\ - \ConstantsUsingCases+ArrayHolder2::.ctor(UInt32).0.binaryOperationResult.1\, 64));
                        \ConstantsUsingCases+ArrayHolder2::.ctor(UInt32).0.binaryOperationResult.3\ := (\ConstantsUsingCases+ArrayHolder2::.ctor(UInt32).0.binaryOperationResult.2\) /= to_signed(0, 64);

                        -- This if-else was transformed from a .NET if-else. It spans across multiple states:
                        --     * The true branch starts in state \ConstantsUsingCases+ArrayHolder2::.ctor(UInt32).0._State_4\ and ends in state \ConstantsUsingCases+ArrayHolder2::.ctor(UInt32).0._State_4\.
                        --     * The false branch starts in state \ConstantsUsingCases+ArrayHolder2::.ctor(UInt32).0._State_5\ and ends in state \ConstantsUsingCases+ArrayHolder2::.ctor(UInt32).0._State_5\.
                        --     * Execution after either branch will continue in the following state: \ConstantsUsingCases+ArrayHolder2::.ctor(UInt32).0._State_3\.

                        if ((\ConstantsUsingCases+ArrayHolder2::.ctor(UInt32).0.binaryOperationResult.3\)) then 
                            \ConstantsUsingCases+ArrayHolder2::.ctor(UInt32).0._State\ := \ConstantsUsingCases+ArrayHolder2::.ctor(UInt32).0._State_4\;
                        else 
                            \ConstantsUsingCases+ArrayHolder2::.ctor(UInt32).0._State\ := \ConstantsUsingCases+ArrayHolder2::.ctor(UInt32).0._State_5\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.8539
                    when \ConstantsUsingCases+ArrayHolder2::.ctor(UInt32).0._State_3\ => 
                        -- State after the if-else which was started in state \ConstantsUsingCases+ArrayHolder2::.ctor(UInt32).0._State_2\.
                        -- The following section was transformed from the .NET statement below:
                        -- @this.ArrayLength = (uint)((int)(size >> 5) + (conditional48525df7142971ee66803742ddbd3e65fa3d8a14a7114ccf45d294f61ab372c3));
                        -- 
                        \ConstantsUsingCases+ArrayHolder2::.ctor(UInt32).0.binaryOperationResult.4\ := signed(shift_right(\ConstantsUsingCases+ArrayHolder2::.ctor(UInt32).0.size\, to_integer(unsigned(SmartResize(to_signed(5, 32), 5) and "11111"))));
                        \ConstantsUsingCases+ArrayHolder2::.ctor(UInt32).0.binaryOperationResult.5\ := SmartResize(unsigned((\ConstantsUsingCases+ArrayHolder2::.ctor(UInt32).0.binaryOperationResult.4\) + (\ConstantsUsingCases+ArrayHolder2::.ctor(UInt32).0.conditional48525df7142971ee66803742ddbd3e65fa3d8a14a7114ccf45d294f61ab372c3\)), 32);
                        \ConstantsUsingCases+ArrayHolder2::.ctor(UInt32).0.this\.\ArrayLength\ := (\ConstantsUsingCases+ArrayHolder2::.ctor(UInt32).0.binaryOperationResult.5\);
                        \ConstantsUsingCases+ArrayHolder2::.ctor(UInt32).0._State\ := \ConstantsUsingCases+ArrayHolder2::.ctor(UInt32).0._State_1\;
                        -- Clock cycles needed to complete this state (approximation): 0.6395
                    when \ConstantsUsingCases+ArrayHolder2::.ctor(UInt32).0._State_4\ => 
                        -- True branch of the if-else started in state \ConstantsUsingCases+ArrayHolder2::.ctor(UInt32).0._State_2\.
                        -- The following section was transformed from the .NET statement below:
                        -- {
                        -- 	conditional48525df7142971ee66803742ddbd3e65fa3d8a14a7114ccf45d294f61ab372c3 = 5;
                        -- }
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- conditional48525df7142971ee66803742ddbd3e65fa3d8a14a7114ccf45d294f61ab372c3 = 5;
                        -- 
                        \ConstantsUsingCases+ArrayHolder2::.ctor(UInt32).0.conditional48525df7142971ee66803742ddbd3e65fa3d8a14a7114ccf45d294f61ab372c3\ := to_signed(5, 32);
                        -- Going to the state after the if-else which was started in state \ConstantsUsingCases+ArrayHolder2::.ctor(UInt32).0._State_2\.
                        if (\ConstantsUsingCases+ArrayHolder2::.ctor(UInt32).0._State\ = \ConstantsUsingCases+ArrayHolder2::.ctor(UInt32).0._State_4\) then 
                            \ConstantsUsingCases+ArrayHolder2::.ctor(UInt32).0._State\ := \ConstantsUsingCases+ArrayHolder2::.ctor(UInt32).0._State_3\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \ConstantsUsingCases+ArrayHolder2::.ctor(UInt32).0._State_5\ => 
                        -- False branch of the if-else started in state \ConstantsUsingCases+ArrayHolder2::.ctor(UInt32).0._State_2\.
                        -- The following section was transformed from the .NET statement below:
                        -- {
                        -- 	conditional48525df7142971ee66803742ddbd3e65fa3d8a14a7114ccf45d294f61ab372c3 = 0;
                        -- }
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- conditional48525df7142971ee66803742ddbd3e65fa3d8a14a7114ccf45d294f61ab372c3 = 0;
                        -- 
                        \ConstantsUsingCases+ArrayHolder2::.ctor(UInt32).0.conditional48525df7142971ee66803742ddbd3e65fa3d8a14a7114ccf45d294f61ab372c3\ := to_signed(0, 32);
                        -- Going to the state after the if-else which was started in state \ConstantsUsingCases+ArrayHolder2::.ctor(UInt32).0._State_2\.
                        if (\ConstantsUsingCases+ArrayHolder2::.ctor(UInt32).0._State\ = \ConstantsUsingCases+ArrayHolder2::.ctor(UInt32).0._State_5\) then 
                            \ConstantsUsingCases+ArrayHolder2::.ctor(UInt32).0._State\ := \ConstantsUsingCases+ArrayHolder2::.ctor(UInt32).0._State_3\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                end case;
            end if;
        end if;
    end process;
    -- System.Void Hast.TestInputs.Various.ConstantsUsingCases+ArrayHolder2::.ctor(System.UInt32).0 state machine end


    -- System.Void Hast.TestInputs.Various.ConstantsUsingCases::ConstantValuedVariables(System.Int32).0 state machine start
    \ConstantsUsingCases::ConstantValuedVariables(Int32).0._StateMachine\: process (\Clock\) 
        Variable \ConstantsUsingCases::ConstantValuedVariables(Int32).0._State\: \ConstantsUsingCases::ConstantValuedVariables(Int32).0._States\ := \ConstantsUsingCases::ConstantValuedVariables(Int32).0._State_0\;
        Variable \ConstantsUsingCases::ConstantValuedVariables(Int32).0.input\: signed(31 downto 0) := to_signed(0, 32);
        Variable \ConstantsUsingCases::ConstantValuedVariables(Int32).0.num\: signed(31 downto 0) := to_signed(0, 32);
        Variable \ConstantsUsingCases::ConstantValuedVariables(Int32).0.num2\: signed(31 downto 0) := to_signed(0, 32);
        Variable \ConstantsUsingCases::ConstantValuedVariables(Int32).0.num3\: signed(31 downto 0) := to_signed(0, 32);
        Variable \ConstantsUsingCases::ConstantValuedVariables(Int32).0.num4\: signed(31 downto 0) := to_signed(0, 32);
        Variable \ConstantsUsingCases::ConstantValuedVariables(Int32).0.binaryOperationResult.0\: signed(31 downto 0) := to_signed(0, 32);
        Variable \ConstantsUsingCases::ConstantValuedVariables(Int32).0.array\: \signed32_Array\(0 to 36) := (others => to_signed(0, 32));
        Variable \ConstantsUsingCases::ConstantValuedVariables(Int32).0.num5\: signed(31 downto 0) := to_signed(0, 32);
        Variable \ConstantsUsingCases::ConstantValuedVariables(Int32).0.binaryOperationResult.1\: boolean := false;
        Variable \ConstantsUsingCases::ConstantValuedVariables(Int32).0.num6\: signed(31 downto 0) := to_signed(0, 32);
    begin 
        if (rising_edge(\Clock\)) then 
            if (\Reset\ = '1') then 
                -- Synchronous reset
                \ConstantsUsingCases::ConstantValuedVariables(Int32).0._Finished\ <= false;
                \ConstantsUsingCases::ConstantValuedVariables(Int32).0._State\ := \ConstantsUsingCases::ConstantValuedVariables(Int32).0._State_0\;
                \ConstantsUsingCases::ConstantValuedVariables(Int32).0.input\ := to_signed(0, 32);
                \ConstantsUsingCases::ConstantValuedVariables(Int32).0.num\ := to_signed(0, 32);
                \ConstantsUsingCases::ConstantValuedVariables(Int32).0.num2\ := to_signed(0, 32);
                \ConstantsUsingCases::ConstantValuedVariables(Int32).0.num3\ := to_signed(0, 32);
                \ConstantsUsingCases::ConstantValuedVariables(Int32).0.num4\ := to_signed(0, 32);
                \ConstantsUsingCases::ConstantValuedVariables(Int32).0.binaryOperationResult.0\ := to_signed(0, 32);
                \ConstantsUsingCases::ConstantValuedVariables(Int32).0.array\ := (others => to_signed(0, 32));
                \ConstantsUsingCases::ConstantValuedVariables(Int32).0.num5\ := to_signed(0, 32);
                \ConstantsUsingCases::ConstantValuedVariables(Int32).0.binaryOperationResult.1\ := false;
                \ConstantsUsingCases::ConstantValuedVariables(Int32).0.num6\ := to_signed(0, 32);
            else 
                case \ConstantsUsingCases::ConstantValuedVariables(Int32).0._State\ is 
                    when \ConstantsUsingCases::ConstantValuedVariables(Int32).0._State_0\ => 
                        -- Start state
                        -- Waiting for the start signal.
                        if (\ConstantsUsingCases::ConstantValuedVariables(Int32).0._Started\ = true) then 
                            \ConstantsUsingCases::ConstantValuedVariables(Int32).0._State\ := \ConstantsUsingCases::ConstantValuedVariables(Int32).0._State_2\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \ConstantsUsingCases::ConstantValuedVariables(Int32).0._State_1\ => 
                        -- Final state
                        -- Signaling finished until Started is pulled back to false, then returning to the start state.
                        if (\ConstantsUsingCases::ConstantValuedVariables(Int32).0._Started\ = true) then 
                            \ConstantsUsingCases::ConstantValuedVariables(Int32).0._Finished\ <= true;
                        else 
                            \ConstantsUsingCases::ConstantValuedVariables(Int32).0._Finished\ <= false;
                            \ConstantsUsingCases::ConstantValuedVariables(Int32).0._State\ := \ConstantsUsingCases::ConstantValuedVariables(Int32).0._State_0\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \ConstantsUsingCases::ConstantValuedVariables(Int32).0._State_2\ => 
                        \ConstantsUsingCases::ConstantValuedVariables(Int32).0.input\ := \ConstantsUsingCases::ConstantValuedVariables(Int32).0.input.parameter.In\;
                        -- The following section was transformed from the .NET statement below:
                        -- int num;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num = 4;
                        -- 
                        \ConstantsUsingCases::ConstantValuedVariables(Int32).0.num\ := to_signed(4, 32);
                        -- The following section was transformed from the .NET statement below:
                        -- int num2;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num2 = 36;
                        -- 
                        \ConstantsUsingCases::ConstantValuedVariables(Int32).0.num2\ := to_signed(36, 32);
                        -- The following section was transformed from the .NET statement below:
                        -- num2 = 37;
                        -- 
                        \ConstantsUsingCases::ConstantValuedVariables(Int32).0.num2\ := to_signed(37, 32);
                        -- The following section was transformed from the .NET statement below:
                        -- int num3;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num3 = 148;
                        -- 
                        \ConstantsUsingCases::ConstantValuedVariables(Int32).0.num3\ := to_signed(148, 32);
                        -- The following section was transformed from the .NET statement below:
                        -- int num4;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num4 = 8;
                        -- 
                        \ConstantsUsingCases::ConstantValuedVariables(Int32).0.num4\ := to_signed(8, 32);
                        -- The following section was transformed from the .NET statement below:
                        -- num4 = 148 + input;
                        -- 
                        \ConstantsUsingCases::ConstantValuedVariables(Int32).0.binaryOperationResult.0\ := to_signed(148, 32) + \ConstantsUsingCases::ConstantValuedVariables(Int32).0.input\;
                        \ConstantsUsingCases::ConstantValuedVariables(Int32).0.num4\ := \ConstantsUsingCases::ConstantValuedVariables(Int32).0.binaryOperationResult.0\;
                        -- The following section was transformed from the .NET statement below:
                        -- int[] array;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- array = new int[37];
                        -- 
                        \ConstantsUsingCases::ConstantValuedVariables(Int32).0.array\ := (others => to_signed(0, 32));
                        -- The following section was transformed from the .NET statement below:
                        -- int num5;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num5 = 5;
                        -- 
                        \ConstantsUsingCases::ConstantValuedVariables(Int32).0.num5\ := to_signed(5, 32);
                        -- The following section was transformed from the .NET statement below:
                        -- if (input < 5) {
                        -- 	num5 = 13;
                        -- } else {
                        -- 	num5 = 10;
                        -- }
                        -- 
                        \ConstantsUsingCases::ConstantValuedVariables(Int32).0.binaryOperationResult.1\ := \ConstantsUsingCases::ConstantValuedVariables(Int32).0.input\ < to_signed(5, 32);

                        -- This if-else was transformed from a .NET if-else. It spans across multiple states:
                        --     * The true branch starts in state \ConstantsUsingCases::ConstantValuedVariables(Int32).0._State_4\ and ends in state \ConstantsUsingCases::ConstantValuedVariables(Int32).0._State_4\.
                        --     * The false branch starts in state \ConstantsUsingCases::ConstantValuedVariables(Int32).0._State_5\ and ends in state \ConstantsUsingCases::ConstantValuedVariables(Int32).0._State_5\.
                        --     * Execution after either branch will continue in the following state: \ConstantsUsingCases::ConstantValuedVariables(Int32).0._State_3\.

                        if (\ConstantsUsingCases::ConstantValuedVariables(Int32).0.binaryOperationResult.1\) then 
                            \ConstantsUsingCases::ConstantValuedVariables(Int32).0._State\ := \ConstantsUsingCases::ConstantValuedVariables(Int32).0._State_4\;
                        else 
                            \ConstantsUsingCases::ConstantValuedVariables(Int32).0._State\ := \ConstantsUsingCases::ConstantValuedVariables(Int32).0._State_5\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.6016
                    when \ConstantsUsingCases::ConstantValuedVariables(Int32).0._State_3\ => 
                        -- State after the if-else which was started in state \ConstantsUsingCases::ConstantValuedVariables(Int32).0._State_2\.
                        -- The following section was transformed from the .NET statement below:
                        -- int num6;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num6 = 153;
                        -- 
                        \ConstantsUsingCases::ConstantValuedVariables(Int32).0.num6\ := to_signed(153, 32);
                        -- The following section was transformed from the .NET statement below:
                        -- num6 = 163;
                        -- 
                        \ConstantsUsingCases::ConstantValuedVariables(Int32).0.num6\ := to_signed(163, 32);
                        \ConstantsUsingCases::ConstantValuedVariables(Int32).0._State\ := \ConstantsUsingCases::ConstantValuedVariables(Int32).0._State_1\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \ConstantsUsingCases::ConstantValuedVariables(Int32).0._State_4\ => 
                        -- True branch of the if-else started in state \ConstantsUsingCases::ConstantValuedVariables(Int32).0._State_2\.
                        -- The following section was transformed from the .NET statement below:
                        -- {
                        -- 	num5 = 13;
                        -- }
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num5 = 13;
                        -- 
                        \ConstantsUsingCases::ConstantValuedVariables(Int32).0.num5\ := to_signed(13, 32);
                        -- Going to the state after the if-else which was started in state \ConstantsUsingCases::ConstantValuedVariables(Int32).0._State_2\.
                        if (\ConstantsUsingCases::ConstantValuedVariables(Int32).0._State\ = \ConstantsUsingCases::ConstantValuedVariables(Int32).0._State_4\) then 
                            \ConstantsUsingCases::ConstantValuedVariables(Int32).0._State\ := \ConstantsUsingCases::ConstantValuedVariables(Int32).0._State_3\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \ConstantsUsingCases::ConstantValuedVariables(Int32).0._State_5\ => 
                        -- False branch of the if-else started in state \ConstantsUsingCases::ConstantValuedVariables(Int32).0._State_2\.
                        -- The following section was transformed from the .NET statement below:
                        -- {
                        -- 	num5 = 10;
                        -- }
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num5 = 10;
                        -- 
                        \ConstantsUsingCases::ConstantValuedVariables(Int32).0.num5\ := to_signed(10, 32);
                        -- Going to the state after the if-else which was started in state \ConstantsUsingCases::ConstantValuedVariables(Int32).0._State_2\.
                        if (\ConstantsUsingCases::ConstantValuedVariables(Int32).0._State\ = \ConstantsUsingCases::ConstantValuedVariables(Int32).0._State_5\) then 
                            \ConstantsUsingCases::ConstantValuedVariables(Int32).0._State\ := \ConstantsUsingCases::ConstantValuedVariables(Int32).0._State_3\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                end case;
            end if;
        end if;
    end process;
    -- System.Void Hast.TestInputs.Various.ConstantsUsingCases::ConstantValuedVariables(System.Int32).0 state machine end


    -- System.Void Hast.TestInputs.Various.ConstantsUsingCases::ConstantPassingToMethod(System.Int32).0 state machine start
    \ConstantsUsingCases::ConstantPassingToMethod(Int32).0._StateMachine\: process (\Clock\) 
        Variable \ConstantsUsingCases::ConstantPassingToMethod(Int32).0._State\: \ConstantsUsingCases::ConstantPassingToMethod(Int32).0._States\ := \ConstantsUsingCases::ConstantPassingToMethod(Int32).0._State_0\;
        Variable \ConstantsUsingCases::ConstantPassingToMethod(Int32).0.input\: signed(31 downto 0) := to_signed(0, 32);
        Variable \ConstantsUsingCases::ConstantPassingToMethod(Int32).0.num\: signed(31 downto 0) := to_signed(0, 32);
        Variable \ConstantsUsingCases::ConstantPassingToMethod(Int32).0.num2\: signed(31 downto 0) := to_signed(0, 32);
        Variable \ConstantsUsingCases::ConstantPassingToMethod(Int32).0.num3\: signed(31 downto 0) := to_signed(0, 32);
        Variable \ConstantsUsingCases::ConstantPassingToMethod(Int32).0.return.0\: signed(31 downto 0) := to_signed(0, 32);
        Variable \ConstantsUsingCases::ConstantPassingToMethod(Int32).0.binaryOperationResult.0\: signed(31 downto 0) := to_signed(0, 32);
    begin 
        if (rising_edge(\Clock\)) then 
            if (\Reset\ = '1') then 
                -- Synchronous reset
                \ConstantsUsingCases::ConstantPassingToMethod(Int32).0._Finished\ <= false;
                \ConstantsUsingCases::ConstantPassingToMethod(Int32).0.ConstantsUsingCases::ConstantUsingMethod(Int32,Int32).input1.parameter.Out.0\ <= to_signed(0, 32);
                \ConstantsUsingCases::ConstantPassingToMethod(Int32).0.ConstantsUsingCases::ConstantUsingMethod(Int32,Int32).input2.parameter.Out.0\ <= to_signed(0, 32);
                \ConstantsUsingCases::ConstantPassingToMethod(Int32).0.ConstantsUsingCases::ConstantUsingMethod(Int32,Int32)._Started.0\ <= false;
                \ConstantsUsingCases::ConstantPassingToMethod(Int32).0._State\ := \ConstantsUsingCases::ConstantPassingToMethod(Int32).0._State_0\;
                \ConstantsUsingCases::ConstantPassingToMethod(Int32).0.input\ := to_signed(0, 32);
                \ConstantsUsingCases::ConstantPassingToMethod(Int32).0.num\ := to_signed(0, 32);
                \ConstantsUsingCases::ConstantPassingToMethod(Int32).0.num2\ := to_signed(0, 32);
                \ConstantsUsingCases::ConstantPassingToMethod(Int32).0.num3\ := to_signed(0, 32);
                \ConstantsUsingCases::ConstantPassingToMethod(Int32).0.return.0\ := to_signed(0, 32);
                \ConstantsUsingCases::ConstantPassingToMethod(Int32).0.binaryOperationResult.0\ := to_signed(0, 32);
            else 
                case \ConstantsUsingCases::ConstantPassingToMethod(Int32).0._State\ is 
                    when \ConstantsUsingCases::ConstantPassingToMethod(Int32).0._State_0\ => 
                        -- Start state
                        -- Waiting for the start signal.
                        if (\ConstantsUsingCases::ConstantPassingToMethod(Int32).0._Started\ = true) then 
                            \ConstantsUsingCases::ConstantPassingToMethod(Int32).0._State\ := \ConstantsUsingCases::ConstantPassingToMethod(Int32).0._State_2\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \ConstantsUsingCases::ConstantPassingToMethod(Int32).0._State_1\ => 
                        -- Final state
                        -- Signaling finished until Started is pulled back to false, then returning to the start state.
                        if (\ConstantsUsingCases::ConstantPassingToMethod(Int32).0._Started\ = true) then 
                            \ConstantsUsingCases::ConstantPassingToMethod(Int32).0._Finished\ <= true;
                        else 
                            \ConstantsUsingCases::ConstantPassingToMethod(Int32).0._Finished\ <= false;
                            \ConstantsUsingCases::ConstantPassingToMethod(Int32).0._State\ := \ConstantsUsingCases::ConstantPassingToMethod(Int32).0._State_0\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \ConstantsUsingCases::ConstantPassingToMethod(Int32).0._State_2\ => 
                        \ConstantsUsingCases::ConstantPassingToMethod(Int32).0.input\ := \ConstantsUsingCases::ConstantPassingToMethod(Int32).0.input.parameter.In\;
                        -- The following section was transformed from the .NET statement below:
                        -- int num;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num = 15;
                        -- 
                        \ConstantsUsingCases::ConstantPassingToMethod(Int32).0.num\ := to_signed(15, 32);
                        -- The following section was transformed from the .NET statement below:
                        -- int num2;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num2 = 145;
                        -- 
                        \ConstantsUsingCases::ConstantPassingToMethod(Int32).0.num2\ := to_signed(145, 32);
                        -- The following section was transformed from the .NET statement below:
                        -- int num3;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num3 = this.ConstantUsingMethod (145, input) + 298;
                        -- 
                        -- Starting state machine invocation for the following method: System.Int32 Hast.TestInputs.Various.ConstantsUsingCases::ConstantUsingMethod(System.Int32,System.Int32)
                        \ConstantsUsingCases::ConstantPassingToMethod(Int32).0.ConstantsUsingCases::ConstantUsingMethod(Int32,Int32).input1.parameter.Out.0\ <= to_signed(145, 32);
                        \ConstantsUsingCases::ConstantPassingToMethod(Int32).0.ConstantsUsingCases::ConstantUsingMethod(Int32,Int32).input2.parameter.Out.0\ <= \ConstantsUsingCases::ConstantPassingToMethod(Int32).0.input\;
                        \ConstantsUsingCases::ConstantPassingToMethod(Int32).0.ConstantsUsingCases::ConstantUsingMethod(Int32,Int32)._Started.0\ <= true;
                        \ConstantsUsingCases::ConstantPassingToMethod(Int32).0._State\ := \ConstantsUsingCases::ConstantPassingToMethod(Int32).0._State_3\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \ConstantsUsingCases::ConstantPassingToMethod(Int32).0._State_3\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Int32 Hast.TestInputs.Various.ConstantsUsingCases::ConstantUsingMethod(System.Int32,System.Int32)
                        if (\ConstantsUsingCases::ConstantPassingToMethod(Int32).0.ConstantsUsingCases::ConstantUsingMethod(Int32,Int32)._Started.0\ = \ConstantsUsingCases::ConstantPassingToMethod(Int32).0.ConstantsUsingCases::ConstantUsingMethod(Int32,Int32)._Finished.0\) then 
                            \ConstantsUsingCases::ConstantPassingToMethod(Int32).0.ConstantsUsingCases::ConstantUsingMethod(Int32,Int32)._Started.0\ <= false;
                            \ConstantsUsingCases::ConstantPassingToMethod(Int32).0.return.0\ := \ConstantsUsingCases::ConstantPassingToMethod(Int32).0.ConstantsUsingCases::ConstantUsingMethod(Int32,Int32).return.0\;
                            \ConstantsUsingCases::ConstantPassingToMethod(Int32).0.binaryOperationResult.0\ := \ConstantsUsingCases::ConstantPassingToMethod(Int32).0.return.0\ + to_signed(298, 32);
                            \ConstantsUsingCases::ConstantPassingToMethod(Int32).0.num3\ := \ConstantsUsingCases::ConstantPassingToMethod(Int32).0.binaryOperationResult.0\;
                            \ConstantsUsingCases::ConstantPassingToMethod(Int32).0._State\ := \ConstantsUsingCases::ConstantPassingToMethod(Int32).0._State_1\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.3263
                end case;
            end if;
        end if;
    end process;
    -- System.Void Hast.TestInputs.Various.ConstantsUsingCases::ConstantPassingToMethod(System.Int32).0 state machine end


    -- System.Void Hast.TestInputs.Various.ConstantsUsingCases::ConstantPassingToObject().0 state machine start
    \ConstantsUsingCases::ConstantPassingToObject().0._StateMachine\: process (\Clock\) 
        Variable \ConstantsUsingCases::ConstantPassingToObject().0._State\: \ConstantsUsingCases::ConstantPassingToObject().0._States\ := \ConstantsUsingCases::ConstantPassingToObject().0._State_0\;
        Variable \ConstantsUsingCases::ConstantPassingToObject().0.num\: signed(31 downto 0) := to_signed(0, 32);
        Variable \ConstantsUsingCases::ConstantPassingToObject().0.array\: \unsigned32_Array\(0 to 4) := (others => to_unsigned(0, 32));
        Variable \ConstantsUsingCases::ConstantPassingToObject().0.arrayHolder\: \Hast.TestInputs.Various.ConstantsUsingCases+ArrayHolder1\;
        Variable \ConstantsUsingCases::ConstantPassingToObject().0.arrayLength\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \ConstantsUsingCases::ConstantPassingToObject().0.arrayLengthCopy\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \ConstantsUsingCases::ConstantPassingToObject().0.nonSubstitutableArrayLengthCopy\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \ConstantsUsingCases::ConstantPassingToObject().0.arrayHolder2\: \Hast.TestInputs.Various.ConstantsUsingCases+ArrayHolder1\;
        Variable \ConstantsUsingCases::ConstantPassingToObject().0.previous\: \Hast.TestInputs.Various.ConstantsUsingCases+ArrayHolder1\;
        Variable \ConstantsUsingCases::ConstantPassingToObject().0.arrayHolder3\: \Hast.TestInputs.Various.ConstantsUsingCases+ArrayHolder1\;
        Variable \ConstantsUsingCases::ConstantPassingToObject().0.arrayHolder4\: \Hast.TestInputs.Various.ConstantsUsingCases+ArrayHolder1\;
        Variable \ConstantsUsingCases::ConstantPassingToObject().0.arrayHolder5\: \Hast.TestInputs.Various.ConstantsUsingCases+ArrayHolder1\;
        Variable \ConstantsUsingCases::ConstantPassingToObject().0.arrayHolder6\: \Hast.TestInputs.Various.ConstantsUsingCases+ArrayHolder2\;
        Variable \ConstantsUsingCases::ConstantPassingToObject().0.arrayHolder7\: \Hast.TestInputs.Various.ConstantsUsingCases+ArrayHolder2\;
    begin 
        if (rising_edge(\Clock\)) then 
            if (\Reset\ = '1') then 
                -- Synchronous reset
                \ConstantsUsingCases::ConstantPassingToObject().0._Finished\ <= false;
                \ConstantsUsingCases::ConstantPassingToObject().0.ConstantsUsingCases+ArrayHolder1::.ctor(UInt32[]).array.parameter.Out.0\ <= (others => to_unsigned(0, 32));
                \ConstantsUsingCases::ConstantPassingToObject().0.ConstantsUsingCases+ArrayHolder1::.ctor(UInt32[])._Started.0\ <= false;
                \ConstantsUsingCases::ConstantPassingToObject().0.ConstantsUsingCases+ArrayHolder1::.ctor(UInt32).size.parameter.Out.0\ <= to_unsigned(0, 32);
                \ConstantsUsingCases::ConstantPassingToObject().0.ConstantsUsingCases+ArrayHolder1::.ctor(UInt32)._Started.0\ <= false;
                \ConstantsUsingCases::ConstantPassingToObject().0.ConstantsUsingCases+ArrayHolder1::.ctor(ConstantsUsingCases+ArrayHolder1)._Started.0\ <= false;
                \ConstantsUsingCases::ConstantPassingToObject().0.ConstantsUsingCases+ArrayHolder2::.ctor(UInt32).size.parameter.Out.0\ <= to_unsigned(0, 32);
                \ConstantsUsingCases::ConstantPassingToObject().0.ConstantsUsingCases+ArrayHolder2::.ctor(UInt32)._Started.0\ <= false;
                \ConstantsUsingCases::ConstantPassingToObject().0._State\ := \ConstantsUsingCases::ConstantPassingToObject().0._State_0\;
                \ConstantsUsingCases::ConstantPassingToObject().0.num\ := to_signed(0, 32);
                \ConstantsUsingCases::ConstantPassingToObject().0.array\ := (others => to_unsigned(0, 32));
                \ConstantsUsingCases::ConstantPassingToObject().0.arrayLength\ := to_unsigned(0, 32);
                \ConstantsUsingCases::ConstantPassingToObject().0.arrayLengthCopy\ := to_unsigned(0, 32);
                \ConstantsUsingCases::ConstantPassingToObject().0.nonSubstitutableArrayLengthCopy\ := to_unsigned(0, 32);
            else 
                case \ConstantsUsingCases::ConstantPassingToObject().0._State\ is 
                    when \ConstantsUsingCases::ConstantPassingToObject().0._State_0\ => 
                        -- Start state
                        -- Waiting for the start signal.
                        if (\ConstantsUsingCases::ConstantPassingToObject().0._Started\ = true) then 
                            \ConstantsUsingCases::ConstantPassingToObject().0._State\ := \ConstantsUsingCases::ConstantPassingToObject().0._State_2\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \ConstantsUsingCases::ConstantPassingToObject().0._State_1\ => 
                        -- Final state
                        -- Signaling finished until Started is pulled back to false, then returning to the start state.
                        if (\ConstantsUsingCases::ConstantPassingToObject().0._Started\ = true) then 
                            \ConstantsUsingCases::ConstantPassingToObject().0._Finished\ <= true;
                        else 
                            \ConstantsUsingCases::ConstantPassingToObject().0._Finished\ <= false;
                            \ConstantsUsingCases::ConstantPassingToObject().0._State\ := \ConstantsUsingCases::ConstantPassingToObject().0._State_0\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \ConstantsUsingCases::ConstantPassingToObject().0._State_2\ => 
                        -- The following section was transformed from the .NET statement below:
                        -- int num;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num = 5;
                        -- 
                        \ConstantsUsingCases::ConstantPassingToObject().0.num\ := to_signed(5, 32);
                        -- The following section was transformed from the .NET statement below:
                        -- uint[] array;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- array = new uint[5];
                        -- 
                        \ConstantsUsingCases::ConstantPassingToObject().0.array\ := (others => to_unsigned(0, 32));
                        -- The following section was transformed from the .NET statement below:
                        -- ArrayHolder1 arrayHolder;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- arrayHolder = new ArrayHolder1 (array);
                        -- 
                        -- Initializing record fields to their defaults.
                        \ConstantsUsingCases::ConstantPassingToObject().0.arrayHolder\.\IsNull\ := false;
                        \ConstantsUsingCases::ConstantPassingToObject().0.arrayHolder\.\ArrayLength\ := to_unsigned(0, 32);
                        \ConstantsUsingCases::ConstantPassingToObject().0.arrayHolder\.\ArrayLengthCopy\ := to_unsigned(0, 32);
                        \ConstantsUsingCases::ConstantPassingToObject().0.arrayHolder\.\NonSubstitutableArrayLengthCopy\ := to_unsigned(0, 32);
                        \ConstantsUsingCases::ConstantPassingToObject().0.arrayHolder\.\Array\ := (others => to_unsigned(0, 32));
                        -- Invoking the target's constructor.
                        -- Starting state machine invocation for the following method: System.Void Hast.TestInputs.Various.ConstantsUsingCases+ArrayHolder1::.ctor(System.UInt32[])
                        \ConstantsUsingCases::ConstantPassingToObject().0.ConstantsUsingCases+ArrayHolder1::.ctor(UInt32[]).this.parameter.Out.0\ <= \ConstantsUsingCases::ConstantPassingToObject().0.arrayHolder\;
                        \ConstantsUsingCases::ConstantPassingToObject().0.ConstantsUsingCases+ArrayHolder1::.ctor(UInt32[]).array.parameter.Out.0\ <= \ConstantsUsingCases::ConstantPassingToObject().0.array\;
                        \ConstantsUsingCases::ConstantPassingToObject().0.ConstantsUsingCases+ArrayHolder1::.ctor(UInt32[])._Started.0\ <= true;
                        \ConstantsUsingCases::ConstantPassingToObject().0._State\ := \ConstantsUsingCases::ConstantPassingToObject().0._State_3\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \ConstantsUsingCases::ConstantPassingToObject().0._State_3\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Void Hast.TestInputs.Various.ConstantsUsingCases+ArrayHolder1::.ctor(System.UInt32[])
                        if (\ConstantsUsingCases::ConstantPassingToObject().0.ConstantsUsingCases+ArrayHolder1::.ctor(UInt32[])._Started.0\ = \ConstantsUsingCases::ConstantPassingToObject().0.ConstantsUsingCases+ArrayHolder1::.ctor(UInt32[])._Finished.0\) then 
                            \ConstantsUsingCases::ConstantPassingToObject().0.ConstantsUsingCases+ArrayHolder1::.ctor(UInt32[])._Started.0\ <= false;
                            \ConstantsUsingCases::ConstantPassingToObject().0.arrayHolder\ := \ConstantsUsingCases::ConstantPassingToObject().0.ConstantsUsingCases+ArrayHolder1::.ctor(UInt32[]).this.parameter.In.0\;
                            \ConstantsUsingCases::ConstantPassingToObject().0.array\ := \ConstantsUsingCases::ConstantPassingToObject().0.ConstantsUsingCases+ArrayHolder1::.ctor(UInt32[]).array.parameter.In.0\;
                            -- The following section was transformed from the .NET statement below:
                            -- uint arrayLength;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- arrayLength = 5u;
                            -- 
                            \ConstantsUsingCases::ConstantPassingToObject().0.arrayLength\ := to_unsigned(5, 32);
                            -- The following section was transformed from the .NET statement below:
                            -- uint arrayLengthCopy;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- arrayLengthCopy = 160u;
                            -- 
                            \ConstantsUsingCases::ConstantPassingToObject().0.arrayLengthCopy\ := to_unsigned(160, 32);
                            -- The following section was transformed from the .NET statement below:
                            -- uint nonSubstitutableArrayLengthCopy;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- nonSubstitutableArrayLengthCopy = arrayHolder.NonSubstitutableArrayLengthCopy;
                            -- 
                            \ConstantsUsingCases::ConstantPassingToObject().0.nonSubstitutableArrayLengthCopy\ := \ConstantsUsingCases::ConstantPassingToObject().0.arrayHolder\.\NonSubstitutableArrayLengthCopy\;
                            -- The following section was transformed from the .NET statement below:
                            -- ArrayHolder1 arrayHolder2;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- arrayHolder2 = new ArrayHolder1 (arrayHolder.Array);
                            -- 
                            -- Initializing record fields to their defaults.
                            \ConstantsUsingCases::ConstantPassingToObject().0.arrayHolder2\.\IsNull\ := false;
                            \ConstantsUsingCases::ConstantPassingToObject().0.arrayHolder2\.\ArrayLength\ := to_unsigned(0, 32);
                            \ConstantsUsingCases::ConstantPassingToObject().0.arrayHolder2\.\ArrayLengthCopy\ := to_unsigned(0, 32);
                            \ConstantsUsingCases::ConstantPassingToObject().0.arrayHolder2\.\NonSubstitutableArrayLengthCopy\ := to_unsigned(0, 32);
                            \ConstantsUsingCases::ConstantPassingToObject().0.arrayHolder2\.\Array\ := (others => to_unsigned(0, 32));
                            -- Invoking the target's constructor.
                            -- The last invocation for the target state machine just finished, so need to start the next one in a later state.
                            \ConstantsUsingCases::ConstantPassingToObject().0._State\ := \ConstantsUsingCases::ConstantPassingToObject().0._State_4\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \ConstantsUsingCases::ConstantPassingToObject().0._State_4\ => 
                        -- This state was just added to leave time for the invocation proxy to register that the previous invocation finished.
                        \ConstantsUsingCases::ConstantPassingToObject().0._State\ := \ConstantsUsingCases::ConstantPassingToObject().0._State_5\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \ConstantsUsingCases::ConstantPassingToObject().0._State_5\ => 
                        -- Starting state machine invocation for the following method: System.Void Hast.TestInputs.Various.ConstantsUsingCases+ArrayHolder1::.ctor(System.UInt32[])
                        \ConstantsUsingCases::ConstantPassingToObject().0.ConstantsUsingCases+ArrayHolder1::.ctor(UInt32[]).this.parameter.Out.0\ <= \ConstantsUsingCases::ConstantPassingToObject().0.arrayHolder2\;
                        \ConstantsUsingCases::ConstantPassingToObject().0.ConstantsUsingCases+ArrayHolder1::.ctor(UInt32[]).array.parameter.Out.0\ <= \ConstantsUsingCases::ConstantPassingToObject().0.arrayHolder\.\Array\;
                        \ConstantsUsingCases::ConstantPassingToObject().0.ConstantsUsingCases+ArrayHolder1::.ctor(UInt32[])._Started.0\ <= true;
                        \ConstantsUsingCases::ConstantPassingToObject().0._State\ := \ConstantsUsingCases::ConstantPassingToObject().0._State_6\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \ConstantsUsingCases::ConstantPassingToObject().0._State_6\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Void Hast.TestInputs.Various.ConstantsUsingCases+ArrayHolder1::.ctor(System.UInt32[])
                        if (\ConstantsUsingCases::ConstantPassingToObject().0.ConstantsUsingCases+ArrayHolder1::.ctor(UInt32[])._Started.0\ = \ConstantsUsingCases::ConstantPassingToObject().0.ConstantsUsingCases+ArrayHolder1::.ctor(UInt32[])._Finished.0\) then 
                            \ConstantsUsingCases::ConstantPassingToObject().0.ConstantsUsingCases+ArrayHolder1::.ctor(UInt32[])._Started.0\ <= false;
                            \ConstantsUsingCases::ConstantPassingToObject().0.arrayHolder2\ := \ConstantsUsingCases::ConstantPassingToObject().0.ConstantsUsingCases+ArrayHolder1::.ctor(UInt32[]).this.parameter.In.0\;
                            \ConstantsUsingCases::ConstantPassingToObject().0.arrayHolder\.\Array\ := \ConstantsUsingCases::ConstantPassingToObject().0.ConstantsUsingCases+ArrayHolder1::.ctor(UInt32[]).array.parameter.In.0\;
                            -- The following section was transformed from the .NET statement below:
                            -- ArrayHolder1 previous;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- previous = new ArrayHolder1 (5u);
                            -- 
                            -- Initializing record fields to their defaults.
                            \ConstantsUsingCases::ConstantPassingToObject().0.previous\.\IsNull\ := false;
                            \ConstantsUsingCases::ConstantPassingToObject().0.previous\.\ArrayLength\ := to_unsigned(0, 32);
                            \ConstantsUsingCases::ConstantPassingToObject().0.previous\.\ArrayLengthCopy\ := to_unsigned(0, 32);
                            \ConstantsUsingCases::ConstantPassingToObject().0.previous\.\NonSubstitutableArrayLengthCopy\ := to_unsigned(0, 32);
                            \ConstantsUsingCases::ConstantPassingToObject().0.previous\.\Array\ := (others => to_unsigned(0, 32));
                            -- Invoking the target's constructor.
                            -- Starting state machine invocation for the following method: System.Void Hast.TestInputs.Various.ConstantsUsingCases+ArrayHolder1::.ctor(System.UInt32)
                            \ConstantsUsingCases::ConstantPassingToObject().0.ConstantsUsingCases+ArrayHolder1::.ctor(UInt32).this.parameter.Out.0\ <= \ConstantsUsingCases::ConstantPassingToObject().0.previous\;
                            \ConstantsUsingCases::ConstantPassingToObject().0.ConstantsUsingCases+ArrayHolder1::.ctor(UInt32).size.parameter.Out.0\ <= to_unsigned(5, 32);
                            \ConstantsUsingCases::ConstantPassingToObject().0.ConstantsUsingCases+ArrayHolder1::.ctor(UInt32)._Started.0\ <= true;
                            \ConstantsUsingCases::ConstantPassingToObject().0._State\ := \ConstantsUsingCases::ConstantPassingToObject().0._State_7\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \ConstantsUsingCases::ConstantPassingToObject().0._State_7\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Void Hast.TestInputs.Various.ConstantsUsingCases+ArrayHolder1::.ctor(System.UInt32)
                        if (\ConstantsUsingCases::ConstantPassingToObject().0.ConstantsUsingCases+ArrayHolder1::.ctor(UInt32)._Started.0\ = \ConstantsUsingCases::ConstantPassingToObject().0.ConstantsUsingCases+ArrayHolder1::.ctor(UInt32)._Finished.0\) then 
                            \ConstantsUsingCases::ConstantPassingToObject().0.ConstantsUsingCases+ArrayHolder1::.ctor(UInt32)._Started.0\ <= false;
                            \ConstantsUsingCases::ConstantPassingToObject().0.previous\ := \ConstantsUsingCases::ConstantPassingToObject().0.ConstantsUsingCases+ArrayHolder1::.ctor(UInt32).this.parameter.In.0\;
                            -- The following section was transformed from the .NET statement below:
                            -- ArrayHolder1 arrayHolder3;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- arrayHolder3 = new ArrayHolder1 (5u);
                            -- 
                            -- Initializing record fields to their defaults.
                            \ConstantsUsingCases::ConstantPassingToObject().0.arrayHolder3\.\IsNull\ := false;
                            \ConstantsUsingCases::ConstantPassingToObject().0.arrayHolder3\.\ArrayLength\ := to_unsigned(0, 32);
                            \ConstantsUsingCases::ConstantPassingToObject().0.arrayHolder3\.\ArrayLengthCopy\ := to_unsigned(0, 32);
                            \ConstantsUsingCases::ConstantPassingToObject().0.arrayHolder3\.\NonSubstitutableArrayLengthCopy\ := to_unsigned(0, 32);
                            \ConstantsUsingCases::ConstantPassingToObject().0.arrayHolder3\.\Array\ := (others => to_unsigned(0, 32));
                            -- Invoking the target's constructor.
                            -- The last invocation for the target state machine just finished, so need to start the next one in a later state.
                            \ConstantsUsingCases::ConstantPassingToObject().0._State\ := \ConstantsUsingCases::ConstantPassingToObject().0._State_8\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \ConstantsUsingCases::ConstantPassingToObject().0._State_8\ => 
                        -- This state was just added to leave time for the invocation proxy to register that the previous invocation finished.
                        \ConstantsUsingCases::ConstantPassingToObject().0._State\ := \ConstantsUsingCases::ConstantPassingToObject().0._State_9\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \ConstantsUsingCases::ConstantPassingToObject().0._State_9\ => 
                        -- Starting state machine invocation for the following method: System.Void Hast.TestInputs.Various.ConstantsUsingCases+ArrayHolder1::.ctor(System.UInt32)
                        \ConstantsUsingCases::ConstantPassingToObject().0.ConstantsUsingCases+ArrayHolder1::.ctor(UInt32).this.parameter.Out.0\ <= \ConstantsUsingCases::ConstantPassingToObject().0.arrayHolder3\;
                        \ConstantsUsingCases::ConstantPassingToObject().0.ConstantsUsingCases+ArrayHolder1::.ctor(UInt32).size.parameter.Out.0\ <= to_unsigned(5, 32);
                        \ConstantsUsingCases::ConstantPassingToObject().0.ConstantsUsingCases+ArrayHolder1::.ctor(UInt32)._Started.0\ <= true;
                        \ConstantsUsingCases::ConstantPassingToObject().0._State\ := \ConstantsUsingCases::ConstantPassingToObject().0._State_10\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \ConstantsUsingCases::ConstantPassingToObject().0._State_10\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Void Hast.TestInputs.Various.ConstantsUsingCases+ArrayHolder1::.ctor(System.UInt32)
                        if (\ConstantsUsingCases::ConstantPassingToObject().0.ConstantsUsingCases+ArrayHolder1::.ctor(UInt32)._Started.0\ = \ConstantsUsingCases::ConstantPassingToObject().0.ConstantsUsingCases+ArrayHolder1::.ctor(UInt32)._Finished.0\) then 
                            \ConstantsUsingCases::ConstantPassingToObject().0.ConstantsUsingCases+ArrayHolder1::.ctor(UInt32)._Started.0\ <= false;
                            \ConstantsUsingCases::ConstantPassingToObject().0.arrayHolder3\ := \ConstantsUsingCases::ConstantPassingToObject().0.ConstantsUsingCases+ArrayHolder1::.ctor(UInt32).this.parameter.In.0\;
                            -- The following section was transformed from the .NET statement below:
                            -- ArrayHolder1 arrayHolder4;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- arrayHolder4 = new ArrayHolder1 (5u);
                            -- 
                            -- Initializing record fields to their defaults.
                            \ConstantsUsingCases::ConstantPassingToObject().0.arrayHolder4\.\IsNull\ := false;
                            \ConstantsUsingCases::ConstantPassingToObject().0.arrayHolder4\.\ArrayLength\ := to_unsigned(0, 32);
                            \ConstantsUsingCases::ConstantPassingToObject().0.arrayHolder4\.\ArrayLengthCopy\ := to_unsigned(0, 32);
                            \ConstantsUsingCases::ConstantPassingToObject().0.arrayHolder4\.\NonSubstitutableArrayLengthCopy\ := to_unsigned(0, 32);
                            \ConstantsUsingCases::ConstantPassingToObject().0.arrayHolder4\.\Array\ := (others => to_unsigned(0, 32));
                            -- Invoking the target's constructor.
                            -- The last invocation for the target state machine just finished, so need to start the next one in a later state.
                            \ConstantsUsingCases::ConstantPassingToObject().0._State\ := \ConstantsUsingCases::ConstantPassingToObject().0._State_11\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \ConstantsUsingCases::ConstantPassingToObject().0._State_11\ => 
                        -- This state was just added to leave time for the invocation proxy to register that the previous invocation finished.
                        \ConstantsUsingCases::ConstantPassingToObject().0._State\ := \ConstantsUsingCases::ConstantPassingToObject().0._State_12\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \ConstantsUsingCases::ConstantPassingToObject().0._State_12\ => 
                        -- Starting state machine invocation for the following method: System.Void Hast.TestInputs.Various.ConstantsUsingCases+ArrayHolder1::.ctor(System.UInt32)
                        \ConstantsUsingCases::ConstantPassingToObject().0.ConstantsUsingCases+ArrayHolder1::.ctor(UInt32).this.parameter.Out.0\ <= \ConstantsUsingCases::ConstantPassingToObject().0.arrayHolder4\;
                        \ConstantsUsingCases::ConstantPassingToObject().0.ConstantsUsingCases+ArrayHolder1::.ctor(UInt32).size.parameter.Out.0\ <= to_unsigned(5, 32);
                        \ConstantsUsingCases::ConstantPassingToObject().0.ConstantsUsingCases+ArrayHolder1::.ctor(UInt32)._Started.0\ <= true;
                        \ConstantsUsingCases::ConstantPassingToObject().0._State\ := \ConstantsUsingCases::ConstantPassingToObject().0._State_13\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \ConstantsUsingCases::ConstantPassingToObject().0._State_13\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Void Hast.TestInputs.Various.ConstantsUsingCases+ArrayHolder1::.ctor(System.UInt32)
                        if (\ConstantsUsingCases::ConstantPassingToObject().0.ConstantsUsingCases+ArrayHolder1::.ctor(UInt32)._Started.0\ = \ConstantsUsingCases::ConstantPassingToObject().0.ConstantsUsingCases+ArrayHolder1::.ctor(UInt32)._Finished.0\) then 
                            \ConstantsUsingCases::ConstantPassingToObject().0.ConstantsUsingCases+ArrayHolder1::.ctor(UInt32)._Started.0\ <= false;
                            \ConstantsUsingCases::ConstantPassingToObject().0.arrayHolder4\ := \ConstantsUsingCases::ConstantPassingToObject().0.ConstantsUsingCases+ArrayHolder1::.ctor(UInt32).this.parameter.In.0\;
                            -- The following section was transformed from the .NET statement below:
                            -- ArrayHolder1 arrayHolder5;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- arrayHolder5 = new ArrayHolder1 (previous);
                            -- 
                            -- Initializing record fields to their defaults.
                            \ConstantsUsingCases::ConstantPassingToObject().0.arrayHolder5\.\IsNull\ := false;
                            \ConstantsUsingCases::ConstantPassingToObject().0.arrayHolder5\.\ArrayLength\ := to_unsigned(0, 32);
                            \ConstantsUsingCases::ConstantPassingToObject().0.arrayHolder5\.\ArrayLengthCopy\ := to_unsigned(0, 32);
                            \ConstantsUsingCases::ConstantPassingToObject().0.arrayHolder5\.\NonSubstitutableArrayLengthCopy\ := to_unsigned(0, 32);
                            \ConstantsUsingCases::ConstantPassingToObject().0.arrayHolder5\.\Array\ := (others => to_unsigned(0, 32));
                            -- Invoking the target's constructor.
                            -- Starting state machine invocation for the following method: System.Void Hast.TestInputs.Various.ConstantsUsingCases+ArrayHolder1::.ctor(Hast.TestInputs.Various.ConstantsUsingCases+ArrayHolder1)
                            \ConstantsUsingCases::ConstantPassingToObject().0.ConstantsUsingCases+ArrayHolder1::.ctor(ConstantsUsingCases+ArrayHolder1).this.parameter.Out.0\ <= \ConstantsUsingCases::ConstantPassingToObject().0.arrayHolder5\;
                            \ConstantsUsingCases::ConstantPassingToObject().0.ConstantsUsingCases+ArrayHolder1::.ctor(ConstantsUsingCases+ArrayHolder1).previous.parameter.Out.0\ <= \ConstantsUsingCases::ConstantPassingToObject().0.previous\;
                            \ConstantsUsingCases::ConstantPassingToObject().0.ConstantsUsingCases+ArrayHolder1::.ctor(ConstantsUsingCases+ArrayHolder1)._Started.0\ <= true;
                            \ConstantsUsingCases::ConstantPassingToObject().0._State\ := \ConstantsUsingCases::ConstantPassingToObject().0._State_14\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \ConstantsUsingCases::ConstantPassingToObject().0._State_14\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Void Hast.TestInputs.Various.ConstantsUsingCases+ArrayHolder1::.ctor(Hast.TestInputs.Various.ConstantsUsingCases+ArrayHolder1)
                        if (\ConstantsUsingCases::ConstantPassingToObject().0.ConstantsUsingCases+ArrayHolder1::.ctor(ConstantsUsingCases+ArrayHolder1)._Started.0\ = \ConstantsUsingCases::ConstantPassingToObject().0.ConstantsUsingCases+ArrayHolder1::.ctor(ConstantsUsingCases+ArrayHolder1)._Finished.0\) then 
                            \ConstantsUsingCases::ConstantPassingToObject().0.ConstantsUsingCases+ArrayHolder1::.ctor(ConstantsUsingCases+ArrayHolder1)._Started.0\ <= false;
                            \ConstantsUsingCases::ConstantPassingToObject().0.arrayHolder5\ := \ConstantsUsingCases::ConstantPassingToObject().0.ConstantsUsingCases+ArrayHolder1::.ctor(ConstantsUsingCases+ArrayHolder1).this.parameter.In.0\;
                            \ConstantsUsingCases::ConstantPassingToObject().0.previous\ := \ConstantsUsingCases::ConstantPassingToObject().0.ConstantsUsingCases+ArrayHolder1::.ctor(ConstantsUsingCases+ArrayHolder1).previous.parameter.In.0\;
                            -- The following section was transformed from the .NET statement below:
                            -- ArrayHolder2 arrayHolder6;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- arrayHolder6 = new ArrayHolder2 (5u);
                            -- 
                            -- Initializing record fields to their defaults.
                            \ConstantsUsingCases::ConstantPassingToObject().0.arrayHolder6\.\IsNull\ := false;
                            \ConstantsUsingCases::ConstantPassingToObject().0.arrayHolder6\.\ArrayLength\ := to_unsigned(0, 32);
                            -- Invoking the target's constructor.
                            -- Starting state machine invocation for the following method: System.Void Hast.TestInputs.Various.ConstantsUsingCases+ArrayHolder2::.ctor(System.UInt32)
                            \ConstantsUsingCases::ConstantPassingToObject().0.ConstantsUsingCases+ArrayHolder2::.ctor(UInt32).this.parameter.Out.0\ <= \ConstantsUsingCases::ConstantPassingToObject().0.arrayHolder6\;
                            \ConstantsUsingCases::ConstantPassingToObject().0.ConstantsUsingCases+ArrayHolder2::.ctor(UInt32).size.parameter.Out.0\ <= to_unsigned(5, 32);
                            \ConstantsUsingCases::ConstantPassingToObject().0.ConstantsUsingCases+ArrayHolder2::.ctor(UInt32)._Started.0\ <= true;
                            \ConstantsUsingCases::ConstantPassingToObject().0._State\ := \ConstantsUsingCases::ConstantPassingToObject().0._State_15\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \ConstantsUsingCases::ConstantPassingToObject().0._State_15\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Void Hast.TestInputs.Various.ConstantsUsingCases+ArrayHolder2::.ctor(System.UInt32)
                        if (\ConstantsUsingCases::ConstantPassingToObject().0.ConstantsUsingCases+ArrayHolder2::.ctor(UInt32)._Started.0\ = \ConstantsUsingCases::ConstantPassingToObject().0.ConstantsUsingCases+ArrayHolder2::.ctor(UInt32)._Finished.0\) then 
                            \ConstantsUsingCases::ConstantPassingToObject().0.ConstantsUsingCases+ArrayHolder2::.ctor(UInt32)._Started.0\ <= false;
                            \ConstantsUsingCases::ConstantPassingToObject().0.arrayHolder6\ := \ConstantsUsingCases::ConstantPassingToObject().0.ConstantsUsingCases+ArrayHolder2::.ctor(UInt32).this.parameter.In.0\;
                            -- The following section was transformed from the .NET statement below:
                            -- ArrayHolder2 arrayHolder7;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- arrayHolder7 = new ArrayHolder2 (13u);
                            -- 
                            -- Initializing record fields to their defaults.
                            \ConstantsUsingCases::ConstantPassingToObject().0.arrayHolder7\.\IsNull\ := false;
                            \ConstantsUsingCases::ConstantPassingToObject().0.arrayHolder7\.\ArrayLength\ := to_unsigned(0, 32);
                            -- Invoking the target's constructor.
                            -- The last invocation for the target state machine just finished, so need to start the next one in a later state.
                            \ConstantsUsingCases::ConstantPassingToObject().0._State\ := \ConstantsUsingCases::ConstantPassingToObject().0._State_16\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \ConstantsUsingCases::ConstantPassingToObject().0._State_16\ => 
                        -- This state was just added to leave time for the invocation proxy to register that the previous invocation finished.
                        \ConstantsUsingCases::ConstantPassingToObject().0._State\ := \ConstantsUsingCases::ConstantPassingToObject().0._State_17\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \ConstantsUsingCases::ConstantPassingToObject().0._State_17\ => 
                        -- Starting state machine invocation for the following method: System.Void Hast.TestInputs.Various.ConstantsUsingCases+ArrayHolder2::.ctor(System.UInt32)
                        \ConstantsUsingCases::ConstantPassingToObject().0.ConstantsUsingCases+ArrayHolder2::.ctor(UInt32).this.parameter.Out.0\ <= \ConstantsUsingCases::ConstantPassingToObject().0.arrayHolder7\;
                        \ConstantsUsingCases::ConstantPassingToObject().0.ConstantsUsingCases+ArrayHolder2::.ctor(UInt32).size.parameter.Out.0\ <= to_unsigned(13, 32);
                        \ConstantsUsingCases::ConstantPassingToObject().0.ConstantsUsingCases+ArrayHolder2::.ctor(UInt32)._Started.0\ <= true;
                        \ConstantsUsingCases::ConstantPassingToObject().0._State\ := \ConstantsUsingCases::ConstantPassingToObject().0._State_18\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \ConstantsUsingCases::ConstantPassingToObject().0._State_18\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Void Hast.TestInputs.Various.ConstantsUsingCases+ArrayHolder2::.ctor(System.UInt32)
                        if (\ConstantsUsingCases::ConstantPassingToObject().0.ConstantsUsingCases+ArrayHolder2::.ctor(UInt32)._Started.0\ = \ConstantsUsingCases::ConstantPassingToObject().0.ConstantsUsingCases+ArrayHolder2::.ctor(UInt32)._Finished.0\) then 
                            \ConstantsUsingCases::ConstantPassingToObject().0.ConstantsUsingCases+ArrayHolder2::.ctor(UInt32)._Started.0\ <= false;
                            \ConstantsUsingCases::ConstantPassingToObject().0.arrayHolder7\ := \ConstantsUsingCases::ConstantPassingToObject().0.ConstantsUsingCases+ArrayHolder2::.ctor(UInt32).this.parameter.In.0\;
                            \ConstantsUsingCases::ConstantPassingToObject().0._State\ := \ConstantsUsingCases::ConstantPassingToObject().0._State_1\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                end case;
            end if;
        end if;
    end process;
    -- System.Void Hast.TestInputs.Various.ConstantsUsingCases::ConstantPassingToObject().0 state machine end


    -- System.Int32 Hast.TestInputs.Various.ConstantsUsingCases::ConstantUsingMethod(System.Int32,System.Int32).0 state machine start
    \ConstantsUsingCases::ConstantUsingMethod(Int32,Int32).0._StateMachine\: process (\Clock\) 
        Variable \ConstantsUsingCases::ConstantUsingMethod(Int32,Int32).0._State\: \ConstantsUsingCases::ConstantUsingMethod(Int32,Int32).0._States\ := \ConstantsUsingCases::ConstantUsingMethod(Int32,Int32).0._State_0\;
        Variable \ConstantsUsingCases::ConstantUsingMethod(Int32,Int32).0.input1\: signed(31 downto 0) := to_signed(0, 32);
        Variable \ConstantsUsingCases::ConstantUsingMethod(Int32,Int32).0.input2\: signed(31 downto 0) := to_signed(0, 32);
        Variable \ConstantsUsingCases::ConstantUsingMethod(Int32,Int32).0.binaryOperationResult.0\: signed(31 downto 0) := to_signed(0, 32);
    begin 
        if (rising_edge(\Clock\)) then 
            if (\Reset\ = '1') then 
                -- Synchronous reset
                \ConstantsUsingCases::ConstantUsingMethod(Int32,Int32).0._Finished\ <= false;
                \ConstantsUsingCases::ConstantUsingMethod(Int32,Int32).0.return\ <= to_signed(0, 32);
                \ConstantsUsingCases::ConstantUsingMethod(Int32,Int32).0._State\ := \ConstantsUsingCases::ConstantUsingMethod(Int32,Int32).0._State_0\;
                \ConstantsUsingCases::ConstantUsingMethod(Int32,Int32).0.input1\ := to_signed(0, 32);
                \ConstantsUsingCases::ConstantUsingMethod(Int32,Int32).0.input2\ := to_signed(0, 32);
                \ConstantsUsingCases::ConstantUsingMethod(Int32,Int32).0.binaryOperationResult.0\ := to_signed(0, 32);
            else 
                case \ConstantsUsingCases::ConstantUsingMethod(Int32,Int32).0._State\ is 
                    when \ConstantsUsingCases::ConstantUsingMethod(Int32,Int32).0._State_0\ => 
                        -- Start state
                        -- Waiting for the start signal.
                        if (\ConstantsUsingCases::ConstantUsingMethod(Int32,Int32).0._Started\ = true) then 
                            \ConstantsUsingCases::ConstantUsingMethod(Int32,Int32).0._State\ := \ConstantsUsingCases::ConstantUsingMethod(Int32,Int32).0._State_2\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \ConstantsUsingCases::ConstantUsingMethod(Int32,Int32).0._State_1\ => 
                        -- Final state
                        -- Signaling finished until Started is pulled back to false, then returning to the start state.
                        if (\ConstantsUsingCases::ConstantUsingMethod(Int32,Int32).0._Started\ = true) then 
                            \ConstantsUsingCases::ConstantUsingMethod(Int32,Int32).0._Finished\ <= true;
                        else 
                            \ConstantsUsingCases::ConstantUsingMethod(Int32,Int32).0._Finished\ <= false;
                            \ConstantsUsingCases::ConstantUsingMethod(Int32,Int32).0._State\ := \ConstantsUsingCases::ConstantUsingMethod(Int32,Int32).0._State_0\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \ConstantsUsingCases::ConstantUsingMethod(Int32,Int32).0._State_2\ => 
                        \ConstantsUsingCases::ConstantUsingMethod(Int32,Int32).0.input1\ := \ConstantsUsingCases::ConstantUsingMethod(Int32,Int32).0.input1.parameter.In\;
                        \ConstantsUsingCases::ConstantUsingMethod(Int32,Int32).0.input2\ := \ConstantsUsingCases::ConstantUsingMethod(Int32,Int32).0.input2.parameter.In\;
                        -- The following section was transformed from the .NET statement below:
                        -- return 298 - input2;
                        -- 
                        \ConstantsUsingCases::ConstantUsingMethod(Int32,Int32).0.binaryOperationResult.0\ := to_signed(298, 32) - \ConstantsUsingCases::ConstantUsingMethod(Int32,Int32).0.input2\;
                        \ConstantsUsingCases::ConstantUsingMethod(Int32,Int32).0.return\ <= \ConstantsUsingCases::ConstantUsingMethod(Int32,Int32).0.binaryOperationResult.0\;
                        \ConstantsUsingCases::ConstantUsingMethod(Int32,Int32).0._State\ := \ConstantsUsingCases::ConstantUsingMethod(Int32,Int32).0._State_1\;
                        -- Clock cycles needed to complete this state (approximation): 0.3263
                end case;
            end if;
        end if;
    end process;
    -- System.Int32 Hast.TestInputs.Various.ConstantsUsingCases::ConstantUsingMethod(System.Int32,System.Int32).0 state machine end


    -- System.Void Hast.TestInputs.Various.LoopCases::BreakInLoop(System.Int32).0 state machine start
    \LoopCases::BreakInLoop(Int32).0._StateMachine\: process (\Clock\) 
        Variable \LoopCases::BreakInLoop(Int32).0._State\: \LoopCases::BreakInLoop(Int32).0._States\ := \LoopCases::BreakInLoop(Int32).0._State_0\;
        Variable \LoopCases::BreakInLoop(Int32).0.input\: signed(31 downto 0) := to_signed(0, 32);
        Variable \LoopCases::BreakInLoop(Int32).0.num\: signed(31 downto 0) := to_signed(0, 32);
        Variable \LoopCases::BreakInLoop(Int32).0.num2\: signed(31 downto 0) := to_signed(0, 32);
        Variable \LoopCases::BreakInLoop(Int32).0.binaryOperationResult.0\: boolean := false;
        Variable \LoopCases::BreakInLoop(Int32).0.binaryOperationResult.1\: signed(31 downto 0) := to_signed(0, 32);
        Variable \LoopCases::BreakInLoop(Int32).0.binaryOperationResult.2\: boolean := false;
        Variable \LoopCases::BreakInLoop(Int32).0.binaryOperationResult.3\: signed(31 downto 0) := to_signed(0, 32);
    begin 
        if (rising_edge(\Clock\)) then 
            if (\Reset\ = '1') then 
                -- Synchronous reset
                \LoopCases::BreakInLoop(Int32).0._Finished\ <= false;
                \LoopCases::BreakInLoop(Int32).0._State\ := \LoopCases::BreakInLoop(Int32).0._State_0\;
                \LoopCases::BreakInLoop(Int32).0.input\ := to_signed(0, 32);
                \LoopCases::BreakInLoop(Int32).0.num\ := to_signed(0, 32);
                \LoopCases::BreakInLoop(Int32).0.num2\ := to_signed(0, 32);
                \LoopCases::BreakInLoop(Int32).0.binaryOperationResult.0\ := false;
                \LoopCases::BreakInLoop(Int32).0.binaryOperationResult.1\ := to_signed(0, 32);
                \LoopCases::BreakInLoop(Int32).0.binaryOperationResult.2\ := false;
                \LoopCases::BreakInLoop(Int32).0.binaryOperationResult.3\ := to_signed(0, 32);
            else 
                case \LoopCases::BreakInLoop(Int32).0._State\ is 
                    when \LoopCases::BreakInLoop(Int32).0._State_0\ => 
                        -- Start state
                        -- Waiting for the start signal.
                        if (\LoopCases::BreakInLoop(Int32).0._Started\ = true) then 
                            \LoopCases::BreakInLoop(Int32).0._State\ := \LoopCases::BreakInLoop(Int32).0._State_2\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \LoopCases::BreakInLoop(Int32).0._State_1\ => 
                        -- Final state
                        -- Signaling finished until Started is pulled back to false, then returning to the start state.
                        if (\LoopCases::BreakInLoop(Int32).0._Started\ = true) then 
                            \LoopCases::BreakInLoop(Int32).0._Finished\ <= true;
                        else 
                            \LoopCases::BreakInLoop(Int32).0._Finished\ <= false;
                            \LoopCases::BreakInLoop(Int32).0._State\ := \LoopCases::BreakInLoop(Int32).0._State_0\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \LoopCases::BreakInLoop(Int32).0._State_2\ => 
                        \LoopCases::BreakInLoop(Int32).0.input\ := \LoopCases::BreakInLoop(Int32).0.input.parameter.In\;
                        -- The following section was transformed from the .NET statement below:
                        -- int num;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num = input;
                        -- 
                        \LoopCases::BreakInLoop(Int32).0.num\ := \LoopCases::BreakInLoop(Int32).0.input\;
                        -- The following section was transformed from the .NET statement below:
                        -- int num2;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num2 = 0;
                        -- 
                        \LoopCases::BreakInLoop(Int32).0.num2\ := to_signed(0, 32);
                        -- The following section was transformed from the .NET statement below:
                        -- while (num2 < input) {
                        -- 	num = num + num2;
                        -- 	if (num > 10) {
                        -- 		break;
                        -- 	}
                        -- 	num2 = num2 + 1;
                        -- }
                        -- 
                        -- Starting a while loop.
                        \LoopCases::BreakInLoop(Int32).0._State\ := \LoopCases::BreakInLoop(Int32).0._State_3\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \LoopCases::BreakInLoop(Int32).0._State_3\ => 
                        -- Repeated state of the while loop which was started in state \LoopCases::BreakInLoop(Int32).0._State_2\.
                        -- The while loop's condition:
                        \LoopCases::BreakInLoop(Int32).0.binaryOperationResult.0\ := \LoopCases::BreakInLoop(Int32).0.num2\ < \LoopCases::BreakInLoop(Int32).0.input\;
                        if (\LoopCases::BreakInLoop(Int32).0.binaryOperationResult.0\) then 
                            -- The following section was transformed from the .NET statement below:
                            -- {
                            -- 	num = num + num2;
                            -- 	if (num > 10) {
                            -- 		break;
                            -- 	}
                            -- 	num2 = num2 + 1;
                            -- }
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- num = num + num2;
                            -- 
                            \LoopCases::BreakInLoop(Int32).0.binaryOperationResult.1\ := \LoopCases::BreakInLoop(Int32).0.num\ + \LoopCases::BreakInLoop(Int32).0.num2\;
                            \LoopCases::BreakInLoop(Int32).0.num\ := \LoopCases::BreakInLoop(Int32).0.binaryOperationResult.1\;
                            -- The following section was transformed from the .NET statement below:
                            -- if (num > 10) {
                            -- 	break;
                            -- }
                            -- 
                            \LoopCases::BreakInLoop(Int32).0.binaryOperationResult.2\ := \LoopCases::BreakInLoop(Int32).0.num\ > to_signed(10, 32);

                            -- This if-else was transformed from a .NET if-else. It spans across multiple states:
                            --     * The true branch starts in state \LoopCases::BreakInLoop(Int32).0._State_6\ and ends in state \LoopCases::BreakInLoop(Int32).0._State_6\.
                            --     * Execution after either branch will continue in the following state: \LoopCases::BreakInLoop(Int32).0._State_5\.

                            if (\LoopCases::BreakInLoop(Int32).0.binaryOperationResult.2\) then 
                                \LoopCases::BreakInLoop(Int32).0._State\ := \LoopCases::BreakInLoop(Int32).0._State_6\;
                            else 
                                -- There was no false branch, so going directly to the state after the if-else.
                                \LoopCases::BreakInLoop(Int32).0._State\ := \LoopCases::BreakInLoop(Int32).0._State_5\;
                            end if;
                        else 
                            \LoopCases::BreakInLoop(Int32).0._State\ := \LoopCases::BreakInLoop(Int32).0._State_4\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.8769
                    when \LoopCases::BreakInLoop(Int32).0._State_4\ => 
                        -- State after the while loop which was started in state \LoopCases::BreakInLoop(Int32).0._State_2\.
                        \LoopCases::BreakInLoop(Int32).0._State\ := \LoopCases::BreakInLoop(Int32).0._State_1\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \LoopCases::BreakInLoop(Int32).0._State_5\ => 
                        -- State after the if-else which was started in state \LoopCases::BreakInLoop(Int32).0._State_3\.
                        -- The following section was transformed from the .NET statement below:
                        -- num2 = num2 + 1;
                        -- 
                        \LoopCases::BreakInLoop(Int32).0.binaryOperationResult.3\ := \LoopCases::BreakInLoop(Int32).0.num2\ + to_signed(1, 32);
                        \LoopCases::BreakInLoop(Int32).0.num2\ := \LoopCases::BreakInLoop(Int32).0.binaryOperationResult.3\;
                        -- Returning to the repeated state of the while loop which was started in state \LoopCases::BreakInLoop(Int32).0._State_2\ if the loop wasn't exited with a state change.
                        if (\LoopCases::BreakInLoop(Int32).0._State\ = \LoopCases::BreakInLoop(Int32).0._State_5\) then 
                            \LoopCases::BreakInLoop(Int32).0._State\ := \LoopCases::BreakInLoop(Int32).0._State_3\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.3263
                    when \LoopCases::BreakInLoop(Int32).0._State_6\ => 
                        -- True branch of the if-else started in state \LoopCases::BreakInLoop(Int32).0._State_3\.
                        -- The following section was transformed from the .NET statement below:
                        -- {
                        -- 	break;
                        -- }
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- break;
                        -- 
                        -- Exiting the while loop with a break statement.
                        \LoopCases::BreakInLoop(Int32).0._State\ := \LoopCases::BreakInLoop(Int32).0._State_4\;
                        -- Going to the state after the if-else which was started in state \LoopCases::BreakInLoop(Int32).0._State_3\.
                        if (\LoopCases::BreakInLoop(Int32).0._State\ = \LoopCases::BreakInLoop(Int32).0._State_6\) then 
                            \LoopCases::BreakInLoop(Int32).0._State\ := \LoopCases::BreakInLoop(Int32).0._State_5\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                end case;
            end if;
        end if;
    end process;
    -- System.Void Hast.TestInputs.Various.LoopCases::BreakInLoop(System.Int32).0 state machine end


    -- System.Void Hast.TestInputs.Various.LoopCases::BreakInLoopInLoop(System.Int32).0 state machine start
    \LoopCases::BreakInLoopInLoop(Int32).0._StateMachine\: process (\Clock\) 
        Variable \LoopCases::BreakInLoopInLoop(Int32).0._State\: \LoopCases::BreakInLoopInLoop(Int32).0._States\ := \LoopCases::BreakInLoopInLoop(Int32).0._State_0\;
        Variable \LoopCases::BreakInLoopInLoop(Int32).0.input\: signed(31 downto 0) := to_signed(0, 32);
        Variable \LoopCases::BreakInLoopInLoop(Int32).0.num\: signed(31 downto 0) := to_signed(0, 32);
        Variable \LoopCases::BreakInLoopInLoop(Int32).0.num2\: signed(31 downto 0) := to_signed(0, 32);
        Variable \LoopCases::BreakInLoopInLoop(Int32).0.binaryOperationResult.0\: boolean := false;
        Variable \LoopCases::BreakInLoopInLoop(Int32).0.num3\: signed(31 downto 0) := to_signed(0, 32);
        Variable \LoopCases::BreakInLoopInLoop(Int32).0.binaryOperationResult.1\: boolean := false;
        Variable \LoopCases::BreakInLoopInLoop(Int32).0.binaryOperationResult.2\: signed(31 downto 0) := to_signed(0, 32);
        Variable \LoopCases::BreakInLoopInLoop(Int32).0.binaryOperationResult.3\: boolean := false;
        Variable \LoopCases::BreakInLoopInLoop(Int32).0.binaryOperationResult.4\: signed(31 downto 0) := to_signed(0, 32);
        Variable \LoopCases::BreakInLoopInLoop(Int32).0.binaryOperationResult.5\: signed(31 downto 0) := to_signed(0, 32);
    begin 
        if (rising_edge(\Clock\)) then 
            if (\Reset\ = '1') then 
                -- Synchronous reset
                \LoopCases::BreakInLoopInLoop(Int32).0._Finished\ <= false;
                \LoopCases::BreakInLoopInLoop(Int32).0._State\ := \LoopCases::BreakInLoopInLoop(Int32).0._State_0\;
                \LoopCases::BreakInLoopInLoop(Int32).0.input\ := to_signed(0, 32);
                \LoopCases::BreakInLoopInLoop(Int32).0.num\ := to_signed(0, 32);
                \LoopCases::BreakInLoopInLoop(Int32).0.num2\ := to_signed(0, 32);
                \LoopCases::BreakInLoopInLoop(Int32).0.binaryOperationResult.0\ := false;
                \LoopCases::BreakInLoopInLoop(Int32).0.num3\ := to_signed(0, 32);
                \LoopCases::BreakInLoopInLoop(Int32).0.binaryOperationResult.1\ := false;
                \LoopCases::BreakInLoopInLoop(Int32).0.binaryOperationResult.2\ := to_signed(0, 32);
                \LoopCases::BreakInLoopInLoop(Int32).0.binaryOperationResult.3\ := false;
                \LoopCases::BreakInLoopInLoop(Int32).0.binaryOperationResult.4\ := to_signed(0, 32);
                \LoopCases::BreakInLoopInLoop(Int32).0.binaryOperationResult.5\ := to_signed(0, 32);
            else 
                case \LoopCases::BreakInLoopInLoop(Int32).0._State\ is 
                    when \LoopCases::BreakInLoopInLoop(Int32).0._State_0\ => 
                        -- Start state
                        -- Waiting for the start signal.
                        if (\LoopCases::BreakInLoopInLoop(Int32).0._Started\ = true) then 
                            \LoopCases::BreakInLoopInLoop(Int32).0._State\ := \LoopCases::BreakInLoopInLoop(Int32).0._State_2\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \LoopCases::BreakInLoopInLoop(Int32).0._State_1\ => 
                        -- Final state
                        -- Signaling finished until Started is pulled back to false, then returning to the start state.
                        if (\LoopCases::BreakInLoopInLoop(Int32).0._Started\ = true) then 
                            \LoopCases::BreakInLoopInLoop(Int32).0._Finished\ <= true;
                        else 
                            \LoopCases::BreakInLoopInLoop(Int32).0._Finished\ <= false;
                            \LoopCases::BreakInLoopInLoop(Int32).0._State\ := \LoopCases::BreakInLoopInLoop(Int32).0._State_0\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \LoopCases::BreakInLoopInLoop(Int32).0._State_2\ => 
                        \LoopCases::BreakInLoopInLoop(Int32).0.input\ := \LoopCases::BreakInLoopInLoop(Int32).0.input.parameter.In\;
                        -- The following section was transformed from the .NET statement below:
                        -- int num;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num = input;
                        -- 
                        \LoopCases::BreakInLoopInLoop(Int32).0.num\ := \LoopCases::BreakInLoopInLoop(Int32).0.input\;
                        -- The following section was transformed from the .NET statement below:
                        -- int num2;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num2 = 0;
                        -- 
                        \LoopCases::BreakInLoopInLoop(Int32).0.num2\ := to_signed(0, 32);
                        -- The following section was transformed from the .NET statement below:
                        -- while (num2 < input) {
                        -- 	int num3;
                        -- 	num3 = 0;
                        -- 	while (num3 < num2) {
                        -- 		num = num + num2;
                        -- 		if (num > 10) {
                        -- 			break;
                        -- 		}
                        -- 		num3 = num3 + 1;
                        -- 	}
                        -- 	num2 = num2 + 1;
                        -- }
                        -- 
                        -- Starting a while loop.
                        \LoopCases::BreakInLoopInLoop(Int32).0._State\ := \LoopCases::BreakInLoopInLoop(Int32).0._State_3\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \LoopCases::BreakInLoopInLoop(Int32).0._State_3\ => 
                        -- Repeated state of the while loop which was started in state \LoopCases::BreakInLoopInLoop(Int32).0._State_2\.
                        -- The while loop's condition:
                        \LoopCases::BreakInLoopInLoop(Int32).0.binaryOperationResult.0\ := \LoopCases::BreakInLoopInLoop(Int32).0.num2\ < \LoopCases::BreakInLoopInLoop(Int32).0.input\;
                        if (\LoopCases::BreakInLoopInLoop(Int32).0.binaryOperationResult.0\) then 
                            -- The following section was transformed from the .NET statement below:
                            -- {
                            -- 	int num3;
                            -- 	num3 = 0;
                            -- 	while (num3 < num2) {
                            -- 		num = num + num2;
                            -- 		if (num > 10) {
                            -- 			break;
                            -- 		}
                            -- 		num3 = num3 + 1;
                            -- 	}
                            -- 	num2 = num2 + 1;
                            -- }
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- int num3;
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- num3 = 0;
                            -- 
                            \LoopCases::BreakInLoopInLoop(Int32).0.num3\ := to_signed(0, 32);
                            -- The following section was transformed from the .NET statement below:
                            -- while (num3 < num2) {
                            -- 	num = num + num2;
                            -- 	if (num > 10) {
                            -- 		break;
                            -- 	}
                            -- 	num3 = num3 + 1;
                            -- }
                            -- 
                            -- Starting a while loop.
                            \LoopCases::BreakInLoopInLoop(Int32).0._State\ := \LoopCases::BreakInLoopInLoop(Int32).0._State_5\;
                        else 
                            \LoopCases::BreakInLoopInLoop(Int32).0._State\ := \LoopCases::BreakInLoopInLoop(Int32).0._State_4\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.2753
                    when \LoopCases::BreakInLoopInLoop(Int32).0._State_4\ => 
                        -- State after the while loop which was started in state \LoopCases::BreakInLoopInLoop(Int32).0._State_2\.
                        \LoopCases::BreakInLoopInLoop(Int32).0._State\ := \LoopCases::BreakInLoopInLoop(Int32).0._State_1\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \LoopCases::BreakInLoopInLoop(Int32).0._State_5\ => 
                        -- Repeated state of the while loop which was started in state \LoopCases::BreakInLoopInLoop(Int32).0._State_3\.
                        -- The while loop's condition:
                        \LoopCases::BreakInLoopInLoop(Int32).0.binaryOperationResult.1\ := \LoopCases::BreakInLoopInLoop(Int32).0.num3\ < \LoopCases::BreakInLoopInLoop(Int32).0.num2\;
                        if (\LoopCases::BreakInLoopInLoop(Int32).0.binaryOperationResult.1\) then 
                            -- The following section was transformed from the .NET statement below:
                            -- {
                            -- 	num = num + num2;
                            -- 	if (num > 10) {
                            -- 		break;
                            -- 	}
                            -- 	num3 = num3 + 1;
                            -- }
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- num = num + num2;
                            -- 
                            \LoopCases::BreakInLoopInLoop(Int32).0.binaryOperationResult.2\ := \LoopCases::BreakInLoopInLoop(Int32).0.num\ + \LoopCases::BreakInLoopInLoop(Int32).0.num2\;
                            \LoopCases::BreakInLoopInLoop(Int32).0.num\ := \LoopCases::BreakInLoopInLoop(Int32).0.binaryOperationResult.2\;
                            -- The following section was transformed from the .NET statement below:
                            -- if (num > 10) {
                            -- 	break;
                            -- }
                            -- 
                            \LoopCases::BreakInLoopInLoop(Int32).0.binaryOperationResult.3\ := \LoopCases::BreakInLoopInLoop(Int32).0.num\ > to_signed(10, 32);

                            -- This if-else was transformed from a .NET if-else. It spans across multiple states:
                            --     * The true branch starts in state \LoopCases::BreakInLoopInLoop(Int32).0._State_8\ and ends in state \LoopCases::BreakInLoopInLoop(Int32).0._State_8\.
                            --     * Execution after either branch will continue in the following state: \LoopCases::BreakInLoopInLoop(Int32).0._State_7\.

                            if (\LoopCases::BreakInLoopInLoop(Int32).0.binaryOperationResult.3\) then 
                                \LoopCases::BreakInLoopInLoop(Int32).0._State\ := \LoopCases::BreakInLoopInLoop(Int32).0._State_8\;
                            else 
                                -- There was no false branch, so going directly to the state after the if-else.
                                \LoopCases::BreakInLoopInLoop(Int32).0._State\ := \LoopCases::BreakInLoopInLoop(Int32).0._State_7\;
                            end if;
                        else 
                            \LoopCases::BreakInLoopInLoop(Int32).0._State\ := \LoopCases::BreakInLoopInLoop(Int32).0._State_6\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.8769
                    when \LoopCases::BreakInLoopInLoop(Int32).0._State_6\ => 
                        -- State after the while loop which was started in state \LoopCases::BreakInLoopInLoop(Int32).0._State_3\.
                        -- The following section was transformed from the .NET statement below:
                        -- num2 = num2 + 1;
                        -- 
                        \LoopCases::BreakInLoopInLoop(Int32).0.binaryOperationResult.5\ := \LoopCases::BreakInLoopInLoop(Int32).0.num2\ + to_signed(1, 32);
                        \LoopCases::BreakInLoopInLoop(Int32).0.num2\ := \LoopCases::BreakInLoopInLoop(Int32).0.binaryOperationResult.5\;
                        -- Returning to the repeated state of the while loop which was started in state \LoopCases::BreakInLoopInLoop(Int32).0._State_2\ if the loop wasn't exited with a state change.
                        if (\LoopCases::BreakInLoopInLoop(Int32).0._State\ = \LoopCases::BreakInLoopInLoop(Int32).0._State_6\) then 
                            \LoopCases::BreakInLoopInLoop(Int32).0._State\ := \LoopCases::BreakInLoopInLoop(Int32).0._State_3\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.3263
                    when \LoopCases::BreakInLoopInLoop(Int32).0._State_7\ => 
                        -- State after the if-else which was started in state \LoopCases::BreakInLoopInLoop(Int32).0._State_5\.
                        -- The following section was transformed from the .NET statement below:
                        -- num3 = num3 + 1;
                        -- 
                        \LoopCases::BreakInLoopInLoop(Int32).0.binaryOperationResult.4\ := \LoopCases::BreakInLoopInLoop(Int32).0.num3\ + to_signed(1, 32);
                        \LoopCases::BreakInLoopInLoop(Int32).0.num3\ := \LoopCases::BreakInLoopInLoop(Int32).0.binaryOperationResult.4\;
                        -- Returning to the repeated state of the while loop which was started in state \LoopCases::BreakInLoopInLoop(Int32).0._State_3\ if the loop wasn't exited with a state change.
                        if (\LoopCases::BreakInLoopInLoop(Int32).0._State\ = \LoopCases::BreakInLoopInLoop(Int32).0._State_7\) then 
                            \LoopCases::BreakInLoopInLoop(Int32).0._State\ := \LoopCases::BreakInLoopInLoop(Int32).0._State_5\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.3263
                    when \LoopCases::BreakInLoopInLoop(Int32).0._State_8\ => 
                        -- True branch of the if-else started in state \LoopCases::BreakInLoopInLoop(Int32).0._State_5\.
                        -- The following section was transformed from the .NET statement below:
                        -- {
                        -- 	break;
                        -- }
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- break;
                        -- 
                        -- Exiting the while loop with a break statement.
                        \LoopCases::BreakInLoopInLoop(Int32).0._State\ := \LoopCases::BreakInLoopInLoop(Int32).0._State_6\;
                        -- Going to the state after the if-else which was started in state \LoopCases::BreakInLoopInLoop(Int32).0._State_5\.
                        if (\LoopCases::BreakInLoopInLoop(Int32).0._State\ = \LoopCases::BreakInLoopInLoop(Int32).0._State_8\) then 
                            \LoopCases::BreakInLoopInLoop(Int32).0._State\ := \LoopCases::BreakInLoopInLoop(Int32).0._State_7\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                end case;
            end if;
        end if;
    end process;
    -- System.Void Hast.TestInputs.Various.LoopCases::BreakInLoopInLoop(System.Int32).0 state machine end


    -- System.Void Hast.TestInputs.Various.ObjectUsingCases::NullUsage().0 state machine start
    \ObjectUsingCases::NullUsage().0._StateMachine\: process (\Clock\) 
        Variable \ObjectUsingCases::NullUsage().0._State\: \ObjectUsingCases::NullUsage().0._States\ := \ObjectUsingCases::NullUsage().0._State_0\;
        Variable \ObjectUsingCases::NullUsage().0.myClass\: \Hast.TestInputs.Various.ObjectUsingCases+MyClass\;
        Variable \ObjectUsingCases::NullUsage().0.binaryOperationResult.0\: boolean := false;
        Variable \ObjectUsingCases::NullUsage().0.binaryOperationResult.1\: boolean := false;
    begin 
        if (rising_edge(\Clock\)) then 
            if (\Reset\ = '1') then 
                -- Synchronous reset
                \ObjectUsingCases::NullUsage().0._Finished\ <= false;
                \ObjectUsingCases::NullUsage().0._State\ := \ObjectUsingCases::NullUsage().0._State_0\;
                \ObjectUsingCases::NullUsage().0.binaryOperationResult.0\ := false;
                \ObjectUsingCases::NullUsage().0.binaryOperationResult.1\ := false;
            else 
                case \ObjectUsingCases::NullUsage().0._State\ is 
                    when \ObjectUsingCases::NullUsage().0._State_0\ => 
                        -- Start state
                        -- Waiting for the start signal.
                        if (\ObjectUsingCases::NullUsage().0._Started\ = true) then 
                            \ObjectUsingCases::NullUsage().0._State\ := \ObjectUsingCases::NullUsage().0._State_2\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \ObjectUsingCases::NullUsage().0._State_1\ => 
                        -- Final state
                        -- Signaling finished until Started is pulled back to false, then returning to the start state.
                        if (\ObjectUsingCases::NullUsage().0._Started\ = true) then 
                            \ObjectUsingCases::NullUsage().0._Finished\ <= true;
                        else 
                            \ObjectUsingCases::NullUsage().0._Finished\ <= false;
                            \ObjectUsingCases::NullUsage().0._State\ := \ObjectUsingCases::NullUsage().0._State_0\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \ObjectUsingCases::NullUsage().0._State_2\ => 
                        -- The following section was transformed from the .NET statement below:
                        -- MyClass myClass;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- myClass = new MyClass {
                        -- 
                        -- };
                        -- 
                        -- Initializing record fields to their defaults.
                        \ObjectUsingCases::NullUsage().0.myClass\.\IsNull\ := false;
                        \ObjectUsingCases::NullUsage().0.myClass\.\MyProperty\ := to_signed(0, 32);
                        -- The following section was transformed from the .NET statement below:
                        -- myClass.MyProperty = 5;
                        -- 
                        \ObjectUsingCases::NullUsage().0.myClass\.\MyProperty\ := to_signed(5, 32);
                        -- The following section was transformed from the .NET statement below:
                        -- if (myClass == null) {
                        -- 	myClass = new MyClass ();
                        -- }
                        -- 
                        \ObjectUsingCases::NullUsage().0.binaryOperationResult.0\ := \ObjectUsingCases::NullUsage().0.myClass\.\IsNull\ = true;

                        -- This if-else was transformed from a .NET if-else. It spans across multiple states:
                        --     * The true branch starts in state \ObjectUsingCases::NullUsage().0._State_4\ and ends in state \ObjectUsingCases::NullUsage().0._State_4\.
                        --     * Execution after either branch will continue in the following state: \ObjectUsingCases::NullUsage().0._State_3\.

                        if (\ObjectUsingCases::NullUsage().0.binaryOperationResult.0\) then 
                            \ObjectUsingCases::NullUsage().0._State\ := \ObjectUsingCases::NullUsage().0._State_4\;
                        else 
                            -- There was no false branch, so going directly to the state after the if-else.
                            \ObjectUsingCases::NullUsage().0._State\ := \ObjectUsingCases::NullUsage().0._State_3\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.1238
                    when \ObjectUsingCases::NullUsage().0._State_3\ => 
                        -- State after the if-else which was started in state \ObjectUsingCases::NullUsage().0._State_2\.
                        -- The following section was transformed from the .NET statement below:
                        -- myClass = null;
                        -- 
                        \ObjectUsingCases::NullUsage().0.myClass\.\IsNull\ := true;
                        -- The following section was transformed from the .NET statement below:
                        -- if (myClass != null) {
                        -- 	myClass.MyProperty = 10;
                        -- }
                        -- 
                        \ObjectUsingCases::NullUsage().0.binaryOperationResult.1\ := \ObjectUsingCases::NullUsage().0.myClass\.\IsNull\ /= true;

                        -- This if-else was transformed from a .NET if-else. It spans across multiple states:
                        --     * The true branch starts in state \ObjectUsingCases::NullUsage().0._State_6\ and ends in state \ObjectUsingCases::NullUsage().0._State_6\.
                        --     * Execution after either branch will continue in the following state: \ObjectUsingCases::NullUsage().0._State_5\.

                        if (\ObjectUsingCases::NullUsage().0.binaryOperationResult.1\) then 
                            \ObjectUsingCases::NullUsage().0._State\ := \ObjectUsingCases::NullUsage().0._State_6\;
                        else 
                            -- There was no false branch, so going directly to the state after the if-else.
                            \ObjectUsingCases::NullUsage().0._State\ := \ObjectUsingCases::NullUsage().0._State_5\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.1238
                    when \ObjectUsingCases::NullUsage().0._State_4\ => 
                        -- True branch of the if-else started in state \ObjectUsingCases::NullUsage().0._State_2\.
                        -- The following section was transformed from the .NET statement below:
                        -- {
                        -- 	myClass = new MyClass ();
                        -- }
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- myClass = new MyClass ();
                        -- 
                        -- Initializing record fields to their defaults.
                        \ObjectUsingCases::NullUsage().0.myClass\.\IsNull\ := false;
                        \ObjectUsingCases::NullUsage().0.myClass\.\MyProperty\ := to_signed(0, 32);
                        -- Going to the state after the if-else which was started in state \ObjectUsingCases::NullUsage().0._State_2\.
                        if (\ObjectUsingCases::NullUsage().0._State\ = \ObjectUsingCases::NullUsage().0._State_4\) then 
                            \ObjectUsingCases::NullUsage().0._State\ := \ObjectUsingCases::NullUsage().0._State_3\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \ObjectUsingCases::NullUsage().0._State_5\ => 
                        -- State after the if-else which was started in state \ObjectUsingCases::NullUsage().0._State_3\.
                        \ObjectUsingCases::NullUsage().0._State\ := \ObjectUsingCases::NullUsage().0._State_1\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \ObjectUsingCases::NullUsage().0._State_6\ => 
                        -- True branch of the if-else started in state \ObjectUsingCases::NullUsage().0._State_3\.
                        -- The following section was transformed from the .NET statement below:
                        -- {
                        -- 	myClass.MyProperty = 10;
                        -- }
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- myClass.MyProperty = 10;
                        -- 
                        \ObjectUsingCases::NullUsage().0.myClass\.\MyProperty\ := to_signed(10, 32);
                        -- Going to the state after the if-else which was started in state \ObjectUsingCases::NullUsage().0._State_3\.
                        if (\ObjectUsingCases::NullUsage().0._State\ = \ObjectUsingCases::NullUsage().0._State_6\) then 
                            \ObjectUsingCases::NullUsage().0._State\ := \ObjectUsingCases::NullUsage().0._State_5\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                end case;
            end if;
        end if;
    end process;
    -- System.Void Hast.TestInputs.Various.ObjectUsingCases::NullUsage().0 state machine end


    -- System.Void Hast.TestInputs.Various.ObjectUsingCases::VoidReturn(System.Int32).0 state machine start
    \ObjectUsingCases::VoidReturn(Int32).0._StateMachine\: process (\Clock\) 
        Variable \ObjectUsingCases::VoidReturn(Int32).0._State\: \ObjectUsingCases::VoidReturn(Int32).0._States\ := \ObjectUsingCases::VoidReturn(Int32).0._State_0\;
        Variable \ObjectUsingCases::VoidReturn(Int32).0.input\: signed(31 downto 0) := to_signed(0, 32);
        Variable \ObjectUsingCases::VoidReturn(Int32).0.myClass\: \Hast.TestInputs.Various.ObjectUsingCases+MyClass\;
    begin 
        if (rising_edge(\Clock\)) then 
            if (\Reset\ = '1') then 
                -- Synchronous reset
                \ObjectUsingCases::VoidReturn(Int32).0._Finished\ <= false;
                \ObjectUsingCases::VoidReturn(Int32).0.ObjectUsingCases::VoidMethod(ObjectUsingCases+MyClass)._Started.0\ <= false;
                \ObjectUsingCases::VoidReturn(Int32).0._State\ := \ObjectUsingCases::VoidReturn(Int32).0._State_0\;
                \ObjectUsingCases::VoidReturn(Int32).0.input\ := to_signed(0, 32);
            else 
                case \ObjectUsingCases::VoidReturn(Int32).0._State\ is 
                    when \ObjectUsingCases::VoidReturn(Int32).0._State_0\ => 
                        -- Start state
                        -- Waiting for the start signal.
                        if (\ObjectUsingCases::VoidReturn(Int32).0._Started\ = true) then 
                            \ObjectUsingCases::VoidReturn(Int32).0._State\ := \ObjectUsingCases::VoidReturn(Int32).0._State_2\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \ObjectUsingCases::VoidReturn(Int32).0._State_1\ => 
                        -- Final state
                        -- Signaling finished until Started is pulled back to false, then returning to the start state.
                        if (\ObjectUsingCases::VoidReturn(Int32).0._Started\ = true) then 
                            \ObjectUsingCases::VoidReturn(Int32).0._Finished\ <= true;
                        else 
                            \ObjectUsingCases::VoidReturn(Int32).0._Finished\ <= false;
                            \ObjectUsingCases::VoidReturn(Int32).0._State\ := \ObjectUsingCases::VoidReturn(Int32).0._State_0\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \ObjectUsingCases::VoidReturn(Int32).0._State_2\ => 
                        \ObjectUsingCases::VoidReturn(Int32).0.input\ := \ObjectUsingCases::VoidReturn(Int32).0.input.parameter.In\;
                        -- The following section was transformed from the .NET statement below:
                        -- MyClass myClass;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- myClass = new MyClass {
                        -- 
                        -- };
                        -- 
                        -- Initializing record fields to their defaults.
                        \ObjectUsingCases::VoidReturn(Int32).0.myClass\.\IsNull\ := false;
                        \ObjectUsingCases::VoidReturn(Int32).0.myClass\.\MyProperty\ := to_signed(0, 32);
                        -- The following section was transformed from the .NET statement below:
                        -- myClass.MyProperty = input;
                        -- 
                        \ObjectUsingCases::VoidReturn(Int32).0.myClass\.\MyProperty\ := \ObjectUsingCases::VoidReturn(Int32).0.input\;
                        -- The following section was transformed from the .NET statement below:
                        -- this.VoidMethod (myClass);
                        -- 
                        -- Starting state machine invocation for the following method: System.Void Hast.TestInputs.Various.ObjectUsingCases::VoidMethod(Hast.TestInputs.Various.ObjectUsingCases+MyClass)
                        \ObjectUsingCases::VoidReturn(Int32).0.ObjectUsingCases::VoidMethod(ObjectUsingCases+MyClass).myClass.parameter.Out.0\ <= \ObjectUsingCases::VoidReturn(Int32).0.myClass\;
                        \ObjectUsingCases::VoidReturn(Int32).0.ObjectUsingCases::VoidMethod(ObjectUsingCases+MyClass)._Started.0\ <= true;
                        \ObjectUsingCases::VoidReturn(Int32).0._State\ := \ObjectUsingCases::VoidReturn(Int32).0._State_3\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \ObjectUsingCases::VoidReturn(Int32).0._State_3\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Void Hast.TestInputs.Various.ObjectUsingCases::VoidMethod(Hast.TestInputs.Various.ObjectUsingCases+MyClass)
                        if (\ObjectUsingCases::VoidReturn(Int32).0.ObjectUsingCases::VoidMethod(ObjectUsingCases+MyClass)._Started.0\ = \ObjectUsingCases::VoidReturn(Int32).0.ObjectUsingCases::VoidMethod(ObjectUsingCases+MyClass)._Finished.0\) then 
                            \ObjectUsingCases::VoidReturn(Int32).0.ObjectUsingCases::VoidMethod(ObjectUsingCases+MyClass)._Started.0\ <= false;
                            \ObjectUsingCases::VoidReturn(Int32).0.myClass\ := \ObjectUsingCases::VoidReturn(Int32).0.ObjectUsingCases::VoidMethod(ObjectUsingCases+MyClass).myClass.parameter.In.0\;
                            \ObjectUsingCases::VoidReturn(Int32).0._State\ := \ObjectUsingCases::VoidReturn(Int32).0._State_1\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                end case;
            end if;
        end if;
    end process;
    -- System.Void Hast.TestInputs.Various.ObjectUsingCases::VoidReturn(System.Int32).0 state machine end


    -- System.Void Hast.TestInputs.Various.ObjectUsingCases::ReferenceAssignment(System.Int32).0 state machine start
    \ObjectUsingCases::ReferenceAssignment(Int32).0._StateMachine\: process (\Clock\) 
        Variable \ObjectUsingCases::ReferenceAssignment(Int32).0._State\: \ObjectUsingCases::ReferenceAssignment(Int32).0._States\ := \ObjectUsingCases::ReferenceAssignment(Int32).0._State_0\;
        Variable \ObjectUsingCases::ReferenceAssignment(Int32).0.input\: signed(31 downto 0) := to_signed(0, 32);
        Variable \ObjectUsingCases::ReferenceAssignment(Int32).0.myClass\: \Hast.TestInputs.Various.ObjectUsingCases+MyClass\;
        Variable \ObjectUsingCases::ReferenceAssignment(Int32).0.binaryOperationResult.0\: signed(31 downto 0) := to_signed(0, 32);
        Variable \ObjectUsingCases::ReferenceAssignment(Int32).0.binaryOperationResult.1\: signed(31 downto 0) := to_signed(0, 32);
    begin 
        if (rising_edge(\Clock\)) then 
            if (\Reset\ = '1') then 
                -- Synchronous reset
                \ObjectUsingCases::ReferenceAssignment(Int32).0._Finished\ <= false;
                \ObjectUsingCases::ReferenceAssignment(Int32).0._State\ := \ObjectUsingCases::ReferenceAssignment(Int32).0._State_0\;
                \ObjectUsingCases::ReferenceAssignment(Int32).0.input\ := to_signed(0, 32);
                \ObjectUsingCases::ReferenceAssignment(Int32).0.binaryOperationResult.0\ := to_signed(0, 32);
                \ObjectUsingCases::ReferenceAssignment(Int32).0.binaryOperationResult.1\ := to_signed(0, 32);
            else 
                case \ObjectUsingCases::ReferenceAssignment(Int32).0._State\ is 
                    when \ObjectUsingCases::ReferenceAssignment(Int32).0._State_0\ => 
                        -- Start state
                        -- Waiting for the start signal.
                        if (\ObjectUsingCases::ReferenceAssignment(Int32).0._Started\ = true) then 
                            \ObjectUsingCases::ReferenceAssignment(Int32).0._State\ := \ObjectUsingCases::ReferenceAssignment(Int32).0._State_2\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \ObjectUsingCases::ReferenceAssignment(Int32).0._State_1\ => 
                        -- Final state
                        -- Signaling finished until Started is pulled back to false, then returning to the start state.
                        if (\ObjectUsingCases::ReferenceAssignment(Int32).0._Started\ = true) then 
                            \ObjectUsingCases::ReferenceAssignment(Int32).0._Finished\ <= true;
                        else 
                            \ObjectUsingCases::ReferenceAssignment(Int32).0._Finished\ <= false;
                            \ObjectUsingCases::ReferenceAssignment(Int32).0._State\ := \ObjectUsingCases::ReferenceAssignment(Int32).0._State_0\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \ObjectUsingCases::ReferenceAssignment(Int32).0._State_2\ => 
                        \ObjectUsingCases::ReferenceAssignment(Int32).0.input\ := \ObjectUsingCases::ReferenceAssignment(Int32).0.input.parameter.In\;
                        -- The following section was transformed from the .NET statement below:
                        -- MyClass myClass;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- myClass = new MyClass {
                        -- 
                        -- };
                        -- 
                        -- Initializing record fields to their defaults.
                        \ObjectUsingCases::ReferenceAssignment(Int32).0.myClass\.\IsNull\ := false;
                        \ObjectUsingCases::ReferenceAssignment(Int32).0.myClass\.\MyProperty\ := to_signed(0, 32);
                        -- The following section was transformed from the .NET statement below:
                        -- myClass.MyProperty = input;
                        -- 
                        \ObjectUsingCases::ReferenceAssignment(Int32).0.myClass\.\MyProperty\ := \ObjectUsingCases::ReferenceAssignment(Int32).0.input\;
                        -- The following section was transformed from the .NET statement below:
                        -- myClass.MyProperty = myClass.MyProperty + 1;
                        -- 
                        \ObjectUsingCases::ReferenceAssignment(Int32).0.binaryOperationResult.0\ := \ObjectUsingCases::ReferenceAssignment(Int32).0.myClass\.\MyProperty\ + to_signed(1, 32);
                        \ObjectUsingCases::ReferenceAssignment(Int32).0.myClass\.\MyProperty\ := \ObjectUsingCases::ReferenceAssignment(Int32).0.binaryOperationResult.0\;
                        -- The following section was transformed from the .NET statement below:
                        -- myClass.MyProperty = myClass.MyProperty + 1;
                        -- 
                        \ObjectUsingCases::ReferenceAssignment(Int32).0.binaryOperationResult.1\ := \ObjectUsingCases::ReferenceAssignment(Int32).0.myClass\.\MyProperty\ + to_signed(1, 32);
                        \ObjectUsingCases::ReferenceAssignment(Int32).0.myClass\.\MyProperty\ := \ObjectUsingCases::ReferenceAssignment(Int32).0.binaryOperationResult.1\;
                        \ObjectUsingCases::ReferenceAssignment(Int32).0._State\ := \ObjectUsingCases::ReferenceAssignment(Int32).0._State_1\;
                        -- Clock cycles needed to complete this state (approximation): 0.6526
                end case;
            end if;
        end if;
    end process;
    -- System.Void Hast.TestInputs.Various.ObjectUsingCases::ReferenceAssignment(System.Int32).0 state machine end


    -- System.Void Hast.TestInputs.Various.ObjectUsingCases::VoidMethod(Hast.TestInputs.Various.ObjectUsingCases+MyClass).0 state machine start
    \ObjectUsingCases::VoidMethod(ObjectUsingCases+MyClass).0._StateMachine\: process (\Clock\) 
        Variable \ObjectUsingCases::VoidMethod(ObjectUsingCases+MyClass).0._State\: \ObjectUsingCases::VoidMethod(ObjectUsingCases+MyClass).0._States\ := \ObjectUsingCases::VoidMethod(ObjectUsingCases+MyClass).0._State_0\;
        Variable \ObjectUsingCases::VoidMethod(ObjectUsingCases+MyClass).0.myClass\: \Hast.TestInputs.Various.ObjectUsingCases+MyClass\;
        Variable \ObjectUsingCases::VoidMethod(ObjectUsingCases+MyClass).0.binaryOperationResult.0\: boolean := false;
        Variable \ObjectUsingCases::VoidMethod(ObjectUsingCases+MyClass).0.binaryOperationResult.1\: signed(31 downto 0) := to_signed(0, 32);
        Variable \ObjectUsingCases::VoidMethod(ObjectUsingCases+MyClass).0.binaryOperationResult.2\: boolean := false;
    begin 
        if (rising_edge(\Clock\)) then 
            if (\Reset\ = '1') then 
                -- Synchronous reset
                \ObjectUsingCases::VoidMethod(ObjectUsingCases+MyClass).0._Finished\ <= false;
                \ObjectUsingCases::VoidMethod(ObjectUsingCases+MyClass).0._State\ := \ObjectUsingCases::VoidMethod(ObjectUsingCases+MyClass).0._State_0\;
                \ObjectUsingCases::VoidMethod(ObjectUsingCases+MyClass).0.binaryOperationResult.0\ := false;
                \ObjectUsingCases::VoidMethod(ObjectUsingCases+MyClass).0.binaryOperationResult.1\ := to_signed(0, 32);
                \ObjectUsingCases::VoidMethod(ObjectUsingCases+MyClass).0.binaryOperationResult.2\ := false;
            else 
                case \ObjectUsingCases::VoidMethod(ObjectUsingCases+MyClass).0._State\ is 
                    when \ObjectUsingCases::VoidMethod(ObjectUsingCases+MyClass).0._State_0\ => 
                        -- Start state
                        -- Waiting for the start signal.
                        if (\ObjectUsingCases::VoidMethod(ObjectUsingCases+MyClass).0._Started\ = true) then 
                            \ObjectUsingCases::VoidMethod(ObjectUsingCases+MyClass).0._State\ := \ObjectUsingCases::VoidMethod(ObjectUsingCases+MyClass).0._State_2\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \ObjectUsingCases::VoidMethod(ObjectUsingCases+MyClass).0._State_1\ => 
                        -- Final state
                        -- Signaling finished until Started is pulled back to false, then returning to the start state.
                        if (\ObjectUsingCases::VoidMethod(ObjectUsingCases+MyClass).0._Started\ = true) then 
                            \ObjectUsingCases::VoidMethod(ObjectUsingCases+MyClass).0._Finished\ <= true;
                        else 
                            \ObjectUsingCases::VoidMethod(ObjectUsingCases+MyClass).0._Finished\ <= false;
                            \ObjectUsingCases::VoidMethod(ObjectUsingCases+MyClass).0._State\ := \ObjectUsingCases::VoidMethod(ObjectUsingCases+MyClass).0._State_0\;
                        end if;
                        -- Writing back out-flowing parameters so any changes made in this state machine will be reflected in the invoking one too.
                        \ObjectUsingCases::VoidMethod(ObjectUsingCases+MyClass).0.myClass.parameter.Out\ <= \ObjectUsingCases::VoidMethod(ObjectUsingCases+MyClass).0.myClass\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \ObjectUsingCases::VoidMethod(ObjectUsingCases+MyClass).0._State_2\ => 
                        \ObjectUsingCases::VoidMethod(ObjectUsingCases+MyClass).0.myClass\ := \ObjectUsingCases::VoidMethod(ObjectUsingCases+MyClass).0.myClass.parameter.In\;
                        -- The following section was transformed from the .NET statement below:
                        -- if (myClass.MyProperty < 10) {
                        -- 	myClass.MyProperty = myClass.MyProperty * 10;
                        -- 	if (myClass.MyProperty == 10) {
                        -- 		return;
                        -- 	}
                        -- }
                        -- 
                        \ObjectUsingCases::VoidMethod(ObjectUsingCases+MyClass).0.binaryOperationResult.0\ := \ObjectUsingCases::VoidMethod(ObjectUsingCases+MyClass).0.myClass\.\MyProperty\ < to_signed(10, 32);

                        -- This if-else was transformed from a .NET if-else. It spans across multiple states:
                        --     * The true branch starts in state \ObjectUsingCases::VoidMethod(ObjectUsingCases+MyClass).0._State_4\ and ends in state \ObjectUsingCases::VoidMethod(ObjectUsingCases+MyClass).0._State_5\.
                        --     * Execution after either branch will continue in the following state: \ObjectUsingCases::VoidMethod(ObjectUsingCases+MyClass).0._State_3\.

                        if (\ObjectUsingCases::VoidMethod(ObjectUsingCases+MyClass).0.binaryOperationResult.0\) then 
                            \ObjectUsingCases::VoidMethod(ObjectUsingCases+MyClass).0._State\ := \ObjectUsingCases::VoidMethod(ObjectUsingCases+MyClass).0._State_4\;
                        else 
                            -- There was no false branch, so going directly to the state after the if-else.
                            \ObjectUsingCases::VoidMethod(ObjectUsingCases+MyClass).0._State\ := \ObjectUsingCases::VoidMethod(ObjectUsingCases+MyClass).0._State_3\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.2753
                    when \ObjectUsingCases::VoidMethod(ObjectUsingCases+MyClass).0._State_3\ => 
                        -- State after the if-else which was started in state \ObjectUsingCases::VoidMethod(ObjectUsingCases+MyClass).0._State_2\.
                        -- The following section was transformed from the .NET statement below:
                        -- myClass.MyProperty = 5;
                        -- 
                        \ObjectUsingCases::VoidMethod(ObjectUsingCases+MyClass).0.myClass\.\MyProperty\ := to_signed(5, 32);
                        \ObjectUsingCases::VoidMethod(ObjectUsingCases+MyClass).0._State\ := \ObjectUsingCases::VoidMethod(ObjectUsingCases+MyClass).0._State_1\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \ObjectUsingCases::VoidMethod(ObjectUsingCases+MyClass).0._State_4\ => 
                        -- True branch of the if-else started in state \ObjectUsingCases::VoidMethod(ObjectUsingCases+MyClass).0._State_2\.
                        -- The following section was transformed from the .NET statement below:
                        -- {
                        -- 	myClass.MyProperty = myClass.MyProperty * 10;
                        -- 	if (myClass.MyProperty == 10) {
                        -- 		return;
                        -- 	}
                        -- }
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- myClass.MyProperty = myClass.MyProperty * 10;
                        -- 
                        \ObjectUsingCases::VoidMethod(ObjectUsingCases+MyClass).0.binaryOperationResult.1\ := SmartResize(\ObjectUsingCases::VoidMethod(ObjectUsingCases+MyClass).0.myClass\.\MyProperty\ * to_signed(10, 32), 32);
                        \ObjectUsingCases::VoidMethod(ObjectUsingCases+MyClass).0.myClass\.\MyProperty\ := \ObjectUsingCases::VoidMethod(ObjectUsingCases+MyClass).0.binaryOperationResult.1\;
                        -- The following section was transformed from the .NET statement below:
                        -- if (myClass.MyProperty == 10) {
                        -- 	return;
                        -- }
                        -- 
                        \ObjectUsingCases::VoidMethod(ObjectUsingCases+MyClass).0.binaryOperationResult.2\ := \ObjectUsingCases::VoidMethod(ObjectUsingCases+MyClass).0.myClass\.\MyProperty\ = to_signed(10, 32);

                        -- This if-else was transformed from a .NET if-else. It spans across multiple states:
                        --     * The true branch starts in state \ObjectUsingCases::VoidMethod(ObjectUsingCases+MyClass).0._State_6\ and ends in state \ObjectUsingCases::VoidMethod(ObjectUsingCases+MyClass).0._State_6\.
                        --     * Execution after either branch will continue in the following state: \ObjectUsingCases::VoidMethod(ObjectUsingCases+MyClass).0._State_5\.

                        if (\ObjectUsingCases::VoidMethod(ObjectUsingCases+MyClass).0.binaryOperationResult.2\) then 
                            \ObjectUsingCases::VoidMethod(ObjectUsingCases+MyClass).0._State\ := \ObjectUsingCases::VoidMethod(ObjectUsingCases+MyClass).0._State_6\;
                        else 
                            -- There was no false branch, so going directly to the state after the if-else.
                            \ObjectUsingCases::VoidMethod(ObjectUsingCases+MyClass).0._State\ := \ObjectUsingCases::VoidMethod(ObjectUsingCases+MyClass).0._State_5\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.6848
                    when \ObjectUsingCases::VoidMethod(ObjectUsingCases+MyClass).0._State_5\ => 
                        -- State after the if-else which was started in state \ObjectUsingCases::VoidMethod(ObjectUsingCases+MyClass).0._State_4\.
                        -- Going to the state after the if-else which was started in state \ObjectUsingCases::VoidMethod(ObjectUsingCases+MyClass).0._State_2\.
                        if (\ObjectUsingCases::VoidMethod(ObjectUsingCases+MyClass).0._State\ = \ObjectUsingCases::VoidMethod(ObjectUsingCases+MyClass).0._State_5\) then 
                            \ObjectUsingCases::VoidMethod(ObjectUsingCases+MyClass).0._State\ := \ObjectUsingCases::VoidMethod(ObjectUsingCases+MyClass).0._State_3\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \ObjectUsingCases::VoidMethod(ObjectUsingCases+MyClass).0._State_6\ => 
                        -- True branch of the if-else started in state \ObjectUsingCases::VoidMethod(ObjectUsingCases+MyClass).0._State_4\.
                        -- The following section was transformed from the .NET statement below:
                        -- {
                        -- 	return;
                        -- }
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- return;
                        -- 
                        \ObjectUsingCases::VoidMethod(ObjectUsingCases+MyClass).0._State\ := \ObjectUsingCases::VoidMethod(ObjectUsingCases+MyClass).0._State_1\;
                        -- Going to the state after the if-else which was started in state \ObjectUsingCases::VoidMethod(ObjectUsingCases+MyClass).0._State_4\.
                        if (\ObjectUsingCases::VoidMethod(ObjectUsingCases+MyClass).0._State\ = \ObjectUsingCases::VoidMethod(ObjectUsingCases+MyClass).0._State_6\) then 
                            \ObjectUsingCases::VoidMethod(ObjectUsingCases+MyClass).0._State\ := \ObjectUsingCases::VoidMethod(ObjectUsingCases+MyClass).0._State_5\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                end case;
            end if;
        end if;
    end process;
    -- System.Void Hast.TestInputs.Various.ObjectUsingCases::VoidMethod(Hast.TestInputs.Various.ObjectUsingCases+MyClass).0 state machine end


    -- System.Boolean Hast.TestInputs.Various.ParallelCases+Calculator::IsEven().0 state machine start
    \ParallelCases+Calculator::IsEven().0._StateMachine\: process (\Clock\) 
        Variable \ParallelCases+Calculator::IsEven().0._State\: \ParallelCases+Calculator::IsEven().0._States\ := \ParallelCases+Calculator::IsEven().0._State_0\;
        Variable \ParallelCases+Calculator::IsEven().0.this\: \Hast.TestInputs.Various.ParallelCases+Calculator\;
        Variable \ParallelCases+Calculator::IsEven().0.remainderOperanda1e45490d7b39d29fddb913d0f576f66e98ec09031ba601f68b9fde305a3033a\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \ParallelCases+Calculator::IsEven().0.binaryOperationResult.0\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \ParallelCases+Calculator::IsEven().0.binaryOperationResult.1\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \ParallelCases+Calculator::IsEven().0.binaryOperationResult.2\: signed(63 downto 0) := to_signed(0, 64);
        Variable \ParallelCases+Calculator::IsEven().0.binaryOperationResult.3\: boolean := false;
    begin 
        if (rising_edge(\Clock\)) then 
            if (\Reset\ = '1') then 
                -- Synchronous reset
                \ParallelCases+Calculator::IsEven().0._Finished\ <= false;
                \ParallelCases+Calculator::IsEven().0.return\ <= false;
                \ParallelCases+Calculator::IsEven().0._State\ := \ParallelCases+Calculator::IsEven().0._State_0\;
                \ParallelCases+Calculator::IsEven().0.remainderOperanda1e45490d7b39d29fddb913d0f576f66e98ec09031ba601f68b9fde305a3033a\ := to_unsigned(0, 32);
                \ParallelCases+Calculator::IsEven().0.binaryOperationResult.0\ := to_unsigned(0, 32);
                \ParallelCases+Calculator::IsEven().0.binaryOperationResult.1\ := to_unsigned(0, 32);
                \ParallelCases+Calculator::IsEven().0.binaryOperationResult.2\ := to_signed(0, 64);
                \ParallelCases+Calculator::IsEven().0.binaryOperationResult.3\ := false;
            else 
                case \ParallelCases+Calculator::IsEven().0._State\ is 
                    when \ParallelCases+Calculator::IsEven().0._State_0\ => 
                        -- Start state
                        -- Waiting for the start signal.
                        if (\ParallelCases+Calculator::IsEven().0._Started\ = true) then 
                            \ParallelCases+Calculator::IsEven().0._State\ := \ParallelCases+Calculator::IsEven().0._State_2\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \ParallelCases+Calculator::IsEven().0._State_1\ => 
                        -- Final state
                        -- Signaling finished until Started is pulled back to false, then returning to the start state.
                        if (\ParallelCases+Calculator::IsEven().0._Started\ = true) then 
                            \ParallelCases+Calculator::IsEven().0._Finished\ <= true;
                        else 
                            \ParallelCases+Calculator::IsEven().0._Finished\ <= false;
                            \ParallelCases+Calculator::IsEven().0._State\ := \ParallelCases+Calculator::IsEven().0._State_0\;
                        end if;
                        -- Writing back out-flowing parameters so any changes made in this state machine will be reflected in the invoking one too.
                        \ParallelCases+Calculator::IsEven().0.this.parameter.Out\ <= \ParallelCases+Calculator::IsEven().0.this\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \ParallelCases+Calculator::IsEven().0._State_2\ => 
                        \ParallelCases+Calculator::IsEven().0.this\ := \ParallelCases+Calculator::IsEven().0.this.parameter.In\;
                        -- The following section was transformed from the .NET statement below:
                        -- uint remainderOperanda1e45490d7b39d29fddb913d0f576f66e98ec09031ba601f68b9fde305a3033a;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- remainderOperanda1e45490d7b39d29fddb913d0f576f66e98ec09031ba601f68b9fde305a3033a = @this.Number;
                        -- 
                        \ParallelCases+Calculator::IsEven().0.remainderOperanda1e45490d7b39d29fddb913d0f576f66e98ec09031ba601f68b9fde305a3033a\ := \ParallelCases+Calculator::IsEven().0.this\.\Number\;
                        -- The following section was transformed from the .NET statement below:
                        -- return (long)(remainderOperanda1e45490d7b39d29fddb913d0f576f66e98ec09031ba601f68b9fde305a3033a - remainderOperanda1e45490d7b39d29fddb913d0f576f66e98ec09031ba601f68b9fde305a3033a / 2u * 2u) == 0L;
                        -- 
                        \ParallelCases+Calculator::IsEven().0.binaryOperationResult.0\ := \ParallelCases+Calculator::IsEven().0.remainderOperanda1e45490d7b39d29fddb913d0f576f66e98ec09031ba601f68b9fde305a3033a\ / to_unsigned(2, 32);
                        \ParallelCases+Calculator::IsEven().0.binaryOperationResult.1\ := SmartResize(\ParallelCases+Calculator::IsEven().0.binaryOperationResult.0\ * to_unsigned(2, 32), 32);
                        \ParallelCases+Calculator::IsEven().0.binaryOperationResult.2\ := signed(SmartResize(\ParallelCases+Calculator::IsEven().0.remainderOperanda1e45490d7b39d29fddb913d0f576f66e98ec09031ba601f68b9fde305a3033a\ - \ParallelCases+Calculator::IsEven().0.binaryOperationResult.1\, 64));
                        \ParallelCases+Calculator::IsEven().0.binaryOperationResult.3\ := (\ParallelCases+Calculator::IsEven().0.binaryOperationResult.2\) = to_signed(0, 64);
                        \ParallelCases+Calculator::IsEven().0.return\ <= \ParallelCases+Calculator::IsEven().0.binaryOperationResult.3\;
                        \ParallelCases+Calculator::IsEven().0._State\ := \ParallelCases+Calculator::IsEven().0._State_1\;
                        -- Clock cycles needed to complete this state (approximation): 0.8539
                end case;
            end if;
        end if;
    end process;
    -- System.Boolean Hast.TestInputs.Various.ParallelCases+Calculator::IsEven().0 state machine end


    -- System.Boolean Hast.TestInputs.Various.ParallelCases+Calculator::IsEven().1 state machine start
    \ParallelCases+Calculator::IsEven().1._StateMachine\: process (\Clock\) 
        Variable \ParallelCases+Calculator::IsEven().1._State\: \ParallelCases+Calculator::IsEven().1._States\ := \ParallelCases+Calculator::IsEven().1._State_0\;
        Variable \ParallelCases+Calculator::IsEven().1.this\: \Hast.TestInputs.Various.ParallelCases+Calculator\;
        Variable \ParallelCases+Calculator::IsEven().1.remainderOperanda1e45490d7b39d29fddb913d0f576f66e98ec09031ba601f68b9fde305a3033a\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \ParallelCases+Calculator::IsEven().1.binaryOperationResult.0\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \ParallelCases+Calculator::IsEven().1.binaryOperationResult.1\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \ParallelCases+Calculator::IsEven().1.binaryOperationResult.2\: signed(63 downto 0) := to_signed(0, 64);
        Variable \ParallelCases+Calculator::IsEven().1.binaryOperationResult.3\: boolean := false;
    begin 
        if (rising_edge(\Clock\)) then 
            if (\Reset\ = '1') then 
                -- Synchronous reset
                \ParallelCases+Calculator::IsEven().1._Finished\ <= false;
                \ParallelCases+Calculator::IsEven().1.return\ <= false;
                \ParallelCases+Calculator::IsEven().1._State\ := \ParallelCases+Calculator::IsEven().1._State_0\;
                \ParallelCases+Calculator::IsEven().1.remainderOperanda1e45490d7b39d29fddb913d0f576f66e98ec09031ba601f68b9fde305a3033a\ := to_unsigned(0, 32);
                \ParallelCases+Calculator::IsEven().1.binaryOperationResult.0\ := to_unsigned(0, 32);
                \ParallelCases+Calculator::IsEven().1.binaryOperationResult.1\ := to_unsigned(0, 32);
                \ParallelCases+Calculator::IsEven().1.binaryOperationResult.2\ := to_signed(0, 64);
                \ParallelCases+Calculator::IsEven().1.binaryOperationResult.3\ := false;
            else 
                case \ParallelCases+Calculator::IsEven().1._State\ is 
                    when \ParallelCases+Calculator::IsEven().1._State_0\ => 
                        -- Start state
                        -- Waiting for the start signal.
                        if (\ParallelCases+Calculator::IsEven().1._Started\ = true) then 
                            \ParallelCases+Calculator::IsEven().1._State\ := \ParallelCases+Calculator::IsEven().1._State_2\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \ParallelCases+Calculator::IsEven().1._State_1\ => 
                        -- Final state
                        -- Signaling finished until Started is pulled back to false, then returning to the start state.
                        if (\ParallelCases+Calculator::IsEven().1._Started\ = true) then 
                            \ParallelCases+Calculator::IsEven().1._Finished\ <= true;
                        else 
                            \ParallelCases+Calculator::IsEven().1._Finished\ <= false;
                            \ParallelCases+Calculator::IsEven().1._State\ := \ParallelCases+Calculator::IsEven().1._State_0\;
                        end if;
                        -- Writing back out-flowing parameters so any changes made in this state machine will be reflected in the invoking one too.
                        \ParallelCases+Calculator::IsEven().1.this.parameter.Out\ <= \ParallelCases+Calculator::IsEven().1.this\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \ParallelCases+Calculator::IsEven().1._State_2\ => 
                        \ParallelCases+Calculator::IsEven().1.this\ := \ParallelCases+Calculator::IsEven().1.this.parameter.In\;
                        -- The following section was transformed from the .NET statement below:
                        -- uint remainderOperanda1e45490d7b39d29fddb913d0f576f66e98ec09031ba601f68b9fde305a3033a;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- remainderOperanda1e45490d7b39d29fddb913d0f576f66e98ec09031ba601f68b9fde305a3033a = @this.Number;
                        -- 
                        \ParallelCases+Calculator::IsEven().1.remainderOperanda1e45490d7b39d29fddb913d0f576f66e98ec09031ba601f68b9fde305a3033a\ := \ParallelCases+Calculator::IsEven().1.this\.\Number\;
                        -- The following section was transformed from the .NET statement below:
                        -- return (long)(remainderOperanda1e45490d7b39d29fddb913d0f576f66e98ec09031ba601f68b9fde305a3033a - remainderOperanda1e45490d7b39d29fddb913d0f576f66e98ec09031ba601f68b9fde305a3033a / 2u * 2u) == 0L;
                        -- 
                        \ParallelCases+Calculator::IsEven().1.binaryOperationResult.0\ := \ParallelCases+Calculator::IsEven().1.remainderOperanda1e45490d7b39d29fddb913d0f576f66e98ec09031ba601f68b9fde305a3033a\ / to_unsigned(2, 32);
                        \ParallelCases+Calculator::IsEven().1.binaryOperationResult.1\ := SmartResize(\ParallelCases+Calculator::IsEven().1.binaryOperationResult.0\ * to_unsigned(2, 32), 32);
                        \ParallelCases+Calculator::IsEven().1.binaryOperationResult.2\ := signed(SmartResize(\ParallelCases+Calculator::IsEven().1.remainderOperanda1e45490d7b39d29fddb913d0f576f66e98ec09031ba601f68b9fde305a3033a\ - \ParallelCases+Calculator::IsEven().1.binaryOperationResult.1\, 64));
                        \ParallelCases+Calculator::IsEven().1.binaryOperationResult.3\ := (\ParallelCases+Calculator::IsEven().1.binaryOperationResult.2\) = to_signed(0, 64);
                        \ParallelCases+Calculator::IsEven().1.return\ <= \ParallelCases+Calculator::IsEven().1.binaryOperationResult.3\;
                        \ParallelCases+Calculator::IsEven().1._State\ := \ParallelCases+Calculator::IsEven().1._State_1\;
                        -- Clock cycles needed to complete this state (approximation): 0.8539
                end case;
            end if;
        end if;
    end process;
    -- System.Boolean Hast.TestInputs.Various.ParallelCases+Calculator::IsEven().1 state machine end


    -- System.Boolean Hast.TestInputs.Various.ParallelCases+Calculator::IsEven().2 state machine start
    \ParallelCases+Calculator::IsEven().2._StateMachine\: process (\Clock\) 
        Variable \ParallelCases+Calculator::IsEven().2._State\: \ParallelCases+Calculator::IsEven().2._States\ := \ParallelCases+Calculator::IsEven().2._State_0\;
        Variable \ParallelCases+Calculator::IsEven().2.this\: \Hast.TestInputs.Various.ParallelCases+Calculator\;
        Variable \ParallelCases+Calculator::IsEven().2.remainderOperanda1e45490d7b39d29fddb913d0f576f66e98ec09031ba601f68b9fde305a3033a\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \ParallelCases+Calculator::IsEven().2.binaryOperationResult.0\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \ParallelCases+Calculator::IsEven().2.binaryOperationResult.1\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \ParallelCases+Calculator::IsEven().2.binaryOperationResult.2\: signed(63 downto 0) := to_signed(0, 64);
        Variable \ParallelCases+Calculator::IsEven().2.binaryOperationResult.3\: boolean := false;
    begin 
        if (rising_edge(\Clock\)) then 
            if (\Reset\ = '1') then 
                -- Synchronous reset
                \ParallelCases+Calculator::IsEven().2._Finished\ <= false;
                \ParallelCases+Calculator::IsEven().2.return\ <= false;
                \ParallelCases+Calculator::IsEven().2._State\ := \ParallelCases+Calculator::IsEven().2._State_0\;
                \ParallelCases+Calculator::IsEven().2.remainderOperanda1e45490d7b39d29fddb913d0f576f66e98ec09031ba601f68b9fde305a3033a\ := to_unsigned(0, 32);
                \ParallelCases+Calculator::IsEven().2.binaryOperationResult.0\ := to_unsigned(0, 32);
                \ParallelCases+Calculator::IsEven().2.binaryOperationResult.1\ := to_unsigned(0, 32);
                \ParallelCases+Calculator::IsEven().2.binaryOperationResult.2\ := to_signed(0, 64);
                \ParallelCases+Calculator::IsEven().2.binaryOperationResult.3\ := false;
            else 
                case \ParallelCases+Calculator::IsEven().2._State\ is 
                    when \ParallelCases+Calculator::IsEven().2._State_0\ => 
                        -- Start state
                        -- Waiting for the start signal.
                        if (\ParallelCases+Calculator::IsEven().2._Started\ = true) then 
                            \ParallelCases+Calculator::IsEven().2._State\ := \ParallelCases+Calculator::IsEven().2._State_2\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \ParallelCases+Calculator::IsEven().2._State_1\ => 
                        -- Final state
                        -- Signaling finished until Started is pulled back to false, then returning to the start state.
                        if (\ParallelCases+Calculator::IsEven().2._Started\ = true) then 
                            \ParallelCases+Calculator::IsEven().2._Finished\ <= true;
                        else 
                            \ParallelCases+Calculator::IsEven().2._Finished\ <= false;
                            \ParallelCases+Calculator::IsEven().2._State\ := \ParallelCases+Calculator::IsEven().2._State_0\;
                        end if;
                        -- Writing back out-flowing parameters so any changes made in this state machine will be reflected in the invoking one too.
                        \ParallelCases+Calculator::IsEven().2.this.parameter.Out\ <= \ParallelCases+Calculator::IsEven().2.this\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \ParallelCases+Calculator::IsEven().2._State_2\ => 
                        \ParallelCases+Calculator::IsEven().2.this\ := \ParallelCases+Calculator::IsEven().2.this.parameter.In\;
                        -- The following section was transformed from the .NET statement below:
                        -- uint remainderOperanda1e45490d7b39d29fddb913d0f576f66e98ec09031ba601f68b9fde305a3033a;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- remainderOperanda1e45490d7b39d29fddb913d0f576f66e98ec09031ba601f68b9fde305a3033a = @this.Number;
                        -- 
                        \ParallelCases+Calculator::IsEven().2.remainderOperanda1e45490d7b39d29fddb913d0f576f66e98ec09031ba601f68b9fde305a3033a\ := \ParallelCases+Calculator::IsEven().2.this\.\Number\;
                        -- The following section was transformed from the .NET statement below:
                        -- return (long)(remainderOperanda1e45490d7b39d29fddb913d0f576f66e98ec09031ba601f68b9fde305a3033a - remainderOperanda1e45490d7b39d29fddb913d0f576f66e98ec09031ba601f68b9fde305a3033a / 2u * 2u) == 0L;
                        -- 
                        \ParallelCases+Calculator::IsEven().2.binaryOperationResult.0\ := \ParallelCases+Calculator::IsEven().2.remainderOperanda1e45490d7b39d29fddb913d0f576f66e98ec09031ba601f68b9fde305a3033a\ / to_unsigned(2, 32);
                        \ParallelCases+Calculator::IsEven().2.binaryOperationResult.1\ := SmartResize(\ParallelCases+Calculator::IsEven().2.binaryOperationResult.0\ * to_unsigned(2, 32), 32);
                        \ParallelCases+Calculator::IsEven().2.binaryOperationResult.2\ := signed(SmartResize(\ParallelCases+Calculator::IsEven().2.remainderOperanda1e45490d7b39d29fddb913d0f576f66e98ec09031ba601f68b9fde305a3033a\ - \ParallelCases+Calculator::IsEven().2.binaryOperationResult.1\, 64));
                        \ParallelCases+Calculator::IsEven().2.binaryOperationResult.3\ := (\ParallelCases+Calculator::IsEven().2.binaryOperationResult.2\) = to_signed(0, 64);
                        \ParallelCases+Calculator::IsEven().2.return\ <= \ParallelCases+Calculator::IsEven().2.binaryOperationResult.3\;
                        \ParallelCases+Calculator::IsEven().2._State\ := \ParallelCases+Calculator::IsEven().2._State_1\;
                        -- Clock cycles needed to complete this state (approximation): 0.8539
                end case;
            end if;
        end if;
    end process;
    -- System.Boolean Hast.TestInputs.Various.ParallelCases+Calculator::IsEven().2 state machine end


    -- System.Boolean Hast.TestInputs.Various.ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(System.Object).0 state machine start
    \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).0._StateMachine\: process (\Clock\) 
        Variable \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).0._State\: \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).0._States\ := \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).0._State_0\;
        Variable \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).0.indexObject\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).0.num\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).0.binaryOperationResult.0\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).0.binaryOperationResult.1\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).0.binaryOperationResult.2\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).0.binaryOperationResult.3\: signed(63 downto 0) := to_signed(0, 64);
        Variable \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).0.binaryOperationResult.4\: boolean := false;
    begin 
        if (rising_edge(\Clock\)) then 
            if (\Reset\ = '1') then 
                -- Synchronous reset
                \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).0._Finished\ <= false;
                \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).0.return\ <= false;
                \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).0._State\ := \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).0._State_0\;
                \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).0.indexObject\ := to_unsigned(0, 32);
                \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).0.num\ := to_unsigned(0, 32);
                \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).0.binaryOperationResult.0\ := to_unsigned(0, 32);
                \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).0.binaryOperationResult.1\ := to_unsigned(0, 32);
                \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).0.binaryOperationResult.2\ := to_unsigned(0, 32);
                \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).0.binaryOperationResult.3\ := to_signed(0, 64);
                \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).0.binaryOperationResult.4\ := false;
            else 
                case \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).0._State\ is 
                    when \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).0._State_0\ => 
                        -- Start state
                        -- Waiting for the start signal.
                        if (\ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).0._Started\ = true) then 
                            \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).0._State\ := \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).0._State_2\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).0._State_1\ => 
                        -- Final state
                        -- Signaling finished until Started is pulled back to false, then returning to the start state.
                        if (\ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).0._Started\ = true) then 
                            \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).0._Finished\ <= true;
                        else 
                            \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).0._Finished\ <= false;
                            \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).0._State\ := \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).0._State_0\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).0._State_2\ => 
                        \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).0.indexObject\ := \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).0.indexObject.parameter.In\;
                        -- The following section was transformed from the .NET statement below:
                        -- uint num;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num = indexObject;
                        -- 
                        \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).0.num\ := \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).0.indexObject\;
                        -- The following section was transformed from the .NET statement below:
                        -- num = num + this.input;
                        -- 
                        \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).0.binaryOperationResult.0\ := \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).0.num\ + \System.UInt32 Hast.TestInputs.Various.ParallelCases+<>c__DisplayClass0_0::input\;
                        \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).0.num\ := \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).0.binaryOperationResult.0\;
                        -- The following section was transformed from the .NET statement below:
                        -- return (long)(num - num / 2u * 2u) == 0L;
                        -- 
                        \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).0.binaryOperationResult.1\ := \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).0.num\ / to_unsigned(2, 32);
                        \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).0.binaryOperationResult.2\ := SmartResize(\ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).0.binaryOperationResult.1\ * to_unsigned(2, 32), 32);
                        \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).0.binaryOperationResult.3\ := signed(SmartResize(\ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).0.num\ - \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).0.binaryOperationResult.2\, 64));
                        \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).0._State\ := \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).0._State_3\;
                        -- Clock cycles needed to complete this state (approximation): 0.8985
                    when \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).0._State_3\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).0.binaryOperationResult.4\ := (\ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).0.binaryOperationResult.3\) = to_signed(0, 64);
                        \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).0.return\ <= \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).0.binaryOperationResult.4\;
                        \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).0._State\ := \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).0._State_1\;
                        -- Clock cycles needed to complete this state (approximation): 0.2817
                end case;
            end if;
        end if;
    end process;
    -- System.Boolean Hast.TestInputs.Various.ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(System.Object).0 state machine end


    -- System.Boolean Hast.TestInputs.Various.ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(System.Object).1 state machine start
    \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).1._StateMachine\: process (\Clock\) 
        Variable \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).1._State\: \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).1._States\ := \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).1._State_0\;
        Variable \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).1.indexObject\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).1.num\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).1.binaryOperationResult.0\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).1.binaryOperationResult.1\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).1.binaryOperationResult.2\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).1.binaryOperationResult.3\: signed(63 downto 0) := to_signed(0, 64);
        Variable \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).1.binaryOperationResult.4\: boolean := false;
    begin 
        if (rising_edge(\Clock\)) then 
            if (\Reset\ = '1') then 
                -- Synchronous reset
                \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).1._Finished\ <= false;
                \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).1.return\ <= false;
                \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).1._State\ := \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).1._State_0\;
                \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).1.indexObject\ := to_unsigned(0, 32);
                \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).1.num\ := to_unsigned(0, 32);
                \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).1.binaryOperationResult.0\ := to_unsigned(0, 32);
                \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).1.binaryOperationResult.1\ := to_unsigned(0, 32);
                \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).1.binaryOperationResult.2\ := to_unsigned(0, 32);
                \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).1.binaryOperationResult.3\ := to_signed(0, 64);
                \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).1.binaryOperationResult.4\ := false;
            else 
                case \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).1._State\ is 
                    when \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).1._State_0\ => 
                        -- Start state
                        -- Waiting for the start signal.
                        if (\ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).1._Started\ = true) then 
                            \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).1._State\ := \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).1._State_2\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).1._State_1\ => 
                        -- Final state
                        -- Signaling finished until Started is pulled back to false, then returning to the start state.
                        if (\ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).1._Started\ = true) then 
                            \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).1._Finished\ <= true;
                        else 
                            \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).1._Finished\ <= false;
                            \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).1._State\ := \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).1._State_0\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).1._State_2\ => 
                        \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).1.indexObject\ := \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).1.indexObject.parameter.In\;
                        -- The following section was transformed from the .NET statement below:
                        -- uint num;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num = indexObject;
                        -- 
                        \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).1.num\ := \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).1.indexObject\;
                        -- The following section was transformed from the .NET statement below:
                        -- num = num + this.input;
                        -- 
                        \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).1.binaryOperationResult.0\ := \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).1.num\ + \System.UInt32 Hast.TestInputs.Various.ParallelCases+<>c__DisplayClass0_0::input\;
                        \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).1.num\ := \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).1.binaryOperationResult.0\;
                        -- The following section was transformed from the .NET statement below:
                        -- return (long)(num - num / 2u * 2u) == 0L;
                        -- 
                        \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).1.binaryOperationResult.1\ := \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).1.num\ / to_unsigned(2, 32);
                        \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).1.binaryOperationResult.2\ := SmartResize(\ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).1.binaryOperationResult.1\ * to_unsigned(2, 32), 32);
                        \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).1.binaryOperationResult.3\ := signed(SmartResize(\ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).1.num\ - \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).1.binaryOperationResult.2\, 64));
                        \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).1._State\ := \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).1._State_3\;
                        -- Clock cycles needed to complete this state (approximation): 0.8985
                    when \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).1._State_3\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).1.binaryOperationResult.4\ := (\ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).1.binaryOperationResult.3\) = to_signed(0, 64);
                        \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).1.return\ <= \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).1.binaryOperationResult.4\;
                        \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).1._State\ := \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).1._State_1\;
                        -- Clock cycles needed to complete this state (approximation): 0.2817
                end case;
            end if;
        end if;
    end process;
    -- System.Boolean Hast.TestInputs.Various.ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(System.Object).1 state machine end


    -- System.Boolean Hast.TestInputs.Various.ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(System.Object).2 state machine start
    \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).2._StateMachine\: process (\Clock\) 
        Variable \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).2._State\: \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).2._States\ := \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).2._State_0\;
        Variable \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).2.indexObject\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).2.num\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).2.binaryOperationResult.0\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).2.binaryOperationResult.1\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).2.binaryOperationResult.2\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).2.binaryOperationResult.3\: signed(63 downto 0) := to_signed(0, 64);
        Variable \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).2.binaryOperationResult.4\: boolean := false;
    begin 
        if (rising_edge(\Clock\)) then 
            if (\Reset\ = '1') then 
                -- Synchronous reset
                \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).2._Finished\ <= false;
                \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).2.return\ <= false;
                \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).2._State\ := \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).2._State_0\;
                \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).2.indexObject\ := to_unsigned(0, 32);
                \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).2.num\ := to_unsigned(0, 32);
                \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).2.binaryOperationResult.0\ := to_unsigned(0, 32);
                \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).2.binaryOperationResult.1\ := to_unsigned(0, 32);
                \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).2.binaryOperationResult.2\ := to_unsigned(0, 32);
                \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).2.binaryOperationResult.3\ := to_signed(0, 64);
                \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).2.binaryOperationResult.4\ := false;
            else 
                case \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).2._State\ is 
                    when \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).2._State_0\ => 
                        -- Start state
                        -- Waiting for the start signal.
                        if (\ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).2._Started\ = true) then 
                            \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).2._State\ := \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).2._State_2\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).2._State_1\ => 
                        -- Final state
                        -- Signaling finished until Started is pulled back to false, then returning to the start state.
                        if (\ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).2._Started\ = true) then 
                            \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).2._Finished\ <= true;
                        else 
                            \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).2._Finished\ <= false;
                            \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).2._State\ := \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).2._State_0\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).2._State_2\ => 
                        \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).2.indexObject\ := \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).2.indexObject.parameter.In\;
                        -- The following section was transformed from the .NET statement below:
                        -- uint num;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num = indexObject;
                        -- 
                        \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).2.num\ := \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).2.indexObject\;
                        -- The following section was transformed from the .NET statement below:
                        -- num = num + this.input;
                        -- 
                        \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).2.binaryOperationResult.0\ := \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).2.num\ + \System.UInt32 Hast.TestInputs.Various.ParallelCases+<>c__DisplayClass0_0::input\;
                        \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).2.num\ := \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).2.binaryOperationResult.0\;
                        -- The following section was transformed from the .NET statement below:
                        -- return (long)(num - num / 2u * 2u) == 0L;
                        -- 
                        \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).2.binaryOperationResult.1\ := \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).2.num\ / to_unsigned(2, 32);
                        \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).2.binaryOperationResult.2\ := SmartResize(\ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).2.binaryOperationResult.1\ * to_unsigned(2, 32), 32);
                        \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).2.binaryOperationResult.3\ := signed(SmartResize(\ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).2.num\ - \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).2.binaryOperationResult.2\, 64));
                        \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).2._State\ := \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).2._State_3\;
                        -- Clock cycles needed to complete this state (approximation): 0.8985
                    when \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).2._State_3\ => 
                        -- This state was added because the previous state would go over one clock cycle with any more operations.
                        \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).2.binaryOperationResult.4\ := (\ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).2.binaryOperationResult.3\) = to_signed(0, 64);
                        \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).2.return\ <= \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).2.binaryOperationResult.4\;
                        \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).2._State\ := \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).2._State_1\;
                        -- Clock cycles needed to complete this state (approximation): 0.2817
                end case;
            end if;
        end if;
    end process;
    -- System.Boolean Hast.TestInputs.Various.ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(System.Object).2 state machine end


    -- System.Boolean Hast.TestInputs.Various.ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(System.Object).0 state machine start
    \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).0._StateMachine\: process (\Clock\) 
        Variable \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).0._State\: \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).0._States\ := \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).0._State_0\;
        Variable \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).0.indexObject\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).0.num\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).0.binaryOperationResult.0\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).0.objectb5778ea03e03361f2d324fb0f47a3239142ada2f362675277fc27741737f5444\: \Hast.TestInputs.Various.ParallelCases+Calculator\;
        Variable \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).0.return.0\: boolean := false;
    begin 
        if (rising_edge(\Clock\)) then 
            if (\Reset\ = '1') then 
                -- Synchronous reset
                \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).0._Finished\ <= false;
                \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).0.return\ <= false;
                \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).0.ParallelCases+Calculator::IsEven()._Started.0\ <= false;
                \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).0._State\ := \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).0._State_0\;
                \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).0.indexObject\ := to_unsigned(0, 32);
                \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).0.num\ := to_unsigned(0, 32);
                \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).0.binaryOperationResult.0\ := to_unsigned(0, 32);
                \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).0.return.0\ := false;
            else 
                case \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).0._State\ is 
                    when \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).0._State_0\ => 
                        -- Start state
                        -- Waiting for the start signal.
                        if (\ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).0._Started\ = true) then 
                            \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).0._State\ := \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).0._State_2\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).0._State_1\ => 
                        -- Final state
                        -- Signaling finished until Started is pulled back to false, then returning to the start state.
                        if (\ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).0._Started\ = true) then 
                            \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).0._Finished\ <= true;
                        else 
                            \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).0._Finished\ <= false;
                            \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).0._State\ := \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).0._State_0\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).0._State_2\ => 
                        \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).0.indexObject\ := \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).0.indexObject.parameter.In\;
                        -- The following section was transformed from the .NET statement below:
                        -- uint num;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num = indexObject;
                        -- 
                        \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).0.num\ := \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).0.indexObject\;
                        -- The following section was transformed from the .NET statement below:
                        -- num = num + this.input;
                        -- 
                        \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).0.binaryOperationResult.0\ := \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).0.num\ + \System.UInt32 Hast.TestInputs.Various.ParallelCases+<>c__DisplayClass1_0::input\;
                        \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).0.num\ := \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).0.binaryOperationResult.0\;
                        -- The following section was transformed from the .NET statement below:
                        -- Calculator objectb5778ea03e03361f2d324fb0f47a3239142ada2f362675277fc27741737f5444;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- objectb5778ea03e03361f2d324fb0f47a3239142ada2f362675277fc27741737f5444 = new Calculator {
                        -- 
                        -- };
                        -- 
                        -- Initializing record fields to their defaults.
                        \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).0.objectb5778ea03e03361f2d324fb0f47a3239142ada2f362675277fc27741737f5444\.\IsNull\ := false;
                        \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).0.objectb5778ea03e03361f2d324fb0f47a3239142ada2f362675277fc27741737f5444\.\Number\ := to_unsigned(0, 32);
                        -- The following section was transformed from the .NET statement below:
                        -- objectb5778ea03e03361f2d324fb0f47a3239142ada2f362675277fc27741737f5444.Number = num;
                        -- 
                        \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).0.objectb5778ea03e03361f2d324fb0f47a3239142ada2f362675277fc27741737f5444\.\Number\ := \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).0.num\;
                        -- The following section was transformed from the .NET statement below:
                        -- return Hast.TestInputs.Various.ParallelCases+Calculator.IsEven (objectb5778ea03e03361f2d324fb0f47a3239142ada2f362675277fc27741737f5444);
                        -- 
                        -- Starting state machine invocation for the following method: System.Boolean Hast.TestInputs.Various.ParallelCases+Calculator::IsEven()
                        \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).0.ParallelCases+Calculator::IsEven().this.parameter.Out.0\ <= \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).0.objectb5778ea03e03361f2d324fb0f47a3239142ada2f362675277fc27741737f5444\;
                        \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).0.ParallelCases+Calculator::IsEven()._Started.0\ <= true;
                        \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).0._State\ := \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).0._State_3\;
                        -- Clock cycles needed to complete this state (approximation): 0.3263
                    when \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).0._State_3\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Boolean Hast.TestInputs.Various.ParallelCases+Calculator::IsEven()
                        if (\ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).0.ParallelCases+Calculator::IsEven()._Started.0\ = \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).0.ParallelCases+Calculator::IsEven()._Finished.0\) then 
                            \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).0.ParallelCases+Calculator::IsEven()._Started.0\ <= false;
                            \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).0.return.0\ := \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).0.ParallelCases+Calculator::IsEven().return.0\;
                            \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).0.objectb5778ea03e03361f2d324fb0f47a3239142ada2f362675277fc27741737f5444\ := \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).0.ParallelCases+Calculator::IsEven().this.parameter.In.0\;
                            \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).0.return\ <= \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).0.return.0\;
                            \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).0._State\ := \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).0._State_1\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                end case;
            end if;
        end if;
    end process;
    -- System.Boolean Hast.TestInputs.Various.ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(System.Object).0 state machine end


    -- System.Boolean Hast.TestInputs.Various.ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(System.Object).1 state machine start
    \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).1._StateMachine\: process (\Clock\) 
        Variable \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).1._State\: \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).1._States\ := \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).1._State_0\;
        Variable \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).1.indexObject\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).1.num\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).1.binaryOperationResult.0\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).1.objectb5778ea03e03361f2d324fb0f47a3239142ada2f362675277fc27741737f5444\: \Hast.TestInputs.Various.ParallelCases+Calculator\;
        Variable \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).1.return.0\: boolean := false;
    begin 
        if (rising_edge(\Clock\)) then 
            if (\Reset\ = '1') then 
                -- Synchronous reset
                \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).1._Finished\ <= false;
                \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).1.return\ <= false;
                \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).1.ParallelCases+Calculator::IsEven()._Started.0\ <= false;
                \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).1._State\ := \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).1._State_0\;
                \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).1.indexObject\ := to_unsigned(0, 32);
                \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).1.num\ := to_unsigned(0, 32);
                \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).1.binaryOperationResult.0\ := to_unsigned(0, 32);
                \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).1.return.0\ := false;
            else 
                case \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).1._State\ is 
                    when \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).1._State_0\ => 
                        -- Start state
                        -- Waiting for the start signal.
                        if (\ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).1._Started\ = true) then 
                            \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).1._State\ := \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).1._State_2\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).1._State_1\ => 
                        -- Final state
                        -- Signaling finished until Started is pulled back to false, then returning to the start state.
                        if (\ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).1._Started\ = true) then 
                            \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).1._Finished\ <= true;
                        else 
                            \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).1._Finished\ <= false;
                            \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).1._State\ := \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).1._State_0\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).1._State_2\ => 
                        \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).1.indexObject\ := \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).1.indexObject.parameter.In\;
                        -- The following section was transformed from the .NET statement below:
                        -- uint num;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num = indexObject;
                        -- 
                        \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).1.num\ := \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).1.indexObject\;
                        -- The following section was transformed from the .NET statement below:
                        -- num = num + this.input;
                        -- 
                        \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).1.binaryOperationResult.0\ := \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).1.num\ + \System.UInt32 Hast.TestInputs.Various.ParallelCases+<>c__DisplayClass1_0::input\;
                        \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).1.num\ := \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).1.binaryOperationResult.0\;
                        -- The following section was transformed from the .NET statement below:
                        -- Calculator objectb5778ea03e03361f2d324fb0f47a3239142ada2f362675277fc27741737f5444;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- objectb5778ea03e03361f2d324fb0f47a3239142ada2f362675277fc27741737f5444 = new Calculator {
                        -- 
                        -- };
                        -- 
                        -- Initializing record fields to their defaults.
                        \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).1.objectb5778ea03e03361f2d324fb0f47a3239142ada2f362675277fc27741737f5444\.\IsNull\ := false;
                        \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).1.objectb5778ea03e03361f2d324fb0f47a3239142ada2f362675277fc27741737f5444\.\Number\ := to_unsigned(0, 32);
                        -- The following section was transformed from the .NET statement below:
                        -- objectb5778ea03e03361f2d324fb0f47a3239142ada2f362675277fc27741737f5444.Number = num;
                        -- 
                        \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).1.objectb5778ea03e03361f2d324fb0f47a3239142ada2f362675277fc27741737f5444\.\Number\ := \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).1.num\;
                        -- The following section was transformed from the .NET statement below:
                        -- return Hast.TestInputs.Various.ParallelCases+Calculator.IsEven (objectb5778ea03e03361f2d324fb0f47a3239142ada2f362675277fc27741737f5444);
                        -- 
                        -- Starting state machine invocation for the following method: System.Boolean Hast.TestInputs.Various.ParallelCases+Calculator::IsEven()
                        \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).1.ParallelCases+Calculator::IsEven().this.parameter.Out.0\ <= \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).1.objectb5778ea03e03361f2d324fb0f47a3239142ada2f362675277fc27741737f5444\;
                        \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).1.ParallelCases+Calculator::IsEven()._Started.0\ <= true;
                        \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).1._State\ := \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).1._State_3\;
                        -- Clock cycles needed to complete this state (approximation): 0.3263
                    when \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).1._State_3\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Boolean Hast.TestInputs.Various.ParallelCases+Calculator::IsEven()
                        if (\ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).1.ParallelCases+Calculator::IsEven()._Started.0\ = \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).1.ParallelCases+Calculator::IsEven()._Finished.0\) then 
                            \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).1.ParallelCases+Calculator::IsEven()._Started.0\ <= false;
                            \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).1.return.0\ := \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).1.ParallelCases+Calculator::IsEven().return.0\;
                            \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).1.objectb5778ea03e03361f2d324fb0f47a3239142ada2f362675277fc27741737f5444\ := \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).1.ParallelCases+Calculator::IsEven().this.parameter.In.0\;
                            \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).1.return\ <= \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).1.return.0\;
                            \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).1._State\ := \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).1._State_1\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                end case;
            end if;
        end if;
    end process;
    -- System.Boolean Hast.TestInputs.Various.ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(System.Object).1 state machine end


    -- System.Boolean Hast.TestInputs.Various.ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(System.Object).2 state machine start
    \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).2._StateMachine\: process (\Clock\) 
        Variable \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).2._State\: \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).2._States\ := \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).2._State_0\;
        Variable \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).2.indexObject\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).2.num\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).2.binaryOperationResult.0\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).2.objectb5778ea03e03361f2d324fb0f47a3239142ada2f362675277fc27741737f5444\: \Hast.TestInputs.Various.ParallelCases+Calculator\;
        Variable \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).2.return.0\: boolean := false;
    begin 
        if (rising_edge(\Clock\)) then 
            if (\Reset\ = '1') then 
                -- Synchronous reset
                \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).2._Finished\ <= false;
                \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).2.return\ <= false;
                \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).2.ParallelCases+Calculator::IsEven()._Started.0\ <= false;
                \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).2._State\ := \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).2._State_0\;
                \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).2.indexObject\ := to_unsigned(0, 32);
                \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).2.num\ := to_unsigned(0, 32);
                \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).2.binaryOperationResult.0\ := to_unsigned(0, 32);
                \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).2.return.0\ := false;
            else 
                case \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).2._State\ is 
                    when \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).2._State_0\ => 
                        -- Start state
                        -- Waiting for the start signal.
                        if (\ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).2._Started\ = true) then 
                            \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).2._State\ := \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).2._State_2\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).2._State_1\ => 
                        -- Final state
                        -- Signaling finished until Started is pulled back to false, then returning to the start state.
                        if (\ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).2._Started\ = true) then 
                            \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).2._Finished\ <= true;
                        else 
                            \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).2._Finished\ <= false;
                            \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).2._State\ := \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).2._State_0\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).2._State_2\ => 
                        \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).2.indexObject\ := \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).2.indexObject.parameter.In\;
                        -- The following section was transformed from the .NET statement below:
                        -- uint num;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num = indexObject;
                        -- 
                        \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).2.num\ := \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).2.indexObject\;
                        -- The following section was transformed from the .NET statement below:
                        -- num = num + this.input;
                        -- 
                        \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).2.binaryOperationResult.0\ := \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).2.num\ + \System.UInt32 Hast.TestInputs.Various.ParallelCases+<>c__DisplayClass1_0::input\;
                        \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).2.num\ := \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).2.binaryOperationResult.0\;
                        -- The following section was transformed from the .NET statement below:
                        -- Calculator objectb5778ea03e03361f2d324fb0f47a3239142ada2f362675277fc27741737f5444;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- objectb5778ea03e03361f2d324fb0f47a3239142ada2f362675277fc27741737f5444 = new Calculator {
                        -- 
                        -- };
                        -- 
                        -- Initializing record fields to their defaults.
                        \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).2.objectb5778ea03e03361f2d324fb0f47a3239142ada2f362675277fc27741737f5444\.\IsNull\ := false;
                        \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).2.objectb5778ea03e03361f2d324fb0f47a3239142ada2f362675277fc27741737f5444\.\Number\ := to_unsigned(0, 32);
                        -- The following section was transformed from the .NET statement below:
                        -- objectb5778ea03e03361f2d324fb0f47a3239142ada2f362675277fc27741737f5444.Number = num;
                        -- 
                        \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).2.objectb5778ea03e03361f2d324fb0f47a3239142ada2f362675277fc27741737f5444\.\Number\ := \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).2.num\;
                        -- The following section was transformed from the .NET statement below:
                        -- return Hast.TestInputs.Various.ParallelCases+Calculator.IsEven (objectb5778ea03e03361f2d324fb0f47a3239142ada2f362675277fc27741737f5444);
                        -- 
                        -- Starting state machine invocation for the following method: System.Boolean Hast.TestInputs.Various.ParallelCases+Calculator::IsEven()
                        \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).2.ParallelCases+Calculator::IsEven().this.parameter.Out.0\ <= \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).2.objectb5778ea03e03361f2d324fb0f47a3239142ada2f362675277fc27741737f5444\;
                        \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).2.ParallelCases+Calculator::IsEven()._Started.0\ <= true;
                        \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).2._State\ := \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).2._State_3\;
                        -- Clock cycles needed to complete this state (approximation): 0.3263
                    when \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).2._State_3\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Boolean Hast.TestInputs.Various.ParallelCases+Calculator::IsEven()
                        if (\ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).2.ParallelCases+Calculator::IsEven()._Started.0\ = \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).2.ParallelCases+Calculator::IsEven()._Finished.0\) then 
                            \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).2.ParallelCases+Calculator::IsEven()._Started.0\ <= false;
                            \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).2.return.0\ := \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).2.ParallelCases+Calculator::IsEven().return.0\;
                            \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).2.objectb5778ea03e03361f2d324fb0f47a3239142ada2f362675277fc27741737f5444\ := \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).2.ParallelCases+Calculator::IsEven().this.parameter.In.0\;
                            \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).2.return\ <= \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).2.return.0\;
                            \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).2._State\ := \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).2._State_1\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                end case;
            end if;
        end if;
    end process;
    -- System.Boolean Hast.TestInputs.Various.ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(System.Object).2 state machine end


    -- System.Void Hast.TestInputs.Various.ParallelCases::WhenAllWhenAnyAwaitedTasks(System.UInt32).0 state machine start
    \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0._StateMachine\: process (\Clock\) 
        Variable \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0._State\: \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0._States\ := \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0._State_0\;
        Variable \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0.input\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0.array\: \boolean_Array\(0 to 2) := (others => false);
        Variable \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0.num\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0.binaryOperationResult.0\: boolean := false;
        Variable \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0.ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).invocationIndex\: integer range 0 to 2 := 0;
        Variable \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0.binaryOperationResult.1\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0.return.0\: boolean := false;
        Variable \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0.return.1\: boolean := false;
        Variable \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0.return.2\: boolean := false;
        Variable \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0.return.3\: boolean := false;
        Variable \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0.return.4\: boolean := false;
        Variable \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0.return.5\: boolean := false;
    begin 
        if (rising_edge(\Clock\)) then 
            if (\Reset\ = '1') then 
                -- Synchronous reset
                \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0._Finished\ <= false;
                \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0.ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).indexObject.parameter.Out.0\ <= to_unsigned(0, 32);
                \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0.ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object)._Started.0\ <= false;
                \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0.ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).indexObject.parameter.Out.1\ <= to_unsigned(0, 32);
                \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0.ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object)._Started.1\ <= false;
                \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0.ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).indexObject.parameter.Out.2\ <= to_unsigned(0, 32);
                \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0.ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object)._Started.2\ <= false;
                \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0._State\ := \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0._State_0\;
                \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0.input\ := to_unsigned(0, 32);
                \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0.array\ := (others => false);
                \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0.num\ := to_unsigned(0, 32);
                \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0.binaryOperationResult.0\ := false;
                \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0.ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).invocationIndex\ := 0;
                \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0.binaryOperationResult.1\ := to_unsigned(0, 32);
                \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0.return.0\ := false;
                \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0.return.1\ := false;
                \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0.return.2\ := false;
                \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0.return.3\ := false;
                \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0.return.4\ := false;
                \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0.return.5\ := false;
            else 
                case \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0._State\ is 
                    when \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0._State_0\ => 
                        -- Start state
                        -- Waiting for the start signal.
                        if (\ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0._Started\ = true) then 
                            \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0._State\ := \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0._State_2\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0._State_1\ => 
                        -- Final state
                        -- Signaling finished until Started is pulled back to false, then returning to the start state.
                        if (\ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0._Started\ = true) then 
                            \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0._Finished\ <= true;
                        else 
                            \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0._Finished\ <= false;
                            \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0._State\ := \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0._State_0\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0._State_2\ => 
                        \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0.input\ := \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0.input.parameter.In\;
                        -- The following section was transformed from the .NET statement below:
                        -- <>c__DisplayClass0_0 <>c__DisplayClass0_;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- <>c__DisplayClass0_ = new <>c__DisplayClass0_0 ();
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- <>c__DisplayClass0_.input = input;
                        -- 
                        \System.UInt32 Hast.TestInputs.Various.ParallelCases+<>c__DisplayClass0_0::input\ := \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0.input\;
                        -- The following section was transformed from the .NET statement below:
                        -- Task<bool>[] array;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- array = new Task<bool>[3];
                        -- 
                        \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0.array\ := (others => false);
                        -- The following section was transformed from the .NET statement below:
                        -- uint num;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num = 0u;
                        -- 
                        \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0.num\ := to_unsigned(0, 32);
                        -- The following section was transformed from the .NET statement below:
                        -- while ((long)(num) < 3L) {
                        -- 	array [num] = Task.Factory.StartNew (<>c__DisplayClass0_.<>9__0 ?? (<>c__DisplayClass0_.<>9__0 = <>c__DisplayClass0_.<WhenAllWhenAnyAwaitedTasks>b__0), num);
                        -- 	num = (uint)((long)(num) + 1L);
                        -- }
                        -- 
                        -- Starting a while loop.
                        \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0._State\ := \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0._State_3\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0._State_3\ => 
                        -- Repeated state of the while loop which was started in state \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0._State_2\.
                        -- The while loop's condition:
                        \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0.binaryOperationResult.0\ := signed(SmartResize((\ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0.num\), 64)) < to_signed(3, 64);
                        if (\ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0.binaryOperationResult.0\) then 
                            -- The following section was transformed from the .NET statement below:
                            -- {
                            -- 	array [num] = Task.Factory.StartNew (<>c__DisplayClass0_.<>9__0 ?? (<>c__DisplayClass0_.<>9__0 = <>c__DisplayClass0_.<WhenAllWhenAnyAwaitedTasks>b__0), num);
                            -- 	num = (uint)((long)(num) + 1L);
                            -- }
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- array [num] = Task.Factory.StartNew (<>c__DisplayClass0_.<>9__0 ?? (<>c__DisplayClass0_.<>9__0 = <>c__DisplayClass0_.<WhenAllWhenAnyAwaitedTasks>b__0), num);
                            -- 
                            -- Starting state machine invocation for the following method: System.Boolean Hast.TestInputs.Various.ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(System.Object)
                            case \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0.ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).invocationIndex\ is 
                                when 0 => 
                                    \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0.ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).indexObject.parameter.Out.0\ <= \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0.num\;
                                    \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0.ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object)._Started.0\ <= true;
                                when 1 => 
                                    \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0.ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).indexObject.parameter.Out.1\ <= \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0.num\;
                                    \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0.ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object)._Started.1\ <= true;
                                when 2 => 
                                    \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0.ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).indexObject.parameter.Out.2\ <= \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0.num\;
                                    \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0.ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object)._Started.2\ <= true;
                            end case;
                            \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0.ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).invocationIndex\ := \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0.ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).invocationIndex\ + 1;
                            -- The following section was transformed from the .NET statement below:
                            -- num = (uint)((long)(num) + 1L);
                            -- 
                            \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0.binaryOperationResult.1\ := SmartResize(unsigned(signed(SmartResize((\ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0.num\), 64)) + to_signed(1, 64)), 32);
                            \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0.num\ := (\ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0.binaryOperationResult.1\);
                        else 
                            \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0._State\ := \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0._State_4\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.6795
                    when \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0._State_4\ => 
                        -- State after the while loop which was started in state \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0._State_2\.
                        -- The following section was transformed from the .NET statement below:
                        -- Task.WhenAll (array).Wait ();
                        -- 
                        \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0._State\ := \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0._State_5\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0._State_5\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Boolean Hast.TestInputs.Various.ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(System.Object)
                        if (\ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0.ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object)._Started.1\ = \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0.ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object)._Finished.1\ and \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0.ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object)._Started.2\ = \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0.ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object)._Finished.2\ and \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0.ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object)._Started.0\ = \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0.ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object)._Finished.0\) then 
                            \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0.ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object)._Started.0\ <= false;
                            \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0.ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object)._Started.1\ <= false;
                            \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0.ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object)._Started.2\ <= false;
                            \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0.ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).invocationIndex\ := 0;
                            \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0.return.0\ := \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0.ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).return.0\;
                            \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0.return.1\ := \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0.ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).return.1\;
                            \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0.return.2\ := \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0.ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).return.2\;
                            \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0.array\(0) := \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0.return.0\;
                            \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0.array\(1) := \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0.return.1\;
                            \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0.array\(2) := \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0.return.2\;
                            -- The following section was transformed from the .NET statement below:
                            -- Task.WhenAny (array).Wait ();
                            -- 
                            \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0._State\ := \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0._State_6\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0._State_6\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Boolean Hast.TestInputs.Various.ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(System.Object)
                        if (\ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0.ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object)._Started.1\ = \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0.ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object)._Finished.1\ or \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0.ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object)._Started.2\ = \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0.ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object)._Finished.2\ or \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0.ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object)._Started.0\ = \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0.ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object)._Finished.0\) then 
                            \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0.ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object)._Started.0\ <= false;
                            \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0.ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object)._Started.1\ <= false;
                            \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0.ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object)._Started.2\ <= false;
                            \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0.ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).invocationIndex\ := 0;
                            \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0.return.3\ := \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0.ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).return.0\;
                            \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0.return.4\ := \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0.ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).return.1\;
                            \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0.return.5\ := \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0.ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).return.2\;
                            \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0.array\(0) := \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0.return.3\;
                            \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0.array\(1) := \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0.return.4\;
                            \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0.array\(2) := \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0.return.5\;
                            \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0._State\ := \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0._State_1\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                end case;
            end if;
        end if;
    end process;
    -- System.Void Hast.TestInputs.Various.ParallelCases::WhenAllWhenAnyAwaitedTasks(System.UInt32).0 state machine end


    -- System.Void Hast.TestInputs.Various.ParallelCases::ObjectUsingTasks(System.UInt32).0 state machine start
    \ParallelCases::ObjectUsingTasks(UInt32).0._StateMachine\: process (\Clock\) 
        Variable \ParallelCases::ObjectUsingTasks(UInt32).0._State\: \ParallelCases::ObjectUsingTasks(UInt32).0._States\ := \ParallelCases::ObjectUsingTasks(UInt32).0._State_0\;
        Variable \ParallelCases::ObjectUsingTasks(UInt32).0.input\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \ParallelCases::ObjectUsingTasks(UInt32).0.array\: \boolean_Array\(0 to 2) := (others => false);
        Variable \ParallelCases::ObjectUsingTasks(UInt32).0.num\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \ParallelCases::ObjectUsingTasks(UInt32).0.binaryOperationResult.0\: boolean := false;
        Variable \ParallelCases::ObjectUsingTasks(UInt32).0.ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).invocationIndex\: integer range 0 to 2 := 0;
        Variable \ParallelCases::ObjectUsingTasks(UInt32).0.binaryOperationResult.1\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \ParallelCases::ObjectUsingTasks(UInt32).0.return.0\: boolean := false;
        Variable \ParallelCases::ObjectUsingTasks(UInt32).0.return.1\: boolean := false;
        Variable \ParallelCases::ObjectUsingTasks(UInt32).0.return.2\: boolean := false;
    begin 
        if (rising_edge(\Clock\)) then 
            if (\Reset\ = '1') then 
                -- Synchronous reset
                \ParallelCases::ObjectUsingTasks(UInt32).0._Finished\ <= false;
                \ParallelCases::ObjectUsingTasks(UInt32).0.ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).indexObject.parameter.Out.0\ <= to_unsigned(0, 32);
                \ParallelCases::ObjectUsingTasks(UInt32).0.ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object)._Started.0\ <= false;
                \ParallelCases::ObjectUsingTasks(UInt32).0.ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).indexObject.parameter.Out.1\ <= to_unsigned(0, 32);
                \ParallelCases::ObjectUsingTasks(UInt32).0.ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object)._Started.1\ <= false;
                \ParallelCases::ObjectUsingTasks(UInt32).0.ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).indexObject.parameter.Out.2\ <= to_unsigned(0, 32);
                \ParallelCases::ObjectUsingTasks(UInt32).0.ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object)._Started.2\ <= false;
                \ParallelCases::ObjectUsingTasks(UInt32).0._State\ := \ParallelCases::ObjectUsingTasks(UInt32).0._State_0\;
                \ParallelCases::ObjectUsingTasks(UInt32).0.input\ := to_unsigned(0, 32);
                \ParallelCases::ObjectUsingTasks(UInt32).0.array\ := (others => false);
                \ParallelCases::ObjectUsingTasks(UInt32).0.num\ := to_unsigned(0, 32);
                \ParallelCases::ObjectUsingTasks(UInt32).0.binaryOperationResult.0\ := false;
                \ParallelCases::ObjectUsingTasks(UInt32).0.ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).invocationIndex\ := 0;
                \ParallelCases::ObjectUsingTasks(UInt32).0.binaryOperationResult.1\ := to_unsigned(0, 32);
                \ParallelCases::ObjectUsingTasks(UInt32).0.return.0\ := false;
                \ParallelCases::ObjectUsingTasks(UInt32).0.return.1\ := false;
                \ParallelCases::ObjectUsingTasks(UInt32).0.return.2\ := false;
            else 
                case \ParallelCases::ObjectUsingTasks(UInt32).0._State\ is 
                    when \ParallelCases::ObjectUsingTasks(UInt32).0._State_0\ => 
                        -- Start state
                        -- Waiting for the start signal.
                        if (\ParallelCases::ObjectUsingTasks(UInt32).0._Started\ = true) then 
                            \ParallelCases::ObjectUsingTasks(UInt32).0._State\ := \ParallelCases::ObjectUsingTasks(UInt32).0._State_2\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \ParallelCases::ObjectUsingTasks(UInt32).0._State_1\ => 
                        -- Final state
                        -- Signaling finished until Started is pulled back to false, then returning to the start state.
                        if (\ParallelCases::ObjectUsingTasks(UInt32).0._Started\ = true) then 
                            \ParallelCases::ObjectUsingTasks(UInt32).0._Finished\ <= true;
                        else 
                            \ParallelCases::ObjectUsingTasks(UInt32).0._Finished\ <= false;
                            \ParallelCases::ObjectUsingTasks(UInt32).0._State\ := \ParallelCases::ObjectUsingTasks(UInt32).0._State_0\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \ParallelCases::ObjectUsingTasks(UInt32).0._State_2\ => 
                        \ParallelCases::ObjectUsingTasks(UInt32).0.input\ := \ParallelCases::ObjectUsingTasks(UInt32).0.input.parameter.In\;
                        -- The following section was transformed from the .NET statement below:
                        -- <>c__DisplayClass1_0 <>c__DisplayClass1_;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- <>c__DisplayClass1_ = new <>c__DisplayClass1_0 ();
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- <>c__DisplayClass1_.input = input;
                        -- 
                        \System.UInt32 Hast.TestInputs.Various.ParallelCases+<>c__DisplayClass1_0::input\ := \ParallelCases::ObjectUsingTasks(UInt32).0.input\;
                        -- The following section was transformed from the .NET statement below:
                        -- Task<bool>[] array;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- array = new Task<bool>[3];
                        -- 
                        \ParallelCases::ObjectUsingTasks(UInt32).0.array\ := (others => false);
                        -- The following section was transformed from the .NET statement below:
                        -- uint num;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num = 0u;
                        -- 
                        \ParallelCases::ObjectUsingTasks(UInt32).0.num\ := to_unsigned(0, 32);
                        -- The following section was transformed from the .NET statement below:
                        -- while ((long)(num) < 3L) {
                        -- 	array [num] = Task.Factory.StartNew (<>c__DisplayClass1_.<>9__0 ?? (<>c__DisplayClass1_.<>9__0 = <>c__DisplayClass1_.<ObjectUsingTasks>b__0), num);
                        -- 	num = (uint)((long)(num) + 1L);
                        -- }
                        -- 
                        -- Starting a while loop.
                        \ParallelCases::ObjectUsingTasks(UInt32).0._State\ := \ParallelCases::ObjectUsingTasks(UInt32).0._State_3\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \ParallelCases::ObjectUsingTasks(UInt32).0._State_3\ => 
                        -- Repeated state of the while loop which was started in state \ParallelCases::ObjectUsingTasks(UInt32).0._State_2\.
                        -- The while loop's condition:
                        \ParallelCases::ObjectUsingTasks(UInt32).0.binaryOperationResult.0\ := signed(SmartResize((\ParallelCases::ObjectUsingTasks(UInt32).0.num\), 64)) < to_signed(3, 64);
                        if (\ParallelCases::ObjectUsingTasks(UInt32).0.binaryOperationResult.0\) then 
                            -- The following section was transformed from the .NET statement below:
                            -- {
                            -- 	array [num] = Task.Factory.StartNew (<>c__DisplayClass1_.<>9__0 ?? (<>c__DisplayClass1_.<>9__0 = <>c__DisplayClass1_.<ObjectUsingTasks>b__0), num);
                            -- 	num = (uint)((long)(num) + 1L);
                            -- }
                            -- 
                            -- The following section was transformed from the .NET statement below:
                            -- array [num] = Task.Factory.StartNew (<>c__DisplayClass1_.<>9__0 ?? (<>c__DisplayClass1_.<>9__0 = <>c__DisplayClass1_.<ObjectUsingTasks>b__0), num);
                            -- 
                            -- Starting state machine invocation for the following method: System.Boolean Hast.TestInputs.Various.ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(System.Object)
                            case \ParallelCases::ObjectUsingTasks(UInt32).0.ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).invocationIndex\ is 
                                when 0 => 
                                    \ParallelCases::ObjectUsingTasks(UInt32).0.ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).indexObject.parameter.Out.0\ <= \ParallelCases::ObjectUsingTasks(UInt32).0.num\;
                                    \ParallelCases::ObjectUsingTasks(UInt32).0.ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object)._Started.0\ <= true;
                                when 1 => 
                                    \ParallelCases::ObjectUsingTasks(UInt32).0.ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).indexObject.parameter.Out.1\ <= \ParallelCases::ObjectUsingTasks(UInt32).0.num\;
                                    \ParallelCases::ObjectUsingTasks(UInt32).0.ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object)._Started.1\ <= true;
                                when 2 => 
                                    \ParallelCases::ObjectUsingTasks(UInt32).0.ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).indexObject.parameter.Out.2\ <= \ParallelCases::ObjectUsingTasks(UInt32).0.num\;
                                    \ParallelCases::ObjectUsingTasks(UInt32).0.ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object)._Started.2\ <= true;
                            end case;
                            \ParallelCases::ObjectUsingTasks(UInt32).0.ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).invocationIndex\ := \ParallelCases::ObjectUsingTasks(UInt32).0.ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).invocationIndex\ + 1;
                            -- The following section was transformed from the .NET statement below:
                            -- num = (uint)((long)(num) + 1L);
                            -- 
                            \ParallelCases::ObjectUsingTasks(UInt32).0.binaryOperationResult.1\ := SmartResize(unsigned(signed(SmartResize((\ParallelCases::ObjectUsingTasks(UInt32).0.num\), 64)) + to_signed(1, 64)), 32);
                            \ParallelCases::ObjectUsingTasks(UInt32).0.num\ := (\ParallelCases::ObjectUsingTasks(UInt32).0.binaryOperationResult.1\);
                        else 
                            \ParallelCases::ObjectUsingTasks(UInt32).0._State\ := \ParallelCases::ObjectUsingTasks(UInt32).0._State_4\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.6795
                    when \ParallelCases::ObjectUsingTasks(UInt32).0._State_4\ => 
                        -- State after the while loop which was started in state \ParallelCases::ObjectUsingTasks(UInt32).0._State_2\.
                        -- The following section was transformed from the .NET statement below:
                        -- Task.WhenAll (array).Wait ();
                        -- 
                        \ParallelCases::ObjectUsingTasks(UInt32).0._State\ := \ParallelCases::ObjectUsingTasks(UInt32).0._State_5\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \ParallelCases::ObjectUsingTasks(UInt32).0._State_5\ => 
                        -- Waiting for the state machine invocation of the following method to finish: System.Boolean Hast.TestInputs.Various.ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(System.Object)
                        if (\ParallelCases::ObjectUsingTasks(UInt32).0.ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object)._Started.1\ = \ParallelCases::ObjectUsingTasks(UInt32).0.ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object)._Finished.1\ and \ParallelCases::ObjectUsingTasks(UInt32).0.ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object)._Started.2\ = \ParallelCases::ObjectUsingTasks(UInt32).0.ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object)._Finished.2\ and \ParallelCases::ObjectUsingTasks(UInt32).0.ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object)._Started.0\ = \ParallelCases::ObjectUsingTasks(UInt32).0.ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object)._Finished.0\) then 
                            \ParallelCases::ObjectUsingTasks(UInt32).0.ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object)._Started.0\ <= false;
                            \ParallelCases::ObjectUsingTasks(UInt32).0.ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object)._Started.1\ <= false;
                            \ParallelCases::ObjectUsingTasks(UInt32).0.ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object)._Started.2\ <= false;
                            \ParallelCases::ObjectUsingTasks(UInt32).0.ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).invocationIndex\ := 0;
                            \ParallelCases::ObjectUsingTasks(UInt32).0.return.0\ := \ParallelCases::ObjectUsingTasks(UInt32).0.ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).return.0\;
                            \ParallelCases::ObjectUsingTasks(UInt32).0.return.1\ := \ParallelCases::ObjectUsingTasks(UInt32).0.ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).return.1\;
                            \ParallelCases::ObjectUsingTasks(UInt32).0.return.2\ := \ParallelCases::ObjectUsingTasks(UInt32).0.ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).return.2\;
                            \ParallelCases::ObjectUsingTasks(UInt32).0.array\(0) := \ParallelCases::ObjectUsingTasks(UInt32).0.return.0\;
                            \ParallelCases::ObjectUsingTasks(UInt32).0.array\(1) := \ParallelCases::ObjectUsingTasks(UInt32).0.return.1\;
                            \ParallelCases::ObjectUsingTasks(UInt32).0.array\(2) := \ParallelCases::ObjectUsingTasks(UInt32).0.return.2\;
                            \ParallelCases::ObjectUsingTasks(UInt32).0._State\ := \ParallelCases::ObjectUsingTasks(UInt32).0._State_1\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                end case;
            end if;
        end if;
    end process;
    -- System.Void Hast.TestInputs.Various.ParallelCases::ObjectUsingTasks(System.UInt32).0 state machine end


    -- System.Void Hast.TestInputs.Various.UnaryCases::IncrementDecrement(System.Int32).0 state machine start
    \UnaryCases::IncrementDecrement(Int32).0._StateMachine\: process (\Clock\) 
        Variable \UnaryCases::IncrementDecrement(Int32).0._State\: \UnaryCases::IncrementDecrement(Int32).0._States\ := \UnaryCases::IncrementDecrement(Int32).0._State_0\;
        Variable \UnaryCases::IncrementDecrement(Int32).0.input\: signed(31 downto 0) := to_signed(0, 32);
        Variable \UnaryCases::IncrementDecrement(Int32).0.array\: \signed32_Array\(0 to 4) := (others => to_signed(0, 32));
        Variable \UnaryCases::IncrementDecrement(Int32).0.binaryOperationResult.0\: boolean := false;
        Variable \UnaryCases::IncrementDecrement(Int32).0.num\: signed(31 downto 0) := to_signed(0, 32);
        Variable \UnaryCases::IncrementDecrement(Int32).0.binaryOperationResult.1\: signed(31 downto 0) := to_signed(0, 32);
        Variable \UnaryCases::IncrementDecrement(Int32).0.num2\: signed(31 downto 0) := to_signed(0, 32);
        Variable \UnaryCases::IncrementDecrement(Int32).0.binaryOperationResult.2\: signed(31 downto 0) := to_signed(0, 32);
    begin 
        if (rising_edge(\Clock\)) then 
            if (\Reset\ = '1') then 
                -- Synchronous reset
                \UnaryCases::IncrementDecrement(Int32).0._Finished\ <= false;
                \UnaryCases::IncrementDecrement(Int32).0._State\ := \UnaryCases::IncrementDecrement(Int32).0._State_0\;
                \UnaryCases::IncrementDecrement(Int32).0.input\ := to_signed(0, 32);
                \UnaryCases::IncrementDecrement(Int32).0.array\ := (others => to_signed(0, 32));
                \UnaryCases::IncrementDecrement(Int32).0.binaryOperationResult.0\ := false;
                \UnaryCases::IncrementDecrement(Int32).0.num\ := to_signed(0, 32);
                \UnaryCases::IncrementDecrement(Int32).0.binaryOperationResult.1\ := to_signed(0, 32);
                \UnaryCases::IncrementDecrement(Int32).0.num2\ := to_signed(0, 32);
                \UnaryCases::IncrementDecrement(Int32).0.binaryOperationResult.2\ := to_signed(0, 32);
            else 
                case \UnaryCases::IncrementDecrement(Int32).0._State\ is 
                    when \UnaryCases::IncrementDecrement(Int32).0._State_0\ => 
                        -- Start state
                        -- Waiting for the start signal.
                        if (\UnaryCases::IncrementDecrement(Int32).0._Started\ = true) then 
                            \UnaryCases::IncrementDecrement(Int32).0._State\ := \UnaryCases::IncrementDecrement(Int32).0._State_2\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \UnaryCases::IncrementDecrement(Int32).0._State_1\ => 
                        -- Final state
                        -- Signaling finished until Started is pulled back to false, then returning to the start state.
                        if (\UnaryCases::IncrementDecrement(Int32).0._Started\ = true) then 
                            \UnaryCases::IncrementDecrement(Int32).0._Finished\ <= true;
                        else 
                            \UnaryCases::IncrementDecrement(Int32).0._Finished\ <= false;
                            \UnaryCases::IncrementDecrement(Int32).0._State\ := \UnaryCases::IncrementDecrement(Int32).0._State_0\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \UnaryCases::IncrementDecrement(Int32).0._State_2\ => 
                        \UnaryCases::IncrementDecrement(Int32).0.input\ := \UnaryCases::IncrementDecrement(Int32).0.input.parameter.In\;
                        -- The following section was transformed from the .NET statement below:
                        -- int[] array;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- array = new int[5];
                        -- 
                        \UnaryCases::IncrementDecrement(Int32).0.array\ := (others => to_signed(0, 32));
                        -- The following section was transformed from the .NET statement below:
                        -- if (input < 10) {
                        -- 	int num;
                        -- 	num = input;
                        -- 	input = num + 1;
                        -- 	array [num] = 3;
                        -- 	int num2;
                        -- 	num2 = input;
                        -- 	input = num2 - 1;
                        -- 	array [num2] = 3;
                        -- }
                        -- 
                        \UnaryCases::IncrementDecrement(Int32).0.binaryOperationResult.0\ := \UnaryCases::IncrementDecrement(Int32).0.input\ < to_signed(10, 32);

                        -- This if-else was transformed from a .NET if-else. It spans across multiple states:
                        --     * The true branch starts in state \UnaryCases::IncrementDecrement(Int32).0._State_4\ and ends in state \UnaryCases::IncrementDecrement(Int32).0._State_4\.
                        --     * Execution after either branch will continue in the following state: \UnaryCases::IncrementDecrement(Int32).0._State_3\.

                        if (\UnaryCases::IncrementDecrement(Int32).0.binaryOperationResult.0\) then 
                            \UnaryCases::IncrementDecrement(Int32).0._State\ := \UnaryCases::IncrementDecrement(Int32).0._State_4\;
                        else 
                            -- There was no false branch, so going directly to the state after the if-else.
                            \UnaryCases::IncrementDecrement(Int32).0._State\ := \UnaryCases::IncrementDecrement(Int32).0._State_3\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.2753
                    when \UnaryCases::IncrementDecrement(Int32).0._State_3\ => 
                        -- State after the if-else which was started in state \UnaryCases::IncrementDecrement(Int32).0._State_2\.
                        \UnaryCases::IncrementDecrement(Int32).0._State\ := \UnaryCases::IncrementDecrement(Int32).0._State_1\;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \UnaryCases::IncrementDecrement(Int32).0._State_4\ => 
                        -- True branch of the if-else started in state \UnaryCases::IncrementDecrement(Int32).0._State_2\.
                        -- The following section was transformed from the .NET statement below:
                        -- {
                        -- 	int num;
                        -- 	num = input;
                        -- 	input = num + 1;
                        -- 	array [num] = 3;
                        -- 	int num2;
                        -- 	num2 = input;
                        -- 	input = num2 - 1;
                        -- 	array [num2] = 3;
                        -- }
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- int num;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num = input;
                        -- 
                        \UnaryCases::IncrementDecrement(Int32).0.num\ := \UnaryCases::IncrementDecrement(Int32).0.input\;
                        -- The following section was transformed from the .NET statement below:
                        -- input = num + 1;
                        -- 
                        \UnaryCases::IncrementDecrement(Int32).0.binaryOperationResult.1\ := \UnaryCases::IncrementDecrement(Int32).0.num\ + to_signed(1, 32);
                        \UnaryCases::IncrementDecrement(Int32).0.input\ := \UnaryCases::IncrementDecrement(Int32).0.binaryOperationResult.1\;
                        -- The following section was transformed from the .NET statement below:
                        -- array [num] = 3;
                        -- 
                        \UnaryCases::IncrementDecrement(Int32).0.array\(to_integer(\UnaryCases::IncrementDecrement(Int32).0.num\)) := to_signed(3, 32);
                        -- The following section was transformed from the .NET statement below:
                        -- int num2;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num2 = input;
                        -- 
                        \UnaryCases::IncrementDecrement(Int32).0.num2\ := \UnaryCases::IncrementDecrement(Int32).0.input\;
                        -- The following section was transformed from the .NET statement below:
                        -- input = num2 - 1;
                        -- 
                        \UnaryCases::IncrementDecrement(Int32).0.binaryOperationResult.2\ := \UnaryCases::IncrementDecrement(Int32).0.num2\ - to_signed(1, 32);
                        \UnaryCases::IncrementDecrement(Int32).0.input\ := \UnaryCases::IncrementDecrement(Int32).0.binaryOperationResult.2\;
                        -- The following section was transformed from the .NET statement below:
                        -- array [num2] = 3;
                        -- 
                        \UnaryCases::IncrementDecrement(Int32).0.array\(to_integer(\UnaryCases::IncrementDecrement(Int32).0.num2\)) := to_signed(3, 32);
                        -- Going to the state after the if-else which was started in state \UnaryCases::IncrementDecrement(Int32).0._State_2\.
                        if (\UnaryCases::IncrementDecrement(Int32).0._State\ = \UnaryCases::IncrementDecrement(Int32).0._State_4\) then 
                            \UnaryCases::IncrementDecrement(Int32).0._State\ := \UnaryCases::IncrementDecrement(Int32).0._State_3\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0.6526
                end case;
            end if;
        end if;
    end process;
    -- System.Void Hast.TestInputs.Various.UnaryCases::IncrementDecrement(System.Int32).0 state machine end


    -- System.Void Hast.TestInputs.Various.WronglyDecompiledCases::IncorrectlyDecompiledLiterals().0 state machine start
    \WronglyDecompiledCases::IncorrectlyDecompiledLiterals().0._StateMachine\: process (\Clock\) 
        Variable \WronglyDecompiledCases::IncorrectlyDecompiledLiterals().0._State\: \WronglyDecompiledCases::IncorrectlyDecompiledLiterals().0._States\ := \WronglyDecompiledCases::IncorrectlyDecompiledLiterals().0._State_0\;
        Variable \WronglyDecompiledCases::IncorrectlyDecompiledLiterals().0.num\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \WronglyDecompiledCases::IncorrectlyDecompiledLiterals().0.num2\: unsigned(31 downto 0) := to_unsigned(0, 32);
        Variable \WronglyDecompiledCases::IncorrectlyDecompiledLiterals().0.num3\: unsigned(63 downto 0) := to_unsigned(0, 64);
        Variable \WronglyDecompiledCases::IncorrectlyDecompiledLiterals().0.num4\: unsigned(63 downto 0) := to_unsigned(0, 64);
    begin 
        if (rising_edge(\Clock\)) then 
            if (\Reset\ = '1') then 
                -- Synchronous reset
                \WronglyDecompiledCases::IncorrectlyDecompiledLiterals().0._Finished\ <= false;
                \WronglyDecompiledCases::IncorrectlyDecompiledLiterals().0._State\ := \WronglyDecompiledCases::IncorrectlyDecompiledLiterals().0._State_0\;
                \WronglyDecompiledCases::IncorrectlyDecompiledLiterals().0.num\ := to_unsigned(0, 32);
                \WronglyDecompiledCases::IncorrectlyDecompiledLiterals().0.num2\ := to_unsigned(0, 32);
                \WronglyDecompiledCases::IncorrectlyDecompiledLiterals().0.num3\ := to_unsigned(0, 64);
                \WronglyDecompiledCases::IncorrectlyDecompiledLiterals().0.num4\ := to_unsigned(0, 64);
            else 
                case \WronglyDecompiledCases::IncorrectlyDecompiledLiterals().0._State\ is 
                    when \WronglyDecompiledCases::IncorrectlyDecompiledLiterals().0._State_0\ => 
                        -- Start state
                        -- Waiting for the start signal.
                        if (\WronglyDecompiledCases::IncorrectlyDecompiledLiterals().0._Started\ = true) then 
                            \WronglyDecompiledCases::IncorrectlyDecompiledLiterals().0._State\ := \WronglyDecompiledCases::IncorrectlyDecompiledLiterals().0._State_2\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \WronglyDecompiledCases::IncorrectlyDecompiledLiterals().0._State_1\ => 
                        -- Final state
                        -- Signaling finished until Started is pulled back to false, then returning to the start state.
                        if (\WronglyDecompiledCases::IncorrectlyDecompiledLiterals().0._Started\ = true) then 
                            \WronglyDecompiledCases::IncorrectlyDecompiledLiterals().0._Finished\ <= true;
                        else 
                            \WronglyDecompiledCases::IncorrectlyDecompiledLiterals().0._Finished\ <= false;
                            \WronglyDecompiledCases::IncorrectlyDecompiledLiterals().0._State\ := \WronglyDecompiledCases::IncorrectlyDecompiledLiterals().0._State_0\;
                        end if;
                        -- Clock cycles needed to complete this state (approximation): 0
                    when \WronglyDecompiledCases::IncorrectlyDecompiledLiterals().0._State_2\ => 
                        -- The following section was transformed from the .NET statement below:
                        -- uint num;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num = 4294836225u;
                        -- 
                        -- Since the integer literal 4294836225 was out of the VHDL integer range it was substituted with a binary literal (11111111111111100000000000000001).
                        \WronglyDecompiledCases::IncorrectlyDecompiledLiterals().0.num\ := "11111111111111100000000000000001";
                        -- The following section was transformed from the .NET statement below:
                        -- uint num2;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num2 = 4294836229u;
                        -- 
                        -- Since the integer literal 4294836229 was out of the VHDL integer range it was substituted with a binary literal (11111111111111100000000000000101).
                        \WronglyDecompiledCases::IncorrectlyDecompiledLiterals().0.num2\ := "11111111111111100000000000000101";
                        -- The following section was transformed from the .NET statement below:
                        -- ulong num3;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num3 = 4294883355uL;
                        -- 
                        -- Since the integer literal 4294883355 was out of the VHDL integer range it was substituted with a binary literal (11111111111111101011100000011011).
                        \WronglyDecompiledCases::IncorrectlyDecompiledLiterals().0.num3\ := "0000000000000000000000000000000011111111111111101011100000011011";
                        -- The following section was transformed from the .NET statement below:
                        -- ulong num4;
                        -- 
                        -- The following section was transformed from the .NET statement below:
                        -- num4 = 4294883359uL;
                        -- 
                        -- Since the integer literal 4294883359 was out of the VHDL integer range it was substituted with a binary literal (11111111111111101011100000011111).
                        \WronglyDecompiledCases::IncorrectlyDecompiledLiterals().0.num4\ := "0000000000000000000000000000000011111111111111101011100000011111";
                        \WronglyDecompiledCases::IncorrectlyDecompiledLiterals().0._State\ := \WronglyDecompiledCases::IncorrectlyDecompiledLiterals().0._State_1\;
                        -- Clock cycles needed to complete this state (approximation): 0
                end case;
            end if;
        end if;
    end process;
    -- System.Void Hast.TestInputs.Various.WronglyDecompiledCases::IncorrectlyDecompiledLiterals().0 state machine end


    -- System.Void Hast::ExternalInvocationProxy() start
    \Finished\ <= \FinishedInternal\;
    \Hast::ExternalInvocationProxy()\: process (\Clock\) 
    begin 
        if (rising_edge(\Clock\)) then 
            if (\Reset\ = '1') then 
                -- Synchronous reset
                \FinishedInternal\ <= false;
                \Hast::ExternalInvocationProxy().RootClass::VirtualMethod(Int32)._Started.0\ <= false;
                \Hast::ExternalInvocationProxy().ComplexTypeHierarchy::Hast.TestInputs.ClassStructure1.ComplexTypes.IInterface1.Interface1Method1()._Started.0\ <= false;
                \Hast::ExternalInvocationProxy().ComplexTypeHierarchy::Interface1Method2()._Started.0\ <= false;
                \Hast::ExternalInvocationProxy().ComplexTypeHierarchy::Interface2Method1()._Started.0\ <= false;
                \Hast::ExternalInvocationProxy().ComplexTypeHierarchy::Hast.TestInputs.ClassStructure1.ComplexTypes.IBaseInterface.BaseInterfaceMethod1()._Started.0\ <= false;
                \Hast::ExternalInvocationProxy().ComplexTypeHierarchy::BaseInterfaceMethod2()._Started.0\ <= false;
                \Hast::ExternalInvocationProxy().ComplexTypeHierarchy::NonVirtualNonInterfaceMehod()._Started.0\ <= false;
                \Hast::ExternalInvocationProxy().StaticClass::StaticMethod()._Started.0\ <= false;
                \Hast::ExternalInvocationProxy().UnusedDeclarations::UnusedMethod()._Started.0\ <= false;
                \Hast::ExternalInvocationProxy().StaticReference::StaticClassUsingMethod()._Started.0\ <= false;
                \Hast::ExternalInvocationProxy().ArrayUsingCases::PassArrayToConstructor()._Started.0\ <= false;
                \Hast::ExternalInvocationProxy().ArrayUsingCases::PassArrayFromMethod()._Started.0\ <= false;
                \Hast::ExternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32)._Started.0\ <= false;
                \Hast::ExternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(Int32)._Started.0\ <= false;
                \Hast::ExternalInvocationProxy().CastingCases::NumberCasting(Int16,Int16)._Started.0\ <= false;
                \Hast::ExternalInvocationProxy().ConstantsUsingCases::ConstantValuedVariables(Int32)._Started.0\ <= false;
                \Hast::ExternalInvocationProxy().ConstantsUsingCases::ConstantPassingToMethod(Int32)._Started.0\ <= false;
                \Hast::ExternalInvocationProxy().ConstantsUsingCases::ConstantPassingToObject()._Started.0\ <= false;
                \Hast::ExternalInvocationProxy().LoopCases::BreakInLoop(Int32)._Started.0\ <= false;
                \Hast::ExternalInvocationProxy().LoopCases::BreakInLoopInLoop(Int32)._Started.0\ <= false;
                \Hast::ExternalInvocationProxy().ObjectUsingCases::NullUsage()._Started.0\ <= false;
                \Hast::ExternalInvocationProxy().ObjectUsingCases::VoidReturn(Int32)._Started.0\ <= false;
                \Hast::ExternalInvocationProxy().ObjectUsingCases::ReferenceAssignment(Int32)._Started.0\ <= false;
                \Hast::ExternalInvocationProxy().ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32)._Started.0\ <= false;
                \Hast::ExternalInvocationProxy().ParallelCases::ObjectUsingTasks(UInt32)._Started.0\ <= false;
                \Hast::ExternalInvocationProxy().UnaryCases::IncrementDecrement(Int32)._Started.0\ <= false;
                \Hast::ExternalInvocationProxy().WronglyDecompiledCases::IncorrectlyDecompiledLiterals()._Started.0\ <= false;
            else 
                if (\Started\ = true and \FinishedInternal\ = false) then 
                    -- Starting the state machine corresponding to the given member ID.
                    case \MemberId\ is 
                        when 0 => 
                            if (\Hast::ExternalInvocationProxy().RootClass::VirtualMethod(Int32)._Started.0\ = false) then 
                                \Hast::ExternalInvocationProxy().RootClass::VirtualMethod(Int32)._Started.0\ <= true;
                            elsif (\Hast::ExternalInvocationProxy().RootClass::VirtualMethod(Int32)._Started.0\ = \Hast::ExternalInvocationProxy().RootClass::VirtualMethod(Int32)._Finished.0\) then 
                                \Hast::ExternalInvocationProxy().RootClass::VirtualMethod(Int32)._Started.0\ <= false;
                                \FinishedInternal\ <= true;
                            end if;
                        when 1 => 
                            if (\Hast::ExternalInvocationProxy().ComplexTypeHierarchy::Hast.TestInputs.ClassStructure1.ComplexTypes.IInterface1.Interface1Method1()._Started.0\ = false) then 
                                \Hast::ExternalInvocationProxy().ComplexTypeHierarchy::Hast.TestInputs.ClassStructure1.ComplexTypes.IInterface1.Interface1Method1()._Started.0\ <= true;
                            elsif (\Hast::ExternalInvocationProxy().ComplexTypeHierarchy::Hast.TestInputs.ClassStructure1.ComplexTypes.IInterface1.Interface1Method1()._Started.0\ = \Hast::ExternalInvocationProxy().ComplexTypeHierarchy::Hast.TestInputs.ClassStructure1.ComplexTypes.IInterface1.Interface1Method1()._Finished.0\) then 
                                \Hast::ExternalInvocationProxy().ComplexTypeHierarchy::Hast.TestInputs.ClassStructure1.ComplexTypes.IInterface1.Interface1Method1()._Started.0\ <= false;
                                \FinishedInternal\ <= true;
                            end if;
                        when 2 => 
                            if (\Hast::ExternalInvocationProxy().ComplexTypeHierarchy::Interface1Method2()._Started.0\ = false) then 
                                \Hast::ExternalInvocationProxy().ComplexTypeHierarchy::Interface1Method2()._Started.0\ <= true;
                            elsif (\Hast::ExternalInvocationProxy().ComplexTypeHierarchy::Interface1Method2()._Started.0\ = \Hast::ExternalInvocationProxy().ComplexTypeHierarchy::Interface1Method2()._Finished.0\) then 
                                \Hast::ExternalInvocationProxy().ComplexTypeHierarchy::Interface1Method2()._Started.0\ <= false;
                                \FinishedInternal\ <= true;
                            end if;
                        when 3 => 
                            if (\Hast::ExternalInvocationProxy().ComplexTypeHierarchy::Interface2Method1()._Started.0\ = false) then 
                                \Hast::ExternalInvocationProxy().ComplexTypeHierarchy::Interface2Method1()._Started.0\ <= true;
                            elsif (\Hast::ExternalInvocationProxy().ComplexTypeHierarchy::Interface2Method1()._Started.0\ = \Hast::ExternalInvocationProxy().ComplexTypeHierarchy::Interface2Method1()._Finished.0\) then 
                                \Hast::ExternalInvocationProxy().ComplexTypeHierarchy::Interface2Method1()._Started.0\ <= false;
                                \FinishedInternal\ <= true;
                            end if;
                        when 4 => 
                            if (\Hast::ExternalInvocationProxy().ComplexTypeHierarchy::Hast.TestInputs.ClassStructure1.ComplexTypes.IBaseInterface.BaseInterfaceMethod1()._Started.0\ = false) then 
                                \Hast::ExternalInvocationProxy().ComplexTypeHierarchy::Hast.TestInputs.ClassStructure1.ComplexTypes.IBaseInterface.BaseInterfaceMethod1()._Started.0\ <= true;
                            elsif (\Hast::ExternalInvocationProxy().ComplexTypeHierarchy::Hast.TestInputs.ClassStructure1.ComplexTypes.IBaseInterface.BaseInterfaceMethod1()._Started.0\ = \Hast::ExternalInvocationProxy().ComplexTypeHierarchy::Hast.TestInputs.ClassStructure1.ComplexTypes.IBaseInterface.BaseInterfaceMethod1()._Finished.0\) then 
                                \Hast::ExternalInvocationProxy().ComplexTypeHierarchy::Hast.TestInputs.ClassStructure1.ComplexTypes.IBaseInterface.BaseInterfaceMethod1()._Started.0\ <= false;
                                \FinishedInternal\ <= true;
                            end if;
                        when 5 => 
                            if (\Hast::ExternalInvocationProxy().ComplexTypeHierarchy::BaseInterfaceMethod2()._Started.0\ = false) then 
                                \Hast::ExternalInvocationProxy().ComplexTypeHierarchy::BaseInterfaceMethod2()._Started.0\ <= true;
                            elsif (\Hast::ExternalInvocationProxy().ComplexTypeHierarchy::BaseInterfaceMethod2()._Started.0\ = \Hast::ExternalInvocationProxy().ComplexTypeHierarchy::BaseInterfaceMethod2()._Finished.0\) then 
                                \Hast::ExternalInvocationProxy().ComplexTypeHierarchy::BaseInterfaceMethod2()._Started.0\ <= false;
                                \FinishedInternal\ <= true;
                            end if;
                        when 6 => 
                            if (\Hast::ExternalInvocationProxy().ComplexTypeHierarchy::NonVirtualNonInterfaceMehod()._Started.0\ = false) then 
                                \Hast::ExternalInvocationProxy().ComplexTypeHierarchy::NonVirtualNonInterfaceMehod()._Started.0\ <= true;
                            elsif (\Hast::ExternalInvocationProxy().ComplexTypeHierarchy::NonVirtualNonInterfaceMehod()._Started.0\ = \Hast::ExternalInvocationProxy().ComplexTypeHierarchy::NonVirtualNonInterfaceMehod()._Finished.0\) then 
                                \Hast::ExternalInvocationProxy().ComplexTypeHierarchy::NonVirtualNonInterfaceMehod()._Started.0\ <= false;
                                \FinishedInternal\ <= true;
                            end if;
                        when 7 => 
                            if (\Hast::ExternalInvocationProxy().StaticClass::StaticMethod()._Started.0\ = false) then 
                                \Hast::ExternalInvocationProxy().StaticClass::StaticMethod()._Started.0\ <= true;
                            elsif (\Hast::ExternalInvocationProxy().StaticClass::StaticMethod()._Started.0\ = \Hast::ExternalInvocationProxy().StaticClass::StaticMethod()._Finished.0\) then 
                                \Hast::ExternalInvocationProxy().StaticClass::StaticMethod()._Started.0\ <= false;
                                \FinishedInternal\ <= true;
                            end if;
                        when 8 => 
                            if (\Hast::ExternalInvocationProxy().UnusedDeclarations::UnusedMethod()._Started.0\ = false) then 
                                \Hast::ExternalInvocationProxy().UnusedDeclarations::UnusedMethod()._Started.0\ <= true;
                            elsif (\Hast::ExternalInvocationProxy().UnusedDeclarations::UnusedMethod()._Started.0\ = \Hast::ExternalInvocationProxy().UnusedDeclarations::UnusedMethod()._Finished.0\) then 
                                \Hast::ExternalInvocationProxy().UnusedDeclarations::UnusedMethod()._Started.0\ <= false;
                                \FinishedInternal\ <= true;
                            end if;
                        when 9 => 
                            if (\Hast::ExternalInvocationProxy().StaticReference::StaticClassUsingMethod()._Started.0\ = false) then 
                                \Hast::ExternalInvocationProxy().StaticReference::StaticClassUsingMethod()._Started.0\ <= true;
                            elsif (\Hast::ExternalInvocationProxy().StaticReference::StaticClassUsingMethod()._Started.0\ = \Hast::ExternalInvocationProxy().StaticReference::StaticClassUsingMethod()._Finished.0\) then 
                                \Hast::ExternalInvocationProxy().StaticReference::StaticClassUsingMethod()._Started.0\ <= false;
                                \FinishedInternal\ <= true;
                            end if;
                        when 10 => 
                            if (\Hast::ExternalInvocationProxy().ArrayUsingCases::PassArrayToConstructor()._Started.0\ = false) then 
                                \Hast::ExternalInvocationProxy().ArrayUsingCases::PassArrayToConstructor()._Started.0\ <= true;
                            elsif (\Hast::ExternalInvocationProxy().ArrayUsingCases::PassArrayToConstructor()._Started.0\ = \Hast::ExternalInvocationProxy().ArrayUsingCases::PassArrayToConstructor()._Finished.0\) then 
                                \Hast::ExternalInvocationProxy().ArrayUsingCases::PassArrayToConstructor()._Started.0\ <= false;
                                \FinishedInternal\ <= true;
                            end if;
                        when 11 => 
                            if (\Hast::ExternalInvocationProxy().ArrayUsingCases::PassArrayFromMethod()._Started.0\ = false) then 
                                \Hast::ExternalInvocationProxy().ArrayUsingCases::PassArrayFromMethod()._Started.0\ <= true;
                            elsif (\Hast::ExternalInvocationProxy().ArrayUsingCases::PassArrayFromMethod()._Started.0\ = \Hast::ExternalInvocationProxy().ArrayUsingCases::PassArrayFromMethod()._Finished.0\) then 
                                \Hast::ExternalInvocationProxy().ArrayUsingCases::PassArrayFromMethod()._Started.0\ <= false;
                                \FinishedInternal\ <= true;
                            end if;
                        when 12 => 
                            if (\Hast::ExternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32)._Started.0\ = false) then 
                                \Hast::ExternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32)._Started.0\ <= true;
                            elsif (\Hast::ExternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32)._Started.0\ = \Hast::ExternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32)._Finished.0\) then 
                                \Hast::ExternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32)._Started.0\ <= false;
                                \FinishedInternal\ <= true;
                            end if;
                        when 13 => 
                            if (\Hast::ExternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(Int32)._Started.0\ = false) then 
                                \Hast::ExternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(Int32)._Started.0\ <= true;
                            elsif (\Hast::ExternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(Int32)._Started.0\ = \Hast::ExternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(Int32)._Finished.0\) then 
                                \Hast::ExternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(Int32)._Started.0\ <= false;
                                \FinishedInternal\ <= true;
                            end if;
                        when 14 => 
                            if (\Hast::ExternalInvocationProxy().CastingCases::NumberCasting(Int16,Int16)._Started.0\ = false) then 
                                \Hast::ExternalInvocationProxy().CastingCases::NumberCasting(Int16,Int16)._Started.0\ <= true;
                            elsif (\Hast::ExternalInvocationProxy().CastingCases::NumberCasting(Int16,Int16)._Started.0\ = \Hast::ExternalInvocationProxy().CastingCases::NumberCasting(Int16,Int16)._Finished.0\) then 
                                \Hast::ExternalInvocationProxy().CastingCases::NumberCasting(Int16,Int16)._Started.0\ <= false;
                                \FinishedInternal\ <= true;
                            end if;
                        when 15 => 
                            if (\Hast::ExternalInvocationProxy().ConstantsUsingCases::ConstantValuedVariables(Int32)._Started.0\ = false) then 
                                \Hast::ExternalInvocationProxy().ConstantsUsingCases::ConstantValuedVariables(Int32)._Started.0\ <= true;
                            elsif (\Hast::ExternalInvocationProxy().ConstantsUsingCases::ConstantValuedVariables(Int32)._Started.0\ = \Hast::ExternalInvocationProxy().ConstantsUsingCases::ConstantValuedVariables(Int32)._Finished.0\) then 
                                \Hast::ExternalInvocationProxy().ConstantsUsingCases::ConstantValuedVariables(Int32)._Started.0\ <= false;
                                \FinishedInternal\ <= true;
                            end if;
                        when 16 => 
                            if (\Hast::ExternalInvocationProxy().ConstantsUsingCases::ConstantPassingToMethod(Int32)._Started.0\ = false) then 
                                \Hast::ExternalInvocationProxy().ConstantsUsingCases::ConstantPassingToMethod(Int32)._Started.0\ <= true;
                            elsif (\Hast::ExternalInvocationProxy().ConstantsUsingCases::ConstantPassingToMethod(Int32)._Started.0\ = \Hast::ExternalInvocationProxy().ConstantsUsingCases::ConstantPassingToMethod(Int32)._Finished.0\) then 
                                \Hast::ExternalInvocationProxy().ConstantsUsingCases::ConstantPassingToMethod(Int32)._Started.0\ <= false;
                                \FinishedInternal\ <= true;
                            end if;
                        when 17 => 
                            if (\Hast::ExternalInvocationProxy().ConstantsUsingCases::ConstantPassingToObject()._Started.0\ = false) then 
                                \Hast::ExternalInvocationProxy().ConstantsUsingCases::ConstantPassingToObject()._Started.0\ <= true;
                            elsif (\Hast::ExternalInvocationProxy().ConstantsUsingCases::ConstantPassingToObject()._Started.0\ = \Hast::ExternalInvocationProxy().ConstantsUsingCases::ConstantPassingToObject()._Finished.0\) then 
                                \Hast::ExternalInvocationProxy().ConstantsUsingCases::ConstantPassingToObject()._Started.0\ <= false;
                                \FinishedInternal\ <= true;
                            end if;
                        when 18 => 
                            if (\Hast::ExternalInvocationProxy().LoopCases::BreakInLoop(Int32)._Started.0\ = false) then 
                                \Hast::ExternalInvocationProxy().LoopCases::BreakInLoop(Int32)._Started.0\ <= true;
                            elsif (\Hast::ExternalInvocationProxy().LoopCases::BreakInLoop(Int32)._Started.0\ = \Hast::ExternalInvocationProxy().LoopCases::BreakInLoop(Int32)._Finished.0\) then 
                                \Hast::ExternalInvocationProxy().LoopCases::BreakInLoop(Int32)._Started.0\ <= false;
                                \FinishedInternal\ <= true;
                            end if;
                        when 19 => 
                            if (\Hast::ExternalInvocationProxy().LoopCases::BreakInLoopInLoop(Int32)._Started.0\ = false) then 
                                \Hast::ExternalInvocationProxy().LoopCases::BreakInLoopInLoop(Int32)._Started.0\ <= true;
                            elsif (\Hast::ExternalInvocationProxy().LoopCases::BreakInLoopInLoop(Int32)._Started.0\ = \Hast::ExternalInvocationProxy().LoopCases::BreakInLoopInLoop(Int32)._Finished.0\) then 
                                \Hast::ExternalInvocationProxy().LoopCases::BreakInLoopInLoop(Int32)._Started.0\ <= false;
                                \FinishedInternal\ <= true;
                            end if;
                        when 20 => 
                            if (\Hast::ExternalInvocationProxy().ObjectUsingCases::NullUsage()._Started.0\ = false) then 
                                \Hast::ExternalInvocationProxy().ObjectUsingCases::NullUsage()._Started.0\ <= true;
                            elsif (\Hast::ExternalInvocationProxy().ObjectUsingCases::NullUsage()._Started.0\ = \Hast::ExternalInvocationProxy().ObjectUsingCases::NullUsage()._Finished.0\) then 
                                \Hast::ExternalInvocationProxy().ObjectUsingCases::NullUsage()._Started.0\ <= false;
                                \FinishedInternal\ <= true;
                            end if;
                        when 21 => 
                            if (\Hast::ExternalInvocationProxy().ObjectUsingCases::VoidReturn(Int32)._Started.0\ = false) then 
                                \Hast::ExternalInvocationProxy().ObjectUsingCases::VoidReturn(Int32)._Started.0\ <= true;
                            elsif (\Hast::ExternalInvocationProxy().ObjectUsingCases::VoidReturn(Int32)._Started.0\ = \Hast::ExternalInvocationProxy().ObjectUsingCases::VoidReturn(Int32)._Finished.0\) then 
                                \Hast::ExternalInvocationProxy().ObjectUsingCases::VoidReturn(Int32)._Started.0\ <= false;
                                \FinishedInternal\ <= true;
                            end if;
                        when 22 => 
                            if (\Hast::ExternalInvocationProxy().ObjectUsingCases::ReferenceAssignment(Int32)._Started.0\ = false) then 
                                \Hast::ExternalInvocationProxy().ObjectUsingCases::ReferenceAssignment(Int32)._Started.0\ <= true;
                            elsif (\Hast::ExternalInvocationProxy().ObjectUsingCases::ReferenceAssignment(Int32)._Started.0\ = \Hast::ExternalInvocationProxy().ObjectUsingCases::ReferenceAssignment(Int32)._Finished.0\) then 
                                \Hast::ExternalInvocationProxy().ObjectUsingCases::ReferenceAssignment(Int32)._Started.0\ <= false;
                                \FinishedInternal\ <= true;
                            end if;
                        when 23 => 
                            if (\Hast::ExternalInvocationProxy().ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32)._Started.0\ = false) then 
                                \Hast::ExternalInvocationProxy().ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32)._Started.0\ <= true;
                            elsif (\Hast::ExternalInvocationProxy().ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32)._Started.0\ = \Hast::ExternalInvocationProxy().ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32)._Finished.0\) then 
                                \Hast::ExternalInvocationProxy().ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32)._Started.0\ <= false;
                                \FinishedInternal\ <= true;
                            end if;
                        when 24 => 
                            if (\Hast::ExternalInvocationProxy().ParallelCases::ObjectUsingTasks(UInt32)._Started.0\ = false) then 
                                \Hast::ExternalInvocationProxy().ParallelCases::ObjectUsingTasks(UInt32)._Started.0\ <= true;
                            elsif (\Hast::ExternalInvocationProxy().ParallelCases::ObjectUsingTasks(UInt32)._Started.0\ = \Hast::ExternalInvocationProxy().ParallelCases::ObjectUsingTasks(UInt32)._Finished.0\) then 
                                \Hast::ExternalInvocationProxy().ParallelCases::ObjectUsingTasks(UInt32)._Started.0\ <= false;
                                \FinishedInternal\ <= true;
                            end if;
                        when 25 => 
                            if (\Hast::ExternalInvocationProxy().UnaryCases::IncrementDecrement(Int32)._Started.0\ = false) then 
                                \Hast::ExternalInvocationProxy().UnaryCases::IncrementDecrement(Int32)._Started.0\ <= true;
                            elsif (\Hast::ExternalInvocationProxy().UnaryCases::IncrementDecrement(Int32)._Started.0\ = \Hast::ExternalInvocationProxy().UnaryCases::IncrementDecrement(Int32)._Finished.0\) then 
                                \Hast::ExternalInvocationProxy().UnaryCases::IncrementDecrement(Int32)._Started.0\ <= false;
                                \FinishedInternal\ <= true;
                            end if;
                        when 26 => 
                            if (\Hast::ExternalInvocationProxy().WronglyDecompiledCases::IncorrectlyDecompiledLiterals()._Started.0\ = false) then 
                                \Hast::ExternalInvocationProxy().WronglyDecompiledCases::IncorrectlyDecompiledLiterals()._Started.0\ <= true;
                            elsif (\Hast::ExternalInvocationProxy().WronglyDecompiledCases::IncorrectlyDecompiledLiterals()._Started.0\ = \Hast::ExternalInvocationProxy().WronglyDecompiledCases::IncorrectlyDecompiledLiterals()._Finished.0\) then 
                                \Hast::ExternalInvocationProxy().WronglyDecompiledCases::IncorrectlyDecompiledLiterals()._Started.0\ <= false;
                                \FinishedInternal\ <= true;
                            end if;
                        when others => 
                            null;
                    end case;
                else 
                    -- Waiting for Started to be pulled back to zero that signals the framework noting the finish.
                    if (\Started\ = false and \FinishedInternal\ = true) then 
                        \FinishedInternal\ <= false;
                    end if;
                end if;
            end if;
        end if;
    end process;
    -- System.Void Hast::ExternalInvocationProxy() end


    -- System.Void Hast::InternalInvocationProxy().System.Void Hast.TestInputs.ClassStructure1.ComplexTypes.ComplexTypeHierarchy::PrivateMethod() start
    \Hast::InternalInvocationProxy().ComplexTypeHierarchy::PrivateMethod()\: process (\Clock\) 
        Variable \Hast::InternalInvocationProxy().ComplexTypeHierarchy::PrivateMethod().ComplexTypeHierarchy::Hast.TestInputs.ClassStructure1.ComplexTypes.IInterface1.Interface1Method1().0.runningIndex.0\: integer range 0 to 0 := 0;
        Variable \Hast::InternalInvocationProxy().ComplexTypeHierarchy::PrivateMethod().ComplexTypeHierarchy::Hast.TestInputs.ClassStructure1.ComplexTypes.IInterface1.Interface1Method1().0.runningState.0\: \Hast::InternalInvocationProxy()._RunningStates\ := WaitingForStarted;
        Variable \Hast::InternalInvocationProxy().ComplexTypeHierarchy::PrivateMethod().ComplexTypeHierarchy::Interface1Method2().0.runningIndex.0\: integer range 0 to 0 := 0;
        Variable \Hast::InternalInvocationProxy().ComplexTypeHierarchy::PrivateMethod().ComplexTypeHierarchy::Interface1Method2().0.runningState.0\: \Hast::InternalInvocationProxy()._RunningStates\ := WaitingForStarted;
        Variable \Hast::InternalInvocationProxy().ComplexTypeHierarchy::PrivateMethod().ComplexTypeHierarchy::NonVirtualNonInterfaceMehod().0.runningIndex.0\: integer range 0 to 0 := 0;
        Variable \Hast::InternalInvocationProxy().ComplexTypeHierarchy::PrivateMethod().ComplexTypeHierarchy::NonVirtualNonInterfaceMehod().0.runningState.0\: \Hast::InternalInvocationProxy()._RunningStates\ := WaitingForStarted;
    begin 
        if (rising_edge(\Clock\)) then 
            if (\Reset\ = '1') then 
                -- Synchronous reset
                \Hast::InternalInvocationProxy().ComplexTypeHierarchy::PrivateMethod().ComplexTypeHierarchy::Hast.TestInputs.ClassStructure1.ComplexTypes.IInterface1.Interface1Method1().0.runningIndex.0\ := 0;
                \Hast::InternalInvocationProxy().ComplexTypeHierarchy::PrivateMethod().ComplexTypeHierarchy::Hast.TestInputs.ClassStructure1.ComplexTypes.IInterface1.Interface1Method1().0.runningState.0\ := WaitingForStarted;
                \Hast::InternalInvocationProxy().ComplexTypeHierarchy::PrivateMethod().ComplexTypeHierarchy::Interface1Method2().0.runningIndex.0\ := 0;
                \Hast::InternalInvocationProxy().ComplexTypeHierarchy::PrivateMethod().ComplexTypeHierarchy::Interface1Method2().0.runningState.0\ := WaitingForStarted;
                \Hast::InternalInvocationProxy().ComplexTypeHierarchy::PrivateMethod().ComplexTypeHierarchy::NonVirtualNonInterfaceMehod().0.runningIndex.0\ := 0;
                \Hast::InternalInvocationProxy().ComplexTypeHierarchy::PrivateMethod().ComplexTypeHierarchy::NonVirtualNonInterfaceMehod().0.runningState.0\ := WaitingForStarted;
                \ComplexTypeHierarchy::Hast.TestInputs.ClassStructure1.ComplexTypes.IInterface1.Interface1Method1().0.ComplexTypeHierarchy::PrivateMethod()._Finished.0\ <= false;
                \ComplexTypeHierarchy::Interface1Method2().0.ComplexTypeHierarchy::PrivateMethod()._Finished.0\ <= false;
                \ComplexTypeHierarchy::NonVirtualNonInterfaceMehod().0.ComplexTypeHierarchy::PrivateMethod()._Finished.0\ <= false;
            else 

                -- Invocation handler #0 out of 1 corresponding to System.Void Hast.TestInputs.ClassStructure1.ComplexTypes.ComplexTypeHierarchy::Hast.TestInputs.ClassStructure1.ComplexTypes.IInterface1.Interface1Method1().0
                case \Hast::InternalInvocationProxy().ComplexTypeHierarchy::PrivateMethod().ComplexTypeHierarchy::Hast.TestInputs.ClassStructure1.ComplexTypes.IInterface1.Interface1Method1().0.runningState.0\ is 
                    when WaitingForStarted => 
                        if (\ComplexTypeHierarchy::Hast.TestInputs.ClassStructure1.ComplexTypes.IInterface1.Interface1Method1().0.ComplexTypeHierarchy::PrivateMethod()._Started.0\) then 
                            \ComplexTypeHierarchy::Hast.TestInputs.ClassStructure1.ComplexTypes.IInterface1.Interface1Method1().0.ComplexTypeHierarchy::PrivateMethod()._Finished.0\ <= false;
                            \Hast::InternalInvocationProxy().ComplexTypeHierarchy::PrivateMethod().ComplexTypeHierarchy::Hast.TestInputs.ClassStructure1.ComplexTypes.IInterface1.Interface1Method1().0.runningState.0\ := WaitingForFinished;
                            \Hast::InternalInvocationProxy().ComplexTypeHierarchy::PrivateMethod().ComplexTypeHierarchy::Hast.TestInputs.ClassStructure1.ComplexTypes.IInterface1.Interface1Method1().0.runningIndex.0\ := 0;
                            \ComplexTypeHierarchy::PrivateMethod().0._Started\ <= true;
                        end if;
                    when WaitingForFinished => 
                        case \Hast::InternalInvocationProxy().ComplexTypeHierarchy::PrivateMethod().ComplexTypeHierarchy::Hast.TestInputs.ClassStructure1.ComplexTypes.IInterface1.Interface1Method1().0.runningIndex.0\ is 
                            when 0 => 
                                if (\ComplexTypeHierarchy::PrivateMethod().0._Finished\) then 
                                    \Hast::InternalInvocationProxy().ComplexTypeHierarchy::PrivateMethod().ComplexTypeHierarchy::Hast.TestInputs.ClassStructure1.ComplexTypes.IInterface1.Interface1Method1().0.runningState.0\ := AfterFinished;
                                    \ComplexTypeHierarchy::Hast.TestInputs.ClassStructure1.ComplexTypes.IInterface1.Interface1Method1().0.ComplexTypeHierarchy::PrivateMethod()._Finished.0\ <= true;
                                    \ComplexTypeHierarchy::PrivateMethod().0._Started\ <= false;
                                end if;
                        end case;
                    when AfterFinished => 
                        -- Invoking components need to pull down the Started signal to false.
                        if (\ComplexTypeHierarchy::Hast.TestInputs.ClassStructure1.ComplexTypes.IInterface1.Interface1Method1().0.ComplexTypeHierarchy::PrivateMethod()._Started.0\ = false) then 
                            \Hast::InternalInvocationProxy().ComplexTypeHierarchy::PrivateMethod().ComplexTypeHierarchy::Hast.TestInputs.ClassStructure1.ComplexTypes.IInterface1.Interface1Method1().0.runningState.0\ := WaitingForStarted;
                            \ComplexTypeHierarchy::Hast.TestInputs.ClassStructure1.ComplexTypes.IInterface1.Interface1Method1().0.ComplexTypeHierarchy::PrivateMethod()._Finished.0\ <= false;
                        end if;
                end case;


                -- Invocation handler #0 out of 1 corresponding to System.Void Hast.TestInputs.ClassStructure1.ComplexTypes.ComplexTypeHierarchy::Interface1Method2().0
                case \Hast::InternalInvocationProxy().ComplexTypeHierarchy::PrivateMethod().ComplexTypeHierarchy::Interface1Method2().0.runningState.0\ is 
                    when WaitingForStarted => 
                        if (\ComplexTypeHierarchy::Interface1Method2().0.ComplexTypeHierarchy::PrivateMethod()._Started.0\) then 
                            \ComplexTypeHierarchy::Interface1Method2().0.ComplexTypeHierarchy::PrivateMethod()._Finished.0\ <= false;
                            \Hast::InternalInvocationProxy().ComplexTypeHierarchy::PrivateMethod().ComplexTypeHierarchy::Interface1Method2().0.runningState.0\ := WaitingForFinished;
                            \Hast::InternalInvocationProxy().ComplexTypeHierarchy::PrivateMethod().ComplexTypeHierarchy::Interface1Method2().0.runningIndex.0\ := 0;
                            \ComplexTypeHierarchy::PrivateMethod().0._Started\ <= true;
                        end if;
                    when WaitingForFinished => 
                        case \Hast::InternalInvocationProxy().ComplexTypeHierarchy::PrivateMethod().ComplexTypeHierarchy::Interface1Method2().0.runningIndex.0\ is 
                            when 0 => 
                                if (\ComplexTypeHierarchy::PrivateMethod().0._Finished\) then 
                                    \Hast::InternalInvocationProxy().ComplexTypeHierarchy::PrivateMethod().ComplexTypeHierarchy::Interface1Method2().0.runningState.0\ := AfterFinished;
                                    \ComplexTypeHierarchy::Interface1Method2().0.ComplexTypeHierarchy::PrivateMethod()._Finished.0\ <= true;
                                    \ComplexTypeHierarchy::PrivateMethod().0._Started\ <= false;
                                end if;
                        end case;
                    when AfterFinished => 
                        -- Invoking components need to pull down the Started signal to false.
                        if (\ComplexTypeHierarchy::Interface1Method2().0.ComplexTypeHierarchy::PrivateMethod()._Started.0\ = false) then 
                            \Hast::InternalInvocationProxy().ComplexTypeHierarchy::PrivateMethod().ComplexTypeHierarchy::Interface1Method2().0.runningState.0\ := WaitingForStarted;
                            \ComplexTypeHierarchy::Interface1Method2().0.ComplexTypeHierarchy::PrivateMethod()._Finished.0\ <= false;
                        end if;
                end case;


                -- Invocation handler #0 out of 1 corresponding to System.Void Hast.TestInputs.ClassStructure1.ComplexTypes.ComplexTypeHierarchy::NonVirtualNonInterfaceMehod().0
                case \Hast::InternalInvocationProxy().ComplexTypeHierarchy::PrivateMethod().ComplexTypeHierarchy::NonVirtualNonInterfaceMehod().0.runningState.0\ is 
                    when WaitingForStarted => 
                        if (\ComplexTypeHierarchy::NonVirtualNonInterfaceMehod().0.ComplexTypeHierarchy::PrivateMethod()._Started.0\) then 
                            \ComplexTypeHierarchy::NonVirtualNonInterfaceMehod().0.ComplexTypeHierarchy::PrivateMethod()._Finished.0\ <= false;
                            \Hast::InternalInvocationProxy().ComplexTypeHierarchy::PrivateMethod().ComplexTypeHierarchy::NonVirtualNonInterfaceMehod().0.runningState.0\ := WaitingForFinished;
                            \Hast::InternalInvocationProxy().ComplexTypeHierarchy::PrivateMethod().ComplexTypeHierarchy::NonVirtualNonInterfaceMehod().0.runningIndex.0\ := 0;
                            \ComplexTypeHierarchy::PrivateMethod().0._Started\ <= true;
                        end if;
                    when WaitingForFinished => 
                        case \Hast::InternalInvocationProxy().ComplexTypeHierarchy::PrivateMethod().ComplexTypeHierarchy::NonVirtualNonInterfaceMehod().0.runningIndex.0\ is 
                            when 0 => 
                                if (\ComplexTypeHierarchy::PrivateMethod().0._Finished\) then 
                                    \Hast::InternalInvocationProxy().ComplexTypeHierarchy::PrivateMethod().ComplexTypeHierarchy::NonVirtualNonInterfaceMehod().0.runningState.0\ := AfterFinished;
                                    \ComplexTypeHierarchy::NonVirtualNonInterfaceMehod().0.ComplexTypeHierarchy::PrivateMethod()._Finished.0\ <= true;
                                    \ComplexTypeHierarchy::PrivateMethod().0._Started\ <= false;
                                end if;
                        end case;
                    when AfterFinished => 
                        -- Invoking components need to pull down the Started signal to false.
                        if (\ComplexTypeHierarchy::NonVirtualNonInterfaceMehod().0.ComplexTypeHierarchy::PrivateMethod()._Started.0\ = false) then 
                            \Hast::InternalInvocationProxy().ComplexTypeHierarchy::PrivateMethod().ComplexTypeHierarchy::NonVirtualNonInterfaceMehod().0.runningState.0\ := WaitingForStarted;
                            \ComplexTypeHierarchy::NonVirtualNonInterfaceMehod().0.ComplexTypeHierarchy::PrivateMethod()._Finished.0\ <= false;
                        end if;
                end case;

            end if;
        end if;
    end process;
    -- System.Void Hast::InternalInvocationProxy().System.Void Hast.TestInputs.ClassStructure1.ComplexTypes.ComplexTypeHierarchy::PrivateMethod() end


    -- System.Void Hast::InternalInvocationProxy().System.Void Hast.TestInputs.ClassStructure1.ComplexTypes.ComplexTypeHierarchy::StaticMethod() start
    \Hast::InternalInvocationProxy().ComplexTypeHierarchy::StaticMethod()\: process (\Clock\) 
        Variable \Hast::InternalInvocationProxy().ComplexTypeHierarchy::StaticMethod().ComplexTypeHierarchy::Interface1Method2().0.runningIndex.0\: integer range 0 to 0 := 0;
        Variable \Hast::InternalInvocationProxy().ComplexTypeHierarchy::StaticMethod().ComplexTypeHierarchy::Interface1Method2().0.runningState.0\: \Hast::InternalInvocationProxy()._RunningStates\ := WaitingForStarted;
        Variable \Hast::InternalInvocationProxy().ComplexTypeHierarchy::StaticMethod().ComplexTypeHierarchy::BaseInterfaceMethod2().0.runningIndex.0\: integer range 0 to 0 := 0;
        Variable \Hast::InternalInvocationProxy().ComplexTypeHierarchy::StaticMethod().ComplexTypeHierarchy::BaseInterfaceMethod2().0.runningState.0\: \Hast::InternalInvocationProxy()._RunningStates\ := WaitingForStarted;
        Variable \Hast::InternalInvocationProxy().ComplexTypeHierarchy::StaticMethod().ComplexTypeHierarchy::PrivateMethod().0.runningIndex.0\: integer range 0 to 0 := 0;
        Variable \Hast::InternalInvocationProxy().ComplexTypeHierarchy::StaticMethod().ComplexTypeHierarchy::PrivateMethod().0.runningState.0\: \Hast::InternalInvocationProxy()._RunningStates\ := WaitingForStarted;
    begin 
        if (rising_edge(\Clock\)) then 
            if (\Reset\ = '1') then 
                -- Synchronous reset
                \Hast::InternalInvocationProxy().ComplexTypeHierarchy::StaticMethod().ComplexTypeHierarchy::Interface1Method2().0.runningIndex.0\ := 0;
                \Hast::InternalInvocationProxy().ComplexTypeHierarchy::StaticMethod().ComplexTypeHierarchy::Interface1Method2().0.runningState.0\ := WaitingForStarted;
                \Hast::InternalInvocationProxy().ComplexTypeHierarchy::StaticMethod().ComplexTypeHierarchy::BaseInterfaceMethod2().0.runningIndex.0\ := 0;
                \Hast::InternalInvocationProxy().ComplexTypeHierarchy::StaticMethod().ComplexTypeHierarchy::BaseInterfaceMethod2().0.runningState.0\ := WaitingForStarted;
                \Hast::InternalInvocationProxy().ComplexTypeHierarchy::StaticMethod().ComplexTypeHierarchy::PrivateMethod().0.runningIndex.0\ := 0;
                \Hast::InternalInvocationProxy().ComplexTypeHierarchy::StaticMethod().ComplexTypeHierarchy::PrivateMethod().0.runningState.0\ := WaitingForStarted;
                \ComplexTypeHierarchy::Interface1Method2().0.ComplexTypeHierarchy::StaticMethod()._Finished.0\ <= false;
                \ComplexTypeHierarchy::BaseInterfaceMethod2().0.ComplexTypeHierarchy::StaticMethod()._Finished.0\ <= false;
                \ComplexTypeHierarchy::PrivateMethod().0.ComplexTypeHierarchy::StaticMethod()._Finished.0\ <= false;
            else 

                -- Invocation handler #0 out of 1 corresponding to System.Void Hast.TestInputs.ClassStructure1.ComplexTypes.ComplexTypeHierarchy::Interface1Method2().0
                case \Hast::InternalInvocationProxy().ComplexTypeHierarchy::StaticMethod().ComplexTypeHierarchy::Interface1Method2().0.runningState.0\ is 
                    when WaitingForStarted => 
                        if (\ComplexTypeHierarchy::Interface1Method2().0.ComplexTypeHierarchy::StaticMethod()._Started.0\) then 
                            \ComplexTypeHierarchy::Interface1Method2().0.ComplexTypeHierarchy::StaticMethod()._Finished.0\ <= false;
                            \Hast::InternalInvocationProxy().ComplexTypeHierarchy::StaticMethod().ComplexTypeHierarchy::Interface1Method2().0.runningState.0\ := WaitingForFinished;
                            \Hast::InternalInvocationProxy().ComplexTypeHierarchy::StaticMethod().ComplexTypeHierarchy::Interface1Method2().0.runningIndex.0\ := 0;
                            \ComplexTypeHierarchy::StaticMethod().0._Started\ <= true;
                        end if;
                    when WaitingForFinished => 
                        case \Hast::InternalInvocationProxy().ComplexTypeHierarchy::StaticMethod().ComplexTypeHierarchy::Interface1Method2().0.runningIndex.0\ is 
                            when 0 => 
                                if (\ComplexTypeHierarchy::StaticMethod().0._Finished\) then 
                                    \Hast::InternalInvocationProxy().ComplexTypeHierarchy::StaticMethod().ComplexTypeHierarchy::Interface1Method2().0.runningState.0\ := AfterFinished;
                                    \ComplexTypeHierarchy::Interface1Method2().0.ComplexTypeHierarchy::StaticMethod()._Finished.0\ <= true;
                                    \ComplexTypeHierarchy::StaticMethod().0._Started\ <= false;
                                end if;
                        end case;
                    when AfterFinished => 
                        -- Invoking components need to pull down the Started signal to false.
                        if (\ComplexTypeHierarchy::Interface1Method2().0.ComplexTypeHierarchy::StaticMethod()._Started.0\ = false) then 
                            \Hast::InternalInvocationProxy().ComplexTypeHierarchy::StaticMethod().ComplexTypeHierarchy::Interface1Method2().0.runningState.0\ := WaitingForStarted;
                            \ComplexTypeHierarchy::Interface1Method2().0.ComplexTypeHierarchy::StaticMethod()._Finished.0\ <= false;
                        end if;
                end case;


                -- Invocation handler #0 out of 1 corresponding to System.Void Hast.TestInputs.ClassStructure1.ComplexTypes.ComplexTypeHierarchy::BaseInterfaceMethod2().0
                case \Hast::InternalInvocationProxy().ComplexTypeHierarchy::StaticMethod().ComplexTypeHierarchy::BaseInterfaceMethod2().0.runningState.0\ is 
                    when WaitingForStarted => 
                        if (\ComplexTypeHierarchy::BaseInterfaceMethod2().0.ComplexTypeHierarchy::StaticMethod()._Started.0\) then 
                            \ComplexTypeHierarchy::BaseInterfaceMethod2().0.ComplexTypeHierarchy::StaticMethod()._Finished.0\ <= false;
                            \Hast::InternalInvocationProxy().ComplexTypeHierarchy::StaticMethod().ComplexTypeHierarchy::BaseInterfaceMethod2().0.runningState.0\ := WaitingForFinished;
                            \Hast::InternalInvocationProxy().ComplexTypeHierarchy::StaticMethod().ComplexTypeHierarchy::BaseInterfaceMethod2().0.runningIndex.0\ := 0;
                            \ComplexTypeHierarchy::StaticMethod().0._Started\ <= true;
                        end if;
                    when WaitingForFinished => 
                        case \Hast::InternalInvocationProxy().ComplexTypeHierarchy::StaticMethod().ComplexTypeHierarchy::BaseInterfaceMethod2().0.runningIndex.0\ is 
                            when 0 => 
                                if (\ComplexTypeHierarchy::StaticMethod().0._Finished\) then 
                                    \Hast::InternalInvocationProxy().ComplexTypeHierarchy::StaticMethod().ComplexTypeHierarchy::BaseInterfaceMethod2().0.runningState.0\ := AfterFinished;
                                    \ComplexTypeHierarchy::BaseInterfaceMethod2().0.ComplexTypeHierarchy::StaticMethod()._Finished.0\ <= true;
                                    \ComplexTypeHierarchy::StaticMethod().0._Started\ <= false;
                                end if;
                        end case;
                    when AfterFinished => 
                        -- Invoking components need to pull down the Started signal to false.
                        if (\ComplexTypeHierarchy::BaseInterfaceMethod2().0.ComplexTypeHierarchy::StaticMethod()._Started.0\ = false) then 
                            \Hast::InternalInvocationProxy().ComplexTypeHierarchy::StaticMethod().ComplexTypeHierarchy::BaseInterfaceMethod2().0.runningState.0\ := WaitingForStarted;
                            \ComplexTypeHierarchy::BaseInterfaceMethod2().0.ComplexTypeHierarchy::StaticMethod()._Finished.0\ <= false;
                        end if;
                end case;


                -- Invocation handler #0 out of 1 corresponding to System.Void Hast.TestInputs.ClassStructure1.ComplexTypes.ComplexTypeHierarchy::PrivateMethod().0
                case \Hast::InternalInvocationProxy().ComplexTypeHierarchy::StaticMethod().ComplexTypeHierarchy::PrivateMethod().0.runningState.0\ is 
                    when WaitingForStarted => 
                        if (\ComplexTypeHierarchy::PrivateMethod().0.ComplexTypeHierarchy::StaticMethod()._Started.0\) then 
                            \ComplexTypeHierarchy::PrivateMethod().0.ComplexTypeHierarchy::StaticMethod()._Finished.0\ <= false;
                            \Hast::InternalInvocationProxy().ComplexTypeHierarchy::StaticMethod().ComplexTypeHierarchy::PrivateMethod().0.runningState.0\ := WaitingForFinished;
                            \Hast::InternalInvocationProxy().ComplexTypeHierarchy::StaticMethod().ComplexTypeHierarchy::PrivateMethod().0.runningIndex.0\ := 0;
                            \ComplexTypeHierarchy::StaticMethod().0._Started\ <= true;
                        end if;
                    when WaitingForFinished => 
                        case \Hast::InternalInvocationProxy().ComplexTypeHierarchy::StaticMethod().ComplexTypeHierarchy::PrivateMethod().0.runningIndex.0\ is 
                            when 0 => 
                                if (\ComplexTypeHierarchy::StaticMethod().0._Finished\) then 
                                    \Hast::InternalInvocationProxy().ComplexTypeHierarchy::StaticMethod().ComplexTypeHierarchy::PrivateMethod().0.runningState.0\ := AfterFinished;
                                    \ComplexTypeHierarchy::PrivateMethod().0.ComplexTypeHierarchy::StaticMethod()._Finished.0\ <= true;
                                    \ComplexTypeHierarchy::StaticMethod().0._Started\ <= false;
                                end if;
                        end case;
                    when AfterFinished => 
                        -- Invoking components need to pull down the Started signal to false.
                        if (\ComplexTypeHierarchy::PrivateMethod().0.ComplexTypeHierarchy::StaticMethod()._Started.0\ = false) then 
                            \Hast::InternalInvocationProxy().ComplexTypeHierarchy::StaticMethod().ComplexTypeHierarchy::PrivateMethod().0.runningState.0\ := WaitingForStarted;
                            \ComplexTypeHierarchy::PrivateMethod().0.ComplexTypeHierarchy::StaticMethod()._Finished.0\ <= false;
                        end if;
                end case;

            end if;
        end if;
    end process;
    -- System.Void Hast::InternalInvocationProxy().System.Void Hast.TestInputs.ClassStructure1.ComplexTypes.ComplexTypeHierarchy::StaticMethod() end


    -- System.Void Hast::InternalInvocationProxy().System.Void Hast.TestInputs.ClassStructure1.ComplexTypes.ComplexTypeHierarchy::BaseInterfaceMethod2() start
    \Hast::InternalInvocationProxy().ComplexTypeHierarchy::BaseInterfaceMethod2()\: process (\Clock\) 
        Variable \Hast::InternalInvocationProxy().ComplexTypeHierarchy::BaseInterfaceMethod2().ComplexTypeHierarchy::Interface2Method1().0.runningIndex.0\: integer range 0 to 0 := 0;
        Variable \Hast::InternalInvocationProxy().ComplexTypeHierarchy::BaseInterfaceMethod2().ComplexTypeHierarchy::Interface2Method1().0.runningState.0\: \Hast::InternalInvocationProxy()._RunningStates\ := WaitingForStarted;
        Variable \Hast::InternalInvocationProxy().ComplexTypeHierarchy::BaseInterfaceMethod2().Hast::ExternalInvocationProxy().runningIndex.0\: integer range 0 to 0 := 0;
        Variable \Hast::InternalInvocationProxy().ComplexTypeHierarchy::BaseInterfaceMethod2().Hast::ExternalInvocationProxy().runningState.0\: \Hast::InternalInvocationProxy()._RunningStates\ := WaitingForStarted;
    begin 
        if (rising_edge(\Clock\)) then 
            if (\Reset\ = '1') then 
                -- Synchronous reset
                \Hast::InternalInvocationProxy().ComplexTypeHierarchy::BaseInterfaceMethod2().ComplexTypeHierarchy::Interface2Method1().0.runningIndex.0\ := 0;
                \Hast::InternalInvocationProxy().ComplexTypeHierarchy::BaseInterfaceMethod2().ComplexTypeHierarchy::Interface2Method1().0.runningState.0\ := WaitingForStarted;
                \Hast::InternalInvocationProxy().ComplexTypeHierarchy::BaseInterfaceMethod2().Hast::ExternalInvocationProxy().runningIndex.0\ := 0;
                \Hast::InternalInvocationProxy().ComplexTypeHierarchy::BaseInterfaceMethod2().Hast::ExternalInvocationProxy().runningState.0\ := WaitingForStarted;
                \ComplexTypeHierarchy::Interface2Method1().0.ComplexTypeHierarchy::BaseInterfaceMethod2()._Finished.0\ <= false;
                \Hast::ExternalInvocationProxy().ComplexTypeHierarchy::BaseInterfaceMethod2()._Finished.0\ <= false;
            else 

                -- Invocation handler #0 out of 1 corresponding to System.Void Hast.TestInputs.ClassStructure1.ComplexTypes.ComplexTypeHierarchy::Interface2Method1().0
                case \Hast::InternalInvocationProxy().ComplexTypeHierarchy::BaseInterfaceMethod2().ComplexTypeHierarchy::Interface2Method1().0.runningState.0\ is 
                    when WaitingForStarted => 
                        if (\ComplexTypeHierarchy::Interface2Method1().0.ComplexTypeHierarchy::BaseInterfaceMethod2()._Started.0\) then 
                            \ComplexTypeHierarchy::Interface2Method1().0.ComplexTypeHierarchy::BaseInterfaceMethod2()._Finished.0\ <= false;
                            \Hast::InternalInvocationProxy().ComplexTypeHierarchy::BaseInterfaceMethod2().ComplexTypeHierarchy::Interface2Method1().0.runningState.0\ := WaitingForFinished;
                            \Hast::InternalInvocationProxy().ComplexTypeHierarchy::BaseInterfaceMethod2().ComplexTypeHierarchy::Interface2Method1().0.runningIndex.0\ := 0;
                            \ComplexTypeHierarchy::BaseInterfaceMethod2().0._Started\ <= true;
                        end if;
                    when WaitingForFinished => 
                        case \Hast::InternalInvocationProxy().ComplexTypeHierarchy::BaseInterfaceMethod2().ComplexTypeHierarchy::Interface2Method1().0.runningIndex.0\ is 
                            when 0 => 
                                if (\ComplexTypeHierarchy::BaseInterfaceMethod2().0._Finished\) then 
                                    \Hast::InternalInvocationProxy().ComplexTypeHierarchy::BaseInterfaceMethod2().ComplexTypeHierarchy::Interface2Method1().0.runningState.0\ := AfterFinished;
                                    \ComplexTypeHierarchy::Interface2Method1().0.ComplexTypeHierarchy::BaseInterfaceMethod2()._Finished.0\ <= true;
                                    \ComplexTypeHierarchy::BaseInterfaceMethod2().0._Started\ <= false;
                                end if;
                        end case;
                    when AfterFinished => 
                        -- Invoking components need to pull down the Started signal to false.
                        if (\ComplexTypeHierarchy::Interface2Method1().0.ComplexTypeHierarchy::BaseInterfaceMethod2()._Started.0\ = false) then 
                            \Hast::InternalInvocationProxy().ComplexTypeHierarchy::BaseInterfaceMethod2().ComplexTypeHierarchy::Interface2Method1().0.runningState.0\ := WaitingForStarted;
                            \ComplexTypeHierarchy::Interface2Method1().0.ComplexTypeHierarchy::BaseInterfaceMethod2()._Finished.0\ <= false;
                        end if;
                end case;


                -- Invocation handler #0 out of 1 corresponding to System.Void Hast::ExternalInvocationProxy()
                case \Hast::InternalInvocationProxy().ComplexTypeHierarchy::BaseInterfaceMethod2().Hast::ExternalInvocationProxy().runningState.0\ is 
                    when WaitingForStarted => 
                        if (\Hast::ExternalInvocationProxy().ComplexTypeHierarchy::BaseInterfaceMethod2()._Started.0\) then 
                            \Hast::ExternalInvocationProxy().ComplexTypeHierarchy::BaseInterfaceMethod2()._Finished.0\ <= false;
                            \Hast::InternalInvocationProxy().ComplexTypeHierarchy::BaseInterfaceMethod2().Hast::ExternalInvocationProxy().runningState.0\ := WaitingForFinished;
                            \Hast::InternalInvocationProxy().ComplexTypeHierarchy::BaseInterfaceMethod2().Hast::ExternalInvocationProxy().runningIndex.0\ := 0;
                            \ComplexTypeHierarchy::BaseInterfaceMethod2().0._Started\ <= true;
                        end if;
                    when WaitingForFinished => 
                        case \Hast::InternalInvocationProxy().ComplexTypeHierarchy::BaseInterfaceMethod2().Hast::ExternalInvocationProxy().runningIndex.0\ is 
                            when 0 => 
                                if (\ComplexTypeHierarchy::BaseInterfaceMethod2().0._Finished\) then 
                                    \Hast::InternalInvocationProxy().ComplexTypeHierarchy::BaseInterfaceMethod2().Hast::ExternalInvocationProxy().runningState.0\ := AfterFinished;
                                    \Hast::ExternalInvocationProxy().ComplexTypeHierarchy::BaseInterfaceMethod2()._Finished.0\ <= true;
                                    \ComplexTypeHierarchy::BaseInterfaceMethod2().0._Started\ <= false;
                                end if;
                        end case;
                    when AfterFinished => 
                        -- Invoking components need to pull down the Started signal to false.
                        if (\Hast::ExternalInvocationProxy().ComplexTypeHierarchy::BaseInterfaceMethod2()._Started.0\ = false) then 
                            \Hast::InternalInvocationProxy().ComplexTypeHierarchy::BaseInterfaceMethod2().Hast::ExternalInvocationProxy().runningState.0\ := WaitingForStarted;
                            \Hast::ExternalInvocationProxy().ComplexTypeHierarchy::BaseInterfaceMethod2()._Finished.0\ <= false;
                        end if;
                end case;

            end if;
        end if;
    end process;
    -- System.Void Hast::InternalInvocationProxy().System.Void Hast.TestInputs.ClassStructure1.ComplexTypes.ComplexTypeHierarchy::BaseInterfaceMethod2() end


    -- System.Void Hast::InternalInvocationProxy().System.Void Hast.TestInputs.ClassStructure1.ComplexTypes.StaticClass::StaticMethod() start
    \Hast::InternalInvocationProxy().StaticClass::StaticMethod()\: process (\Clock\) 
        Variable \Hast::InternalInvocationProxy().StaticClass::StaticMethod().StaticReference::StaticClassUsingMethod().0.runningIndex.0\: integer range 0 to 0 := 0;
        Variable \Hast::InternalInvocationProxy().StaticClass::StaticMethod().StaticReference::StaticClassUsingMethod().0.runningState.0\: \Hast::InternalInvocationProxy()._RunningStates\ := WaitingForStarted;
        Variable \Hast::InternalInvocationProxy().StaticClass::StaticMethod().Hast::ExternalInvocationProxy().runningIndex.0\: integer range 0 to 0 := 0;
        Variable \Hast::InternalInvocationProxy().StaticClass::StaticMethod().Hast::ExternalInvocationProxy().runningState.0\: \Hast::InternalInvocationProxy()._RunningStates\ := WaitingForStarted;
    begin 
        if (rising_edge(\Clock\)) then 
            if (\Reset\ = '1') then 
                -- Synchronous reset
                \Hast::InternalInvocationProxy().StaticClass::StaticMethod().StaticReference::StaticClassUsingMethod().0.runningIndex.0\ := 0;
                \Hast::InternalInvocationProxy().StaticClass::StaticMethod().StaticReference::StaticClassUsingMethod().0.runningState.0\ := WaitingForStarted;
                \Hast::InternalInvocationProxy().StaticClass::StaticMethod().Hast::ExternalInvocationProxy().runningIndex.0\ := 0;
                \Hast::InternalInvocationProxy().StaticClass::StaticMethod().Hast::ExternalInvocationProxy().runningState.0\ := WaitingForStarted;
                \StaticReference::StaticClassUsingMethod().0.StaticClass::StaticMethod()._Finished.0\ <= false;
                \Hast::ExternalInvocationProxy().StaticClass::StaticMethod()._Finished.0\ <= false;
            else 

                -- Invocation handler #0 out of 1 corresponding to System.Void Hast.TestInputs.ClassStructure2.StaticReference::StaticClassUsingMethod().0
                case \Hast::InternalInvocationProxy().StaticClass::StaticMethod().StaticReference::StaticClassUsingMethod().0.runningState.0\ is 
                    when WaitingForStarted => 
                        if (\StaticReference::StaticClassUsingMethod().0.StaticClass::StaticMethod()._Started.0\) then 
                            \StaticReference::StaticClassUsingMethod().0.StaticClass::StaticMethod()._Finished.0\ <= false;
                            \Hast::InternalInvocationProxy().StaticClass::StaticMethod().StaticReference::StaticClassUsingMethod().0.runningState.0\ := WaitingForFinished;
                            \Hast::InternalInvocationProxy().StaticClass::StaticMethod().StaticReference::StaticClassUsingMethod().0.runningIndex.0\ := 0;
                            \StaticClass::StaticMethod().0._Started\ <= true;
                        end if;
                    when WaitingForFinished => 
                        case \Hast::InternalInvocationProxy().StaticClass::StaticMethod().StaticReference::StaticClassUsingMethod().0.runningIndex.0\ is 
                            when 0 => 
                                if (\StaticClass::StaticMethod().0._Finished\) then 
                                    \Hast::InternalInvocationProxy().StaticClass::StaticMethod().StaticReference::StaticClassUsingMethod().0.runningState.0\ := AfterFinished;
                                    \StaticReference::StaticClassUsingMethod().0.StaticClass::StaticMethod()._Finished.0\ <= true;
                                    \StaticClass::StaticMethod().0._Started\ <= false;
                                end if;
                        end case;
                    when AfterFinished => 
                        -- Invoking components need to pull down the Started signal to false.
                        if (\StaticReference::StaticClassUsingMethod().0.StaticClass::StaticMethod()._Started.0\ = false) then 
                            \Hast::InternalInvocationProxy().StaticClass::StaticMethod().StaticReference::StaticClassUsingMethod().0.runningState.0\ := WaitingForStarted;
                            \StaticReference::StaticClassUsingMethod().0.StaticClass::StaticMethod()._Finished.0\ <= false;
                        end if;
                end case;


                -- Invocation handler #0 out of 1 corresponding to System.Void Hast::ExternalInvocationProxy()
                case \Hast::InternalInvocationProxy().StaticClass::StaticMethod().Hast::ExternalInvocationProxy().runningState.0\ is 
                    when WaitingForStarted => 
                        if (\Hast::ExternalInvocationProxy().StaticClass::StaticMethod()._Started.0\) then 
                            \Hast::ExternalInvocationProxy().StaticClass::StaticMethod()._Finished.0\ <= false;
                            \Hast::InternalInvocationProxy().StaticClass::StaticMethod().Hast::ExternalInvocationProxy().runningState.0\ := WaitingForFinished;
                            \Hast::InternalInvocationProxy().StaticClass::StaticMethod().Hast::ExternalInvocationProxy().runningIndex.0\ := 0;
                            \StaticClass::StaticMethod().0._Started\ <= true;
                        end if;
                    when WaitingForFinished => 
                        case \Hast::InternalInvocationProxy().StaticClass::StaticMethod().Hast::ExternalInvocationProxy().runningIndex.0\ is 
                            when 0 => 
                                if (\StaticClass::StaticMethod().0._Finished\) then 
                                    \Hast::InternalInvocationProxy().StaticClass::StaticMethod().Hast::ExternalInvocationProxy().runningState.0\ := AfterFinished;
                                    \Hast::ExternalInvocationProxy().StaticClass::StaticMethod()._Finished.0\ <= true;
                                    \StaticClass::StaticMethod().0._Started\ <= false;
                                end if;
                        end case;
                    when AfterFinished => 
                        -- Invoking components need to pull down the Started signal to false.
                        if (\Hast::ExternalInvocationProxy().StaticClass::StaticMethod()._Started.0\ = false) then 
                            \Hast::InternalInvocationProxy().StaticClass::StaticMethod().Hast::ExternalInvocationProxy().runningState.0\ := WaitingForStarted;
                            \Hast::ExternalInvocationProxy().StaticClass::StaticMethod()._Finished.0\ <= false;
                        end if;
                end case;

            end if;
        end if;
    end process;
    -- System.Void Hast::InternalInvocationProxy().System.Void Hast.TestInputs.ClassStructure1.ComplexTypes.StaticClass::StaticMethod() end


    -- System.Void Hast::InternalInvocationProxy().System.Void Hast.TestInputs.Various.ArrayUsingCases+ArrayHolder::.ctor(System.Int32[]) start
    -- Signal connections for System.Void Hast.TestInputs.Various.ArrayUsingCases::PassArrayToConstructor().0 (#0):
    \ArrayUsingCases+ArrayHolder::.ctor(Int32[]).0._Started\ <= \ArrayUsingCases::PassArrayToConstructor().0.ArrayUsingCases+ArrayHolder::.ctor(Int32[])._Started.0\;
    \ArrayUsingCases+ArrayHolder::.ctor(Int32[]).0.this.parameter.In\ <= \ArrayUsingCases::PassArrayToConstructor().0.ArrayUsingCases+ArrayHolder::.ctor(Int32[]).this.parameter.Out.0\;
    \ArrayUsingCases+ArrayHolder::.ctor(Int32[]).0.array.parameter.In\ <= \ArrayUsingCases::PassArrayToConstructor().0.ArrayUsingCases+ArrayHolder::.ctor(Int32[]).array.parameter.Out.0\;
    \ArrayUsingCases::PassArrayToConstructor().0.ArrayUsingCases+ArrayHolder::.ctor(Int32[])._Finished.0\ <= \ArrayUsingCases+ArrayHolder::.ctor(Int32[]).0._Finished\;
    \ArrayUsingCases::PassArrayToConstructor().0.ArrayUsingCases+ArrayHolder::.ctor(Int32[]).this.parameter.In.0\ <= \ArrayUsingCases+ArrayHolder::.ctor(Int32[]).0.this.parameter.Out\;
    \ArrayUsingCases::PassArrayToConstructor().0.ArrayUsingCases+ArrayHolder::.ctor(Int32[]).array.parameter.In.0\ <= \ArrayUsingCases+ArrayHolder::.ctor(Int32[]).0.array.parameter.Out\;
    -- System.Void Hast::InternalInvocationProxy().System.Void Hast.TestInputs.Various.ArrayUsingCases+ArrayHolder::.ctor(System.Int32[]) end


    -- System.Void Hast::InternalInvocationProxy().System.Int32[] Hast.TestInputs.Various.ArrayUsingCases::ArrayProducingMethod(System.Int32) start
    -- Signal connections for System.Void Hast.TestInputs.Various.ArrayUsingCases::PassArrayFromMethod().0 (#0):
    \ArrayUsingCases::ArrayProducingMethod(Int32).0._Started\ <= \ArrayUsingCases::PassArrayFromMethod().0.ArrayUsingCases::ArrayProducingMethod(Int32)._Started.0\;
    \ArrayUsingCases::ArrayProducingMethod(Int32).0.arrayLength.parameter.In\ <= \ArrayUsingCases::PassArrayFromMethod().0.ArrayUsingCases::ArrayProducingMethod(Int32).arrayLength.parameter.Out.0\;
    \ArrayUsingCases::PassArrayFromMethod().0.ArrayUsingCases::ArrayProducingMethod(Int32)._Finished.0\ <= \ArrayUsingCases::ArrayProducingMethod(Int32).0._Finished\;
    \ArrayUsingCases::PassArrayFromMethod().0.ArrayUsingCases::ArrayProducingMethod(Int32).return.0\ <= \ArrayUsingCases::ArrayProducingMethod(Int32).0.return\;
    -- System.Void Hast::InternalInvocationProxy().System.Int32[] Hast.TestInputs.Various.ArrayUsingCases::ArrayProducingMethod(System.Int32) end


    -- System.Void Hast::InternalInvocationProxy().System.Void Hast.TestInputs.Various.ConstantsUsingCases+ArrayHolder1::.ctor(System.UInt32[]) start
    \Hast::InternalInvocationProxy().ConstantsUsingCases+ArrayHolder1::.ctor(UInt32[])\: process (\Clock\) 
        Variable \Hast::InternalInvocationProxy().ConstantsUsingCases+ArrayHolder1::.ctor(UInt32[]).ConstantsUsingCases+ArrayHolder1::.ctor(ConstantsUsingCases+ArrayHolder1).0.runningIndex.0\: integer range 0 to 0 := 0;
        Variable \Hast::InternalInvocationProxy().ConstantsUsingCases+ArrayHolder1::.ctor(UInt32[]).ConstantsUsingCases+ArrayHolder1::.ctor(ConstantsUsingCases+ArrayHolder1).0.runningState.0\: \Hast::InternalInvocationProxy()._RunningStates\ := WaitingForStarted;
        Variable \Hast::InternalInvocationProxy().ConstantsUsingCases+ArrayHolder1::.ctor(UInt32[]).ConstantsUsingCases::ConstantPassingToObject().0.runningIndex.0\: integer range 0 to 0 := 0;
        Variable \Hast::InternalInvocationProxy().ConstantsUsingCases+ArrayHolder1::.ctor(UInt32[]).ConstantsUsingCases::ConstantPassingToObject().0.runningState.0\: \Hast::InternalInvocationProxy()._RunningStates\ := WaitingForStarted;
    begin 
        if (rising_edge(\Clock\)) then 
            if (\Reset\ = '1') then 
                -- Synchronous reset
                \Hast::InternalInvocationProxy().ConstantsUsingCases+ArrayHolder1::.ctor(UInt32[]).ConstantsUsingCases+ArrayHolder1::.ctor(ConstantsUsingCases+ArrayHolder1).0.runningIndex.0\ := 0;
                \Hast::InternalInvocationProxy().ConstantsUsingCases+ArrayHolder1::.ctor(UInt32[]).ConstantsUsingCases+ArrayHolder1::.ctor(ConstantsUsingCases+ArrayHolder1).0.runningState.0\ := WaitingForStarted;
                \Hast::InternalInvocationProxy().ConstantsUsingCases+ArrayHolder1::.ctor(UInt32[]).ConstantsUsingCases::ConstantPassingToObject().0.runningIndex.0\ := 0;
                \Hast::InternalInvocationProxy().ConstantsUsingCases+ArrayHolder1::.ctor(UInt32[]).ConstantsUsingCases::ConstantPassingToObject().0.runningState.0\ := WaitingForStarted;
                \ConstantsUsingCases+ArrayHolder1::.ctor(ConstantsUsingCases+ArrayHolder1).0.ConstantsUsingCases+ArrayHolder1::.ctor(UInt32[])._Finished.0\ <= false;
                \ConstantsUsingCases::ConstantPassingToObject().0.ConstantsUsingCases+ArrayHolder1::.ctor(UInt32[])._Finished.0\ <= false;
            else 

                -- Invocation handler #0 out of 1 corresponding to System.Void Hast.TestInputs.Various.ConstantsUsingCases+ArrayHolder1::.ctor(Hast.TestInputs.Various.ConstantsUsingCases+ArrayHolder1).0
                case \Hast::InternalInvocationProxy().ConstantsUsingCases+ArrayHolder1::.ctor(UInt32[]).ConstantsUsingCases+ArrayHolder1::.ctor(ConstantsUsingCases+ArrayHolder1).0.runningState.0\ is 
                    when WaitingForStarted => 
                        if (\ConstantsUsingCases+ArrayHolder1::.ctor(ConstantsUsingCases+ArrayHolder1).0.ConstantsUsingCases+ArrayHolder1::.ctor(UInt32[])._Started.0\) then 
                            \ConstantsUsingCases+ArrayHolder1::.ctor(ConstantsUsingCases+ArrayHolder1).0.ConstantsUsingCases+ArrayHolder1::.ctor(UInt32[])._Finished.0\ <= false;
                            \Hast::InternalInvocationProxy().ConstantsUsingCases+ArrayHolder1::.ctor(UInt32[]).ConstantsUsingCases+ArrayHolder1::.ctor(ConstantsUsingCases+ArrayHolder1).0.runningState.0\ := WaitingForFinished;
                            \Hast::InternalInvocationProxy().ConstantsUsingCases+ArrayHolder1::.ctor(UInt32[]).ConstantsUsingCases+ArrayHolder1::.ctor(ConstantsUsingCases+ArrayHolder1).0.runningIndex.0\ := 0;
                            \ConstantsUsingCases+ArrayHolder1::.ctor(UInt32[]).0._Started\ <= true;
                            \ConstantsUsingCases+ArrayHolder1::.ctor(UInt32[]).0.this.parameter.In\ <= \ConstantsUsingCases+ArrayHolder1::.ctor(ConstantsUsingCases+ArrayHolder1).0.ConstantsUsingCases+ArrayHolder1::.ctor(UInt32[]).this.parameter.Out.0\;
                            \ConstantsUsingCases+ArrayHolder1::.ctor(UInt32[]).0.array.parameter.In\ <= \ConstantsUsingCases+ArrayHolder1::.ctor(ConstantsUsingCases+ArrayHolder1).0.ConstantsUsingCases+ArrayHolder1::.ctor(UInt32[]).array.parameter.Out.0\;
                        end if;
                    when WaitingForFinished => 
                        case \Hast::InternalInvocationProxy().ConstantsUsingCases+ArrayHolder1::.ctor(UInt32[]).ConstantsUsingCases+ArrayHolder1::.ctor(ConstantsUsingCases+ArrayHolder1).0.runningIndex.0\ is 
                            when 0 => 
                                if (\ConstantsUsingCases+ArrayHolder1::.ctor(UInt32[]).0._Finished\) then 
                                    \Hast::InternalInvocationProxy().ConstantsUsingCases+ArrayHolder1::.ctor(UInt32[]).ConstantsUsingCases+ArrayHolder1::.ctor(ConstantsUsingCases+ArrayHolder1).0.runningState.0\ := AfterFinished;
                                    \ConstantsUsingCases+ArrayHolder1::.ctor(ConstantsUsingCases+ArrayHolder1).0.ConstantsUsingCases+ArrayHolder1::.ctor(UInt32[])._Finished.0\ <= true;
                                    \ConstantsUsingCases+ArrayHolder1::.ctor(UInt32[]).0._Started\ <= false;
                                    \ConstantsUsingCases+ArrayHolder1::.ctor(ConstantsUsingCases+ArrayHolder1).0.ConstantsUsingCases+ArrayHolder1::.ctor(UInt32[]).this.parameter.In.0\ <= \ConstantsUsingCases+ArrayHolder1::.ctor(UInt32[]).0.this.parameter.Out\;
                                    \ConstantsUsingCases+ArrayHolder1::.ctor(ConstantsUsingCases+ArrayHolder1).0.ConstantsUsingCases+ArrayHolder1::.ctor(UInt32[]).array.parameter.In.0\ <= \ConstantsUsingCases+ArrayHolder1::.ctor(UInt32[]).0.array.parameter.Out\;
                                end if;
                        end case;
                    when AfterFinished => 
                        -- Invoking components need to pull down the Started signal to false.
                        if (\ConstantsUsingCases+ArrayHolder1::.ctor(ConstantsUsingCases+ArrayHolder1).0.ConstantsUsingCases+ArrayHolder1::.ctor(UInt32[])._Started.0\ = false) then 
                            \Hast::InternalInvocationProxy().ConstantsUsingCases+ArrayHolder1::.ctor(UInt32[]).ConstantsUsingCases+ArrayHolder1::.ctor(ConstantsUsingCases+ArrayHolder1).0.runningState.0\ := WaitingForStarted;
                            \ConstantsUsingCases+ArrayHolder1::.ctor(ConstantsUsingCases+ArrayHolder1).0.ConstantsUsingCases+ArrayHolder1::.ctor(UInt32[])._Finished.0\ <= false;
                        end if;
                end case;


                -- Invocation handler #0 out of 1 corresponding to System.Void Hast.TestInputs.Various.ConstantsUsingCases::ConstantPassingToObject().0
                case \Hast::InternalInvocationProxy().ConstantsUsingCases+ArrayHolder1::.ctor(UInt32[]).ConstantsUsingCases::ConstantPassingToObject().0.runningState.0\ is 
                    when WaitingForStarted => 
                        if (\ConstantsUsingCases::ConstantPassingToObject().0.ConstantsUsingCases+ArrayHolder1::.ctor(UInt32[])._Started.0\) then 
                            \ConstantsUsingCases::ConstantPassingToObject().0.ConstantsUsingCases+ArrayHolder1::.ctor(UInt32[])._Finished.0\ <= false;
                            \Hast::InternalInvocationProxy().ConstantsUsingCases+ArrayHolder1::.ctor(UInt32[]).ConstantsUsingCases::ConstantPassingToObject().0.runningState.0\ := WaitingForFinished;
                            \Hast::InternalInvocationProxy().ConstantsUsingCases+ArrayHolder1::.ctor(UInt32[]).ConstantsUsingCases::ConstantPassingToObject().0.runningIndex.0\ := 0;
                            \ConstantsUsingCases+ArrayHolder1::.ctor(UInt32[]).0._Started\ <= true;
                            \ConstantsUsingCases+ArrayHolder1::.ctor(UInt32[]).0.this.parameter.In\ <= \ConstantsUsingCases::ConstantPassingToObject().0.ConstantsUsingCases+ArrayHolder1::.ctor(UInt32[]).this.parameter.Out.0\;
                            \ConstantsUsingCases+ArrayHolder1::.ctor(UInt32[]).0.array.parameter.In\ <= \ConstantsUsingCases::ConstantPassingToObject().0.ConstantsUsingCases+ArrayHolder1::.ctor(UInt32[]).array.parameter.Out.0\;
                        end if;
                    when WaitingForFinished => 
                        case \Hast::InternalInvocationProxy().ConstantsUsingCases+ArrayHolder1::.ctor(UInt32[]).ConstantsUsingCases::ConstantPassingToObject().0.runningIndex.0\ is 
                            when 0 => 
                                if (\ConstantsUsingCases+ArrayHolder1::.ctor(UInt32[]).0._Finished\) then 
                                    \Hast::InternalInvocationProxy().ConstantsUsingCases+ArrayHolder1::.ctor(UInt32[]).ConstantsUsingCases::ConstantPassingToObject().0.runningState.0\ := AfterFinished;
                                    \ConstantsUsingCases::ConstantPassingToObject().0.ConstantsUsingCases+ArrayHolder1::.ctor(UInt32[])._Finished.0\ <= true;
                                    \ConstantsUsingCases+ArrayHolder1::.ctor(UInt32[]).0._Started\ <= false;
                                    \ConstantsUsingCases::ConstantPassingToObject().0.ConstantsUsingCases+ArrayHolder1::.ctor(UInt32[]).this.parameter.In.0\ <= \ConstantsUsingCases+ArrayHolder1::.ctor(UInt32[]).0.this.parameter.Out\;
                                    \ConstantsUsingCases::ConstantPassingToObject().0.ConstantsUsingCases+ArrayHolder1::.ctor(UInt32[]).array.parameter.In.0\ <= \ConstantsUsingCases+ArrayHolder1::.ctor(UInt32[]).0.array.parameter.Out\;
                                end if;
                        end case;
                    when AfterFinished => 
                        -- Invoking components need to pull down the Started signal to false.
                        if (\ConstantsUsingCases::ConstantPassingToObject().0.ConstantsUsingCases+ArrayHolder1::.ctor(UInt32[])._Started.0\ = false) then 
                            \Hast::InternalInvocationProxy().ConstantsUsingCases+ArrayHolder1::.ctor(UInt32[]).ConstantsUsingCases::ConstantPassingToObject().0.runningState.0\ := WaitingForStarted;
                            \ConstantsUsingCases::ConstantPassingToObject().0.ConstantsUsingCases+ArrayHolder1::.ctor(UInt32[])._Finished.0\ <= false;
                        end if;
                end case;

            end if;
        end if;
    end process;
    -- System.Void Hast::InternalInvocationProxy().System.Void Hast.TestInputs.Various.ConstantsUsingCases+ArrayHolder1::.ctor(System.UInt32[]) end


    -- System.Void Hast::InternalInvocationProxy().System.Int32 Hast.TestInputs.Various.ConstantsUsingCases::ConstantUsingMethod(System.Int32,System.Int32) start
    -- Signal connections for System.Void Hast.TestInputs.Various.ConstantsUsingCases::ConstantPassingToMethod(System.Int32).0 (#0):
    \ConstantsUsingCases::ConstantUsingMethod(Int32,Int32).0._Started\ <= \ConstantsUsingCases::ConstantPassingToMethod(Int32).0.ConstantsUsingCases::ConstantUsingMethod(Int32,Int32)._Started.0\;
    \ConstantsUsingCases::ConstantUsingMethod(Int32,Int32).0.input1.parameter.In\ <= \ConstantsUsingCases::ConstantPassingToMethod(Int32).0.ConstantsUsingCases::ConstantUsingMethod(Int32,Int32).input1.parameter.Out.0\;
    \ConstantsUsingCases::ConstantUsingMethod(Int32,Int32).0.input2.parameter.In\ <= \ConstantsUsingCases::ConstantPassingToMethod(Int32).0.ConstantsUsingCases::ConstantUsingMethod(Int32,Int32).input2.parameter.Out.0\;
    \ConstantsUsingCases::ConstantPassingToMethod(Int32).0.ConstantsUsingCases::ConstantUsingMethod(Int32,Int32)._Finished.0\ <= \ConstantsUsingCases::ConstantUsingMethod(Int32,Int32).0._Finished\;
    \ConstantsUsingCases::ConstantPassingToMethod(Int32).0.ConstantsUsingCases::ConstantUsingMethod(Int32,Int32).return.0\ <= \ConstantsUsingCases::ConstantUsingMethod(Int32,Int32).0.return\;
    -- System.Void Hast::InternalInvocationProxy().System.Int32 Hast.TestInputs.Various.ConstantsUsingCases::ConstantUsingMethod(System.Int32,System.Int32) end


    -- System.Void Hast::InternalInvocationProxy().System.Void Hast.TestInputs.Various.ConstantsUsingCases+ArrayHolder1::.ctor(System.UInt32) start
    -- Signal connections for System.Void Hast.TestInputs.Various.ConstantsUsingCases::ConstantPassingToObject().0 (#0):
    \ConstantsUsingCases+ArrayHolder1::.ctor(UInt32).0._Started\ <= \ConstantsUsingCases::ConstantPassingToObject().0.ConstantsUsingCases+ArrayHolder1::.ctor(UInt32)._Started.0\;
    \ConstantsUsingCases+ArrayHolder1::.ctor(UInt32).0.this.parameter.In\ <= \ConstantsUsingCases::ConstantPassingToObject().0.ConstantsUsingCases+ArrayHolder1::.ctor(UInt32).this.parameter.Out.0\;
    \ConstantsUsingCases+ArrayHolder1::.ctor(UInt32).0.size.parameter.In\ <= \ConstantsUsingCases::ConstantPassingToObject().0.ConstantsUsingCases+ArrayHolder1::.ctor(UInt32).size.parameter.Out.0\;
    \ConstantsUsingCases::ConstantPassingToObject().0.ConstantsUsingCases+ArrayHolder1::.ctor(UInt32)._Finished.0\ <= \ConstantsUsingCases+ArrayHolder1::.ctor(UInt32).0._Finished\;
    \ConstantsUsingCases::ConstantPassingToObject().0.ConstantsUsingCases+ArrayHolder1::.ctor(UInt32).this.parameter.In.0\ <= \ConstantsUsingCases+ArrayHolder1::.ctor(UInt32).0.this.parameter.Out\;
    -- System.Void Hast::InternalInvocationProxy().System.Void Hast.TestInputs.Various.ConstantsUsingCases+ArrayHolder1::.ctor(System.UInt32) end


    -- System.Void Hast::InternalInvocationProxy().System.Void Hast.TestInputs.Various.ConstantsUsingCases+ArrayHolder1::.ctor(Hast.TestInputs.Various.ConstantsUsingCases+ArrayHolder1) start
    -- Signal connections for System.Void Hast.TestInputs.Various.ConstantsUsingCases::ConstantPassingToObject().0 (#0):
    \ConstantsUsingCases+ArrayHolder1::.ctor(ConstantsUsingCases+ArrayHolder1).0._Started\ <= \ConstantsUsingCases::ConstantPassingToObject().0.ConstantsUsingCases+ArrayHolder1::.ctor(ConstantsUsingCases+ArrayHolder1)._Started.0\;
    \ConstantsUsingCases+ArrayHolder1::.ctor(ConstantsUsingCases+ArrayHolder1).0.this.parameter.In\ <= \ConstantsUsingCases::ConstantPassingToObject().0.ConstantsUsingCases+ArrayHolder1::.ctor(ConstantsUsingCases+ArrayHolder1).this.parameter.Out.0\;
    \ConstantsUsingCases+ArrayHolder1::.ctor(ConstantsUsingCases+ArrayHolder1).0.previous.parameter.In\ <= \ConstantsUsingCases::ConstantPassingToObject().0.ConstantsUsingCases+ArrayHolder1::.ctor(ConstantsUsingCases+ArrayHolder1).previous.parameter.Out.0\;
    \ConstantsUsingCases::ConstantPassingToObject().0.ConstantsUsingCases+ArrayHolder1::.ctor(ConstantsUsingCases+ArrayHolder1)._Finished.0\ <= \ConstantsUsingCases+ArrayHolder1::.ctor(ConstantsUsingCases+ArrayHolder1).0._Finished\;
    \ConstantsUsingCases::ConstantPassingToObject().0.ConstantsUsingCases+ArrayHolder1::.ctor(ConstantsUsingCases+ArrayHolder1).this.parameter.In.0\ <= \ConstantsUsingCases+ArrayHolder1::.ctor(ConstantsUsingCases+ArrayHolder1).0.this.parameter.Out\;
    \ConstantsUsingCases::ConstantPassingToObject().0.ConstantsUsingCases+ArrayHolder1::.ctor(ConstantsUsingCases+ArrayHolder1).previous.parameter.In.0\ <= \ConstantsUsingCases+ArrayHolder1::.ctor(ConstantsUsingCases+ArrayHolder1).0.previous.parameter.Out\;
    -- System.Void Hast::InternalInvocationProxy().System.Void Hast.TestInputs.Various.ConstantsUsingCases+ArrayHolder1::.ctor(Hast.TestInputs.Various.ConstantsUsingCases+ArrayHolder1) end


    -- System.Void Hast::InternalInvocationProxy().System.Void Hast.TestInputs.Various.ConstantsUsingCases+ArrayHolder2::.ctor(System.UInt32) start
    -- Signal connections for System.Void Hast.TestInputs.Various.ConstantsUsingCases::ConstantPassingToObject().0 (#0):
    \ConstantsUsingCases+ArrayHolder2::.ctor(UInt32).0._Started\ <= \ConstantsUsingCases::ConstantPassingToObject().0.ConstantsUsingCases+ArrayHolder2::.ctor(UInt32)._Started.0\;
    \ConstantsUsingCases+ArrayHolder2::.ctor(UInt32).0.this.parameter.In\ <= \ConstantsUsingCases::ConstantPassingToObject().0.ConstantsUsingCases+ArrayHolder2::.ctor(UInt32).this.parameter.Out.0\;
    \ConstantsUsingCases+ArrayHolder2::.ctor(UInt32).0.size.parameter.In\ <= \ConstantsUsingCases::ConstantPassingToObject().0.ConstantsUsingCases+ArrayHolder2::.ctor(UInt32).size.parameter.Out.0\;
    \ConstantsUsingCases::ConstantPassingToObject().0.ConstantsUsingCases+ArrayHolder2::.ctor(UInt32)._Finished.0\ <= \ConstantsUsingCases+ArrayHolder2::.ctor(UInt32).0._Finished\;
    \ConstantsUsingCases::ConstantPassingToObject().0.ConstantsUsingCases+ArrayHolder2::.ctor(UInt32).this.parameter.In.0\ <= \ConstantsUsingCases+ArrayHolder2::.ctor(UInt32).0.this.parameter.Out\;
    -- System.Void Hast::InternalInvocationProxy().System.Void Hast.TestInputs.Various.ConstantsUsingCases+ArrayHolder2::.ctor(System.UInt32) end


    -- System.Void Hast::InternalInvocationProxy().System.Void Hast.TestInputs.Various.ObjectUsingCases::VoidMethod(Hast.TestInputs.Various.ObjectUsingCases+MyClass) start
    -- Signal connections for System.Void Hast.TestInputs.Various.ObjectUsingCases::VoidReturn(System.Int32).0 (#0):
    \ObjectUsingCases::VoidMethod(ObjectUsingCases+MyClass).0._Started\ <= \ObjectUsingCases::VoidReturn(Int32).0.ObjectUsingCases::VoidMethod(ObjectUsingCases+MyClass)._Started.0\;
    \ObjectUsingCases::VoidMethod(ObjectUsingCases+MyClass).0.myClass.parameter.In\ <= \ObjectUsingCases::VoidReturn(Int32).0.ObjectUsingCases::VoidMethod(ObjectUsingCases+MyClass).myClass.parameter.Out.0\;
    \ObjectUsingCases::VoidReturn(Int32).0.ObjectUsingCases::VoidMethod(ObjectUsingCases+MyClass)._Finished.0\ <= \ObjectUsingCases::VoidMethod(ObjectUsingCases+MyClass).0._Finished\;
    \ObjectUsingCases::VoidReturn(Int32).0.ObjectUsingCases::VoidMethod(ObjectUsingCases+MyClass).myClass.parameter.In.0\ <= \ObjectUsingCases::VoidMethod(ObjectUsingCases+MyClass).0.myClass.parameter.Out\;
    -- System.Void Hast::InternalInvocationProxy().System.Void Hast.TestInputs.Various.ObjectUsingCases::VoidMethod(Hast.TestInputs.Various.ObjectUsingCases+MyClass) end


    -- System.Void Hast::InternalInvocationProxy().System.Boolean Hast.TestInputs.Various.ParallelCases+Calculator::IsEven() start
    -- Signal connections for System.Boolean Hast.TestInputs.Various.ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(System.Object).0 (#0):
    \ParallelCases+Calculator::IsEven().0._Started\ <= \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).0.ParallelCases+Calculator::IsEven()._Started.0\;
    \ParallelCases+Calculator::IsEven().0.this.parameter.In\ <= \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).0.ParallelCases+Calculator::IsEven().this.parameter.Out.0\;
    \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).0.ParallelCases+Calculator::IsEven()._Finished.0\ <= \ParallelCases+Calculator::IsEven().0._Finished\;
    \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).0.ParallelCases+Calculator::IsEven().return.0\ <= \ParallelCases+Calculator::IsEven().0.return\;
    \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).0.ParallelCases+Calculator::IsEven().this.parameter.In.0\ <= \ParallelCases+Calculator::IsEven().0.this.parameter.Out\;
    -- Signal connections for System.Boolean Hast.TestInputs.Various.ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(System.Object).1 (#1):
    \ParallelCases+Calculator::IsEven().1._Started\ <= \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).1.ParallelCases+Calculator::IsEven()._Started.0\;
    \ParallelCases+Calculator::IsEven().1.this.parameter.In\ <= \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).1.ParallelCases+Calculator::IsEven().this.parameter.Out.0\;
    \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).1.ParallelCases+Calculator::IsEven()._Finished.0\ <= \ParallelCases+Calculator::IsEven().1._Finished\;
    \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).1.ParallelCases+Calculator::IsEven().return.0\ <= \ParallelCases+Calculator::IsEven().1.return\;
    \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).1.ParallelCases+Calculator::IsEven().this.parameter.In.0\ <= \ParallelCases+Calculator::IsEven().1.this.parameter.Out\;
    -- Signal connections for System.Boolean Hast.TestInputs.Various.ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(System.Object).2 (#2):
    \ParallelCases+Calculator::IsEven().2._Started\ <= \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).2.ParallelCases+Calculator::IsEven()._Started.0\;
    \ParallelCases+Calculator::IsEven().2.this.parameter.In\ <= \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).2.ParallelCases+Calculator::IsEven().this.parameter.Out.0\;
    \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).2.ParallelCases+Calculator::IsEven()._Finished.0\ <= \ParallelCases+Calculator::IsEven().2._Finished\;
    \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).2.ParallelCases+Calculator::IsEven().return.0\ <= \ParallelCases+Calculator::IsEven().2.return\;
    \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).2.ParallelCases+Calculator::IsEven().this.parameter.In.0\ <= \ParallelCases+Calculator::IsEven().2.this.parameter.Out\;
    -- System.Void Hast::InternalInvocationProxy().System.Boolean Hast.TestInputs.Various.ParallelCases+Calculator::IsEven() end


    -- System.Void Hast::InternalInvocationProxy().System.Boolean Hast.TestInputs.Various.ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(System.Object) start
    -- Signal connections for System.Void Hast.TestInputs.Various.ParallelCases::WhenAllWhenAnyAwaitedTasks(System.UInt32).0 (#0):
    \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).0._Started\ <= \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0.ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object)._Started.0\;
    \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).0.indexObject.parameter.In\ <= \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0.ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).indexObject.parameter.Out.0\;
    \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0.ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object)._Finished.0\ <= \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).0._Finished\;
    \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0.ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).return.0\ <= \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).0.return\;
    -- Signal connections for System.Void Hast.TestInputs.Various.ParallelCases::WhenAllWhenAnyAwaitedTasks(System.UInt32).0 (#1):
    \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).1._Started\ <= \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0.ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object)._Started.1\;
    \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).1.indexObject.parameter.In\ <= \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0.ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).indexObject.parameter.Out.1\;
    \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0.ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object)._Finished.1\ <= \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).1._Finished\;
    \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0.ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).return.1\ <= \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).1.return\;
    -- Signal connections for System.Void Hast.TestInputs.Various.ParallelCases::WhenAllWhenAnyAwaitedTasks(System.UInt32).0 (#2):
    \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).2._Started\ <= \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0.ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object)._Started.2\;
    \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).2.indexObject.parameter.In\ <= \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0.ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).indexObject.parameter.Out.2\;
    \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0.ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object)._Finished.2\ <= \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).2._Finished\;
    \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0.ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).return.2\ <= \ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(Object).2.return\;
    -- System.Void Hast::InternalInvocationProxy().System.Boolean Hast.TestInputs.Various.ParallelCases+<>c__DisplayClass0_0::<WhenAllWhenAnyAwaitedTasks>b__0(System.Object) end


    -- System.Void Hast::InternalInvocationProxy().System.Boolean Hast.TestInputs.Various.ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(System.Object) start
    -- Signal connections for System.Void Hast.TestInputs.Various.ParallelCases::ObjectUsingTasks(System.UInt32).0 (#0):
    \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).0._Started\ <= \ParallelCases::ObjectUsingTasks(UInt32).0.ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object)._Started.0\;
    \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).0.indexObject.parameter.In\ <= \ParallelCases::ObjectUsingTasks(UInt32).0.ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).indexObject.parameter.Out.0\;
    \ParallelCases::ObjectUsingTasks(UInt32).0.ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object)._Finished.0\ <= \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).0._Finished\;
    \ParallelCases::ObjectUsingTasks(UInt32).0.ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).return.0\ <= \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).0.return\;
    -- Signal connections for System.Void Hast.TestInputs.Various.ParallelCases::ObjectUsingTasks(System.UInt32).0 (#1):
    \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).1._Started\ <= \ParallelCases::ObjectUsingTasks(UInt32).0.ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object)._Started.1\;
    \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).1.indexObject.parameter.In\ <= \ParallelCases::ObjectUsingTasks(UInt32).0.ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).indexObject.parameter.Out.1\;
    \ParallelCases::ObjectUsingTasks(UInt32).0.ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object)._Finished.1\ <= \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).1._Finished\;
    \ParallelCases::ObjectUsingTasks(UInt32).0.ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).return.1\ <= \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).1.return\;
    -- Signal connections for System.Void Hast.TestInputs.Various.ParallelCases::ObjectUsingTasks(System.UInt32).0 (#2):
    \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).2._Started\ <= \ParallelCases::ObjectUsingTasks(UInt32).0.ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object)._Started.2\;
    \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).2.indexObject.parameter.In\ <= \ParallelCases::ObjectUsingTasks(UInt32).0.ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).indexObject.parameter.Out.2\;
    \ParallelCases::ObjectUsingTasks(UInt32).0.ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object)._Finished.2\ <= \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).2._Finished\;
    \ParallelCases::ObjectUsingTasks(UInt32).0.ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).return.2\ <= \ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(Object).2.return\;
    -- System.Void Hast::InternalInvocationProxy().System.Boolean Hast.TestInputs.Various.ParallelCases+<>c__DisplayClass1_0::<ObjectUsingTasks>b__0(System.Object) end


    -- System.Void Hast::InternalInvocationProxy().System.Void Hast.TestInputs.ClassStructure1.RootClass::VirtualMethod(System.Int32) start
    -- Signal connections for System.Void Hast::ExternalInvocationProxy() (#0):
    \RootClass::VirtualMethod(Int32).0._Started\ <= \Hast::ExternalInvocationProxy().RootClass::VirtualMethod(Int32)._Started.0\;
    \Hast::ExternalInvocationProxy().RootClass::VirtualMethod(Int32)._Finished.0\ <= \RootClass::VirtualMethod(Int32).0._Finished\;
    -- System.Void Hast::InternalInvocationProxy().System.Void Hast.TestInputs.ClassStructure1.RootClass::VirtualMethod(System.Int32) end


    -- System.Void Hast::InternalInvocationProxy().System.Void Hast.TestInputs.ClassStructure1.ComplexTypes.ComplexTypeHierarchy::Hast.TestInputs.ClassStructure1.ComplexTypes.IInterface1.Interface1Method1() start
    -- Signal connections for System.Void Hast::ExternalInvocationProxy() (#0):
    \ComplexTypeHierarchy::Hast.TestInputs.ClassStructure1.ComplexTypes.IInterface1.Interface1Method1().0._Started\ <= \Hast::ExternalInvocationProxy().ComplexTypeHierarchy::Hast.TestInputs.ClassStructure1.ComplexTypes.IInterface1.Interface1Method1()._Started.0\;
    \Hast::ExternalInvocationProxy().ComplexTypeHierarchy::Hast.TestInputs.ClassStructure1.ComplexTypes.IInterface1.Interface1Method1()._Finished.0\ <= \ComplexTypeHierarchy::Hast.TestInputs.ClassStructure1.ComplexTypes.IInterface1.Interface1Method1().0._Finished\;
    -- System.Void Hast::InternalInvocationProxy().System.Void Hast.TestInputs.ClassStructure1.ComplexTypes.ComplexTypeHierarchy::Hast.TestInputs.ClassStructure1.ComplexTypes.IInterface1.Interface1Method1() end


    -- System.Void Hast::InternalInvocationProxy().System.Void Hast.TestInputs.ClassStructure1.ComplexTypes.ComplexTypeHierarchy::Interface1Method2() start
    -- Signal connections for System.Void Hast::ExternalInvocationProxy() (#0):
    \ComplexTypeHierarchy::Interface1Method2().0._Started\ <= \Hast::ExternalInvocationProxy().ComplexTypeHierarchy::Interface1Method2()._Started.0\;
    \Hast::ExternalInvocationProxy().ComplexTypeHierarchy::Interface1Method2()._Finished.0\ <= \ComplexTypeHierarchy::Interface1Method2().0._Finished\;
    -- System.Void Hast::InternalInvocationProxy().System.Void Hast.TestInputs.ClassStructure1.ComplexTypes.ComplexTypeHierarchy::Interface1Method2() end


    -- System.Void Hast::InternalInvocationProxy().System.Void Hast.TestInputs.ClassStructure1.ComplexTypes.ComplexTypeHierarchy::Interface2Method1() start
    -- Signal connections for System.Void Hast::ExternalInvocationProxy() (#0):
    \ComplexTypeHierarchy::Interface2Method1().0._Started\ <= \Hast::ExternalInvocationProxy().ComplexTypeHierarchy::Interface2Method1()._Started.0\;
    \Hast::ExternalInvocationProxy().ComplexTypeHierarchy::Interface2Method1()._Finished.0\ <= \ComplexTypeHierarchy::Interface2Method1().0._Finished\;
    -- System.Void Hast::InternalInvocationProxy().System.Void Hast.TestInputs.ClassStructure1.ComplexTypes.ComplexTypeHierarchy::Interface2Method1() end


    -- System.Void Hast::InternalInvocationProxy().System.Void Hast.TestInputs.ClassStructure1.ComplexTypes.ComplexTypeHierarchy::Hast.TestInputs.ClassStructure1.ComplexTypes.IBaseInterface.BaseInterfaceMethod1() start
    -- Signal connections for System.Void Hast::ExternalInvocationProxy() (#0):
    \ComplexTypeHierarchy::Hast.TestInputs.ClassStructure1.ComplexTypes.IBaseInterface.BaseInterfaceMethod1().0._Started\ <= \Hast::ExternalInvocationProxy().ComplexTypeHierarchy::Hast.TestInputs.ClassStructure1.ComplexTypes.IBaseInterface.BaseInterfaceMethod1()._Started.0\;
    \Hast::ExternalInvocationProxy().ComplexTypeHierarchy::Hast.TestInputs.ClassStructure1.ComplexTypes.IBaseInterface.BaseInterfaceMethod1()._Finished.0\ <= \ComplexTypeHierarchy::Hast.TestInputs.ClassStructure1.ComplexTypes.IBaseInterface.BaseInterfaceMethod1().0._Finished\;
    -- System.Void Hast::InternalInvocationProxy().System.Void Hast.TestInputs.ClassStructure1.ComplexTypes.ComplexTypeHierarchy::Hast.TestInputs.ClassStructure1.ComplexTypes.IBaseInterface.BaseInterfaceMethod1() end


    -- System.Void Hast::InternalInvocationProxy().System.Void Hast.TestInputs.ClassStructure1.ComplexTypes.ComplexTypeHierarchy::NonVirtualNonInterfaceMehod() start
    -- Signal connections for System.Void Hast::ExternalInvocationProxy() (#0):
    \ComplexTypeHierarchy::NonVirtualNonInterfaceMehod().0._Started\ <= \Hast::ExternalInvocationProxy().ComplexTypeHierarchy::NonVirtualNonInterfaceMehod()._Started.0\;
    \Hast::ExternalInvocationProxy().ComplexTypeHierarchy::NonVirtualNonInterfaceMehod()._Finished.0\ <= \ComplexTypeHierarchy::NonVirtualNonInterfaceMehod().0._Finished\;
    -- System.Void Hast::InternalInvocationProxy().System.Void Hast.TestInputs.ClassStructure1.ComplexTypes.ComplexTypeHierarchy::NonVirtualNonInterfaceMehod() end


    -- System.Void Hast::InternalInvocationProxy().System.Void Hast.TestInputs.ClassStructure1.ComplexTypes.UnusedDeclarations::UnusedMethod() start
    -- Signal connections for System.Void Hast::ExternalInvocationProxy() (#0):
    \UnusedDeclarations::UnusedMethod().0._Started\ <= \Hast::ExternalInvocationProxy().UnusedDeclarations::UnusedMethod()._Started.0\;
    \Hast::ExternalInvocationProxy().UnusedDeclarations::UnusedMethod()._Finished.0\ <= \UnusedDeclarations::UnusedMethod().0._Finished\;
    -- System.Void Hast::InternalInvocationProxy().System.Void Hast.TestInputs.ClassStructure1.ComplexTypes.UnusedDeclarations::UnusedMethod() end


    -- System.Void Hast::InternalInvocationProxy().System.Void Hast.TestInputs.ClassStructure2.StaticReference::StaticClassUsingMethod() start
    -- Signal connections for System.Void Hast::ExternalInvocationProxy() (#0):
    \StaticReference::StaticClassUsingMethod().0._Started\ <= \Hast::ExternalInvocationProxy().StaticReference::StaticClassUsingMethod()._Started.0\;
    \Hast::ExternalInvocationProxy().StaticReference::StaticClassUsingMethod()._Finished.0\ <= \StaticReference::StaticClassUsingMethod().0._Finished\;
    -- System.Void Hast::InternalInvocationProxy().System.Void Hast.TestInputs.ClassStructure2.StaticReference::StaticClassUsingMethod() end


    -- System.Void Hast::InternalInvocationProxy().System.Void Hast.TestInputs.Various.ArrayUsingCases::PassArrayToConstructor() start
    -- Signal connections for System.Void Hast::ExternalInvocationProxy() (#0):
    \ArrayUsingCases::PassArrayToConstructor().0._Started\ <= \Hast::ExternalInvocationProxy().ArrayUsingCases::PassArrayToConstructor()._Started.0\;
    \Hast::ExternalInvocationProxy().ArrayUsingCases::PassArrayToConstructor()._Finished.0\ <= \ArrayUsingCases::PassArrayToConstructor().0._Finished\;
    -- System.Void Hast::InternalInvocationProxy().System.Void Hast.TestInputs.Various.ArrayUsingCases::PassArrayToConstructor() end


    -- System.Void Hast::InternalInvocationProxy().System.Void Hast.TestInputs.Various.ArrayUsingCases::PassArrayFromMethod() start
    -- Signal connections for System.Void Hast::ExternalInvocationProxy() (#0):
    \ArrayUsingCases::PassArrayFromMethod().0._Started\ <= \Hast::ExternalInvocationProxy().ArrayUsingCases::PassArrayFromMethod()._Started.0\;
    \Hast::ExternalInvocationProxy().ArrayUsingCases::PassArrayFromMethod()._Finished.0\ <= \ArrayUsingCases::PassArrayFromMethod().0._Finished\;
    -- System.Void Hast::InternalInvocationProxy().System.Void Hast.TestInputs.Various.ArrayUsingCases::PassArrayFromMethod() end


    -- System.Void Hast::InternalInvocationProxy().System.Void Hast.TestInputs.Various.BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(System.Int32) start
    -- Signal connections for System.Void Hast::ExternalInvocationProxy() (#0):
    \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._Started\ <= \Hast::ExternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32)._Started.0\;
    \Hast::ExternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32)._Finished.0\ <= \BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(Int32).0._Finished\;
    -- System.Void Hast::InternalInvocationProxy().System.Void Hast.TestInputs.Various.BinaryAndUnaryOperatorExpressionCases::AllBinaryOperatorExpressionVariations(System.Int32) end


    -- System.Void Hast::InternalInvocationProxy().System.Void Hast.TestInputs.Various.BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(System.Int32) start
    -- Signal connections for System.Void Hast::ExternalInvocationProxy() (#0):
    \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(Int32).0._Started\ <= \Hast::ExternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(Int32)._Started.0\;
    \Hast::ExternalInvocationProxy().BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(Int32)._Finished.0\ <= \BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(Int32).0._Finished\;
    -- System.Void Hast::InternalInvocationProxy().System.Void Hast.TestInputs.Various.BinaryAndUnaryOperatorExpressionCases::AllUnaryOperatorExpressionVariations(System.Int32) end


    -- System.Void Hast::InternalInvocationProxy().System.Void Hast.TestInputs.Various.CastingCases::NumberCasting(System.Int16,System.Int16) start
    -- Signal connections for System.Void Hast::ExternalInvocationProxy() (#0):
    \CastingCases::NumberCasting(Int16,Int16).0._Started\ <= \Hast::ExternalInvocationProxy().CastingCases::NumberCasting(Int16,Int16)._Started.0\;
    \Hast::ExternalInvocationProxy().CastingCases::NumberCasting(Int16,Int16)._Finished.0\ <= \CastingCases::NumberCasting(Int16,Int16).0._Finished\;
    -- System.Void Hast::InternalInvocationProxy().System.Void Hast.TestInputs.Various.CastingCases::NumberCasting(System.Int16,System.Int16) end


    -- System.Void Hast::InternalInvocationProxy().System.Void Hast.TestInputs.Various.ConstantsUsingCases::ConstantValuedVariables(System.Int32) start
    -- Signal connections for System.Void Hast::ExternalInvocationProxy() (#0):
    \ConstantsUsingCases::ConstantValuedVariables(Int32).0._Started\ <= \Hast::ExternalInvocationProxy().ConstantsUsingCases::ConstantValuedVariables(Int32)._Started.0\;
    \Hast::ExternalInvocationProxy().ConstantsUsingCases::ConstantValuedVariables(Int32)._Finished.0\ <= \ConstantsUsingCases::ConstantValuedVariables(Int32).0._Finished\;
    -- System.Void Hast::InternalInvocationProxy().System.Void Hast.TestInputs.Various.ConstantsUsingCases::ConstantValuedVariables(System.Int32) end


    -- System.Void Hast::InternalInvocationProxy().System.Void Hast.TestInputs.Various.ConstantsUsingCases::ConstantPassingToMethod(System.Int32) start
    -- Signal connections for System.Void Hast::ExternalInvocationProxy() (#0):
    \ConstantsUsingCases::ConstantPassingToMethod(Int32).0._Started\ <= \Hast::ExternalInvocationProxy().ConstantsUsingCases::ConstantPassingToMethod(Int32)._Started.0\;
    \Hast::ExternalInvocationProxy().ConstantsUsingCases::ConstantPassingToMethod(Int32)._Finished.0\ <= \ConstantsUsingCases::ConstantPassingToMethod(Int32).0._Finished\;
    -- System.Void Hast::InternalInvocationProxy().System.Void Hast.TestInputs.Various.ConstantsUsingCases::ConstantPassingToMethod(System.Int32) end


    -- System.Void Hast::InternalInvocationProxy().System.Void Hast.TestInputs.Various.ConstantsUsingCases::ConstantPassingToObject() start
    -- Signal connections for System.Void Hast::ExternalInvocationProxy() (#0):
    \ConstantsUsingCases::ConstantPassingToObject().0._Started\ <= \Hast::ExternalInvocationProxy().ConstantsUsingCases::ConstantPassingToObject()._Started.0\;
    \Hast::ExternalInvocationProxy().ConstantsUsingCases::ConstantPassingToObject()._Finished.0\ <= \ConstantsUsingCases::ConstantPassingToObject().0._Finished\;
    -- System.Void Hast::InternalInvocationProxy().System.Void Hast.TestInputs.Various.ConstantsUsingCases::ConstantPassingToObject() end


    -- System.Void Hast::InternalInvocationProxy().System.Void Hast.TestInputs.Various.LoopCases::BreakInLoop(System.Int32) start
    -- Signal connections for System.Void Hast::ExternalInvocationProxy() (#0):
    \LoopCases::BreakInLoop(Int32).0._Started\ <= \Hast::ExternalInvocationProxy().LoopCases::BreakInLoop(Int32)._Started.0\;
    \Hast::ExternalInvocationProxy().LoopCases::BreakInLoop(Int32)._Finished.0\ <= \LoopCases::BreakInLoop(Int32).0._Finished\;
    -- System.Void Hast::InternalInvocationProxy().System.Void Hast.TestInputs.Various.LoopCases::BreakInLoop(System.Int32) end


    -- System.Void Hast::InternalInvocationProxy().System.Void Hast.TestInputs.Various.LoopCases::BreakInLoopInLoop(System.Int32) start
    -- Signal connections for System.Void Hast::ExternalInvocationProxy() (#0):
    \LoopCases::BreakInLoopInLoop(Int32).0._Started\ <= \Hast::ExternalInvocationProxy().LoopCases::BreakInLoopInLoop(Int32)._Started.0\;
    \Hast::ExternalInvocationProxy().LoopCases::BreakInLoopInLoop(Int32)._Finished.0\ <= \LoopCases::BreakInLoopInLoop(Int32).0._Finished\;
    -- System.Void Hast::InternalInvocationProxy().System.Void Hast.TestInputs.Various.LoopCases::BreakInLoopInLoop(System.Int32) end


    -- System.Void Hast::InternalInvocationProxy().System.Void Hast.TestInputs.Various.ObjectUsingCases::NullUsage() start
    -- Signal connections for System.Void Hast::ExternalInvocationProxy() (#0):
    \ObjectUsingCases::NullUsage().0._Started\ <= \Hast::ExternalInvocationProxy().ObjectUsingCases::NullUsage()._Started.0\;
    \Hast::ExternalInvocationProxy().ObjectUsingCases::NullUsage()._Finished.0\ <= \ObjectUsingCases::NullUsage().0._Finished\;
    -- System.Void Hast::InternalInvocationProxy().System.Void Hast.TestInputs.Various.ObjectUsingCases::NullUsage() end


    -- System.Void Hast::InternalInvocationProxy().System.Void Hast.TestInputs.Various.ObjectUsingCases::VoidReturn(System.Int32) start
    -- Signal connections for System.Void Hast::ExternalInvocationProxy() (#0):
    \ObjectUsingCases::VoidReturn(Int32).0._Started\ <= \Hast::ExternalInvocationProxy().ObjectUsingCases::VoidReturn(Int32)._Started.0\;
    \Hast::ExternalInvocationProxy().ObjectUsingCases::VoidReturn(Int32)._Finished.0\ <= \ObjectUsingCases::VoidReturn(Int32).0._Finished\;
    -- System.Void Hast::InternalInvocationProxy().System.Void Hast.TestInputs.Various.ObjectUsingCases::VoidReturn(System.Int32) end


    -- System.Void Hast::InternalInvocationProxy().System.Void Hast.TestInputs.Various.ObjectUsingCases::ReferenceAssignment(System.Int32) start
    -- Signal connections for System.Void Hast::ExternalInvocationProxy() (#0):
    \ObjectUsingCases::ReferenceAssignment(Int32).0._Started\ <= \Hast::ExternalInvocationProxy().ObjectUsingCases::ReferenceAssignment(Int32)._Started.0\;
    \Hast::ExternalInvocationProxy().ObjectUsingCases::ReferenceAssignment(Int32)._Finished.0\ <= \ObjectUsingCases::ReferenceAssignment(Int32).0._Finished\;
    -- System.Void Hast::InternalInvocationProxy().System.Void Hast.TestInputs.Various.ObjectUsingCases::ReferenceAssignment(System.Int32) end


    -- System.Void Hast::InternalInvocationProxy().System.Void Hast.TestInputs.Various.ParallelCases::WhenAllWhenAnyAwaitedTasks(System.UInt32) start
    -- Signal connections for System.Void Hast::ExternalInvocationProxy() (#0):
    \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0._Started\ <= \Hast::ExternalInvocationProxy().ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32)._Started.0\;
    \Hast::ExternalInvocationProxy().ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32)._Finished.0\ <= \ParallelCases::WhenAllWhenAnyAwaitedTasks(UInt32).0._Finished\;
    -- System.Void Hast::InternalInvocationProxy().System.Void Hast.TestInputs.Various.ParallelCases::WhenAllWhenAnyAwaitedTasks(System.UInt32) end


    -- System.Void Hast::InternalInvocationProxy().System.Void Hast.TestInputs.Various.ParallelCases::ObjectUsingTasks(System.UInt32) start
    -- Signal connections for System.Void Hast::ExternalInvocationProxy() (#0):
    \ParallelCases::ObjectUsingTasks(UInt32).0._Started\ <= \Hast::ExternalInvocationProxy().ParallelCases::ObjectUsingTasks(UInt32)._Started.0\;
    \Hast::ExternalInvocationProxy().ParallelCases::ObjectUsingTasks(UInt32)._Finished.0\ <= \ParallelCases::ObjectUsingTasks(UInt32).0._Finished\;
    -- System.Void Hast::InternalInvocationProxy().System.Void Hast.TestInputs.Various.ParallelCases::ObjectUsingTasks(System.UInt32) end


    -- System.Void Hast::InternalInvocationProxy().System.Void Hast.TestInputs.Various.UnaryCases::IncrementDecrement(System.Int32) start
    -- Signal connections for System.Void Hast::ExternalInvocationProxy() (#0):
    \UnaryCases::IncrementDecrement(Int32).0._Started\ <= \Hast::ExternalInvocationProxy().UnaryCases::IncrementDecrement(Int32)._Started.0\;
    \Hast::ExternalInvocationProxy().UnaryCases::IncrementDecrement(Int32)._Finished.0\ <= \UnaryCases::IncrementDecrement(Int32).0._Finished\;
    -- System.Void Hast::InternalInvocationProxy().System.Void Hast.TestInputs.Various.UnaryCases::IncrementDecrement(System.Int32) end


    -- System.Void Hast::InternalInvocationProxy().System.Void Hast.TestInputs.Various.WronglyDecompiledCases::IncorrectlyDecompiledLiterals() start
    -- Signal connections for System.Void Hast::ExternalInvocationProxy() (#0):
    \WronglyDecompiledCases::IncorrectlyDecompiledLiterals().0._Started\ <= \Hast::ExternalInvocationProxy().WronglyDecompiledCases::IncorrectlyDecompiledLiterals()._Started.0\;
    \Hast::ExternalInvocationProxy().WronglyDecompiledCases::IncorrectlyDecompiledLiterals()._Finished.0\ <= \WronglyDecompiledCases::IncorrectlyDecompiledLiterals().0._Finished\;
    -- System.Void Hast::InternalInvocationProxy().System.Void Hast.TestInputs.Various.WronglyDecompiledCases::IncorrectlyDecompiledLiterals() end

end Imp;
