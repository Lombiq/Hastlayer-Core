using Hast.Common.Models;
using Shouldly;
using Shouldly.Configuration;
using System.Collections.Generic;
using System.Linq;
using System.Text.RegularExpressions;

namespace Hast.Transformer.Vhdl.Tests.VerificationTests
{
    public static class ShouldMatchApprovedExtensions
    {
        /// <summary>
        /// Match the input VHDL hardware description's source, including the XDC constraints if available, against an
        /// existing approved source file. This quickly tells if something changed.
        /// </summary>
        /// <remarks>
        /// Also see: http://shouldly.readthedocs.io/en/latest/assertions/shouldMatchApproved.html
        /// </remarks>
        public static void ShouldMatchApprovedWithVhdlConfiguration(
            this VhdlHardwareDescription hardwareDescription,
            string deviceName = null) =>
            (hardwareDescription.VhdlSource + hardwareDescription.XdcSource)
                .ShouldMatchApproved(configurationBuilder =>
                {
                    var configuration = configurationBuilder.WithVhdlConfiguration().UseCallerLocation();
                    if (!string.IsNullOrEmpty(deviceName)) configuration.WithDescriminator(deviceName);
                });

        /// <summary>
        /// Match the input VHDL hardware descriptions' sources, including the XDC constraints if available, against an
        /// existing approved source file. This quickly tells if something changed.
        /// </summary>
        /// <remarks>
        /// Also see: http://shouldly.readthedocs.io/en/latest/assertions/shouldMatchApproved.html
        /// </remarks>
        public static void ShouldMatchApprovedWithVhdlConfiguration(
            this IEnumerable<VhdlHardwareDescription> hardwareDescriptions,
            string deviceName = null) =>
            (string.Join(string.Empty, hardwareDescriptions.Select(hardwareDescription => hardwareDescription.VhdlSource + hardwareDescription.XdcSource)))
                .ShouldMatchApproved(configurationBuilder =>
                {
                    var configuration = configurationBuilder.WithVhdlConfiguration().UseCallerLocation();
                    if (!string.IsNullOrEmpty(deviceName)) configuration.WithDescriminator(deviceName);
                });

        /// <summary>
        /// Match the input VHDL source against an existing approved source file. This quickly tells if something changed.
        /// </summary>
        /// <remarks>
        /// Note that the two methods here can't be DRY because even with UseCallerLocation() Shouldly would loose
        /// track of where the verification file is.
        /// </remarks>
        public static void ShouldMatchApprovedWithVhdlConfiguration(this string vhdlSource) =>
            vhdlSource.ShouldMatchApproved(configurationBuilder =>
                configurationBuilder.WithVhdlConfiguration().UseCallerLocation());
    }

    public static class ShouldMatchConfigurationBuilderExtensions
    {
        public static ShouldMatchConfigurationBuilder WithVhdlConfiguration(this ShouldMatchConfigurationBuilder configurationBuilder) =>
            configurationBuilder
                .SubFolder(System.IO.Path.Combine("VerificationSources"))
                .WithFileExtension("vhdl")
                .WithScrubber(source =>
                {
                    source = Regex.Replace(
                        source,
                        @"-- Generated by Hastlayer \(hastlayer.com\) at ([0-9\-\s\:]*UTC)",
                        "-- Generated by Hastlayer (hastlayer.com) at <date and time removed for approval testing>");
                    source = Regex.Replace(source, @"-- Date and time:([0-9\-\s\:]*UTC)", "-- (Date and time removed for approval testing.)");
                    source = Regex.Replace(source, @"-- Hast_IP ID: ([0-9a-z]*)", "-- (Hast_IP ID removed for approval testing.)");

                    return source;
                });
    }
}
